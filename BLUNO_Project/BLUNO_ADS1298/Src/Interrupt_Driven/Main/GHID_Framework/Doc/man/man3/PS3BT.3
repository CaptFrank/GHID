.TH "PS3BT" 3 "Sun Mar 30 2014" "Version version 2.0" "GHID Framework" \" -*- nroff -*-
.ad l
.nh
.SH NAME
PS3BT \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <PS3BT\&.h>\fP
.PP
Inherits \fBBluetoothService\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBPS3BT\fP (\fBBTD\fP *pBtd, uint8_t btadr5=0, uint8_t btadr4=0, uint8_t btadr3=0, uint8_t btadr2=0, uint8_t btadr1=0, uint8_t btadr0=0)"
.br
.in -1c
.PP
.RI "\fBBluetoothService implementation\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "virtual void \fBACLData\fP (uint8_t *\fBACLData\fP)"
.br
.ti -1c
.RI "virtual void \fBRun\fP ()"
.br
.ti -1c
.RI "virtual void \fBReset\fP ()"
.br
.ti -1c
.RI "virtual void \fBdisconnect\fP ()"
.br
.in -1c
.in -1c
.PP
.RI "\fBPS3 Controller functions\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "bool \fBgetButtonPress\fP (\fBButtonEnum\fP \fBb\fP)"
.br
.ti -1c
.RI "bool \fBgetButtonClick\fP (\fBButtonEnum\fP \fBb\fP)"
.br
.ti -1c
.RI "uint8_t \fBgetAnalogButton\fP (\fBButtonEnum\fP a)"
.br
.ti -1c
.RI "uint8_t \fBgetAnalogHat\fP (\fBAnalogHatEnum\fP a)"
.br
.ti -1c
.RI "int16_t \fBgetSensor\fP (\fBSensorEnum\fP a)"
.br
.ti -1c
.RI "double \fBgetAngle\fP (\fBAngleEnum\fP a)"
.br
.ti -1c
.RI "double \fBget9DOFValues\fP (\fBSensorEnum\fP a)"
.br
.ti -1c
.RI "bool \fBgetStatus\fP (\fBStatusEnum\fP c)"
.br
.ti -1c
.RI "void \fBprintStatusString\fP ()"
.br
.ti -1c
.RI "String \fBgetTemperature\fP ()"
.br
.ti -1c
.RI "void \fBsetAllOff\fP ()"
.br
.ti -1c
.RI "void \fBsetRumbleOff\fP ()"
.br
.ti -1c
.RI "void \fBsetRumbleOn\fP (\fBRumbleEnum\fP mode)"
.br
.ti -1c
.RI "void \fBsetRumbleOn\fP (uint8_t rightDuration, uint8_t rightPower, uint8_t leftDuration, uint8_t leftPower)"
.br
.ti -1c
.RI "void \fBsetLedRaw\fP (uint8_t value)"
.br
.ti -1c
.RI "void \fBsetLedOff\fP ()"
.br
.ti -1c
.RI "void \fBsetLedOff\fP (\fBLEDEnum\fP a)"
.br
.ti -1c
.RI "void \fBsetLedOn\fP (\fBLEDEnum\fP a)"
.br
.ti -1c
.RI "void \fBsetLedToggle\fP (\fBLEDEnum\fP a)"
.br
.ti -1c
.RI "void \fBmoveSetBulb\fP (uint8_t \fBr\fP, uint8_t \fBg\fP, uint8_t \fBb\fP)"
.br
.ti -1c
.RI "void \fBmoveSetBulb\fP (\fBColorsEnum\fP color)"
.br
.ti -1c
.RI "void \fBmoveSetRumble\fP (uint8_t rumble)"
.br
.ti -1c
.RI "uint32_t \fBgetLastMessageTime\fP ()"
.br
.ti -1c
.RI "void \fBattachOnInit\fP (void(*funcOnInit)(void))"
.br
.in -1c
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "bool \fBPS3Connected\fP"
.br
.ti -1c
.RI "bool \fBPS3MoveConnected\fP"
.br
.ti -1c
.RI "bool \fBPS3NavigationConnected\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
This \fBBluetoothService\fP class implements support for all the official PS3 Controllers: Dualshock 3, Navigation or a Motion controller via Bluetooth\&.
.PP
Information about the protocol can be found at the wiki: https://github.com/felis/USB_Host_Shield_2.0/wiki/PS3-Information\&. 
.PP
Definition at line 32 of file PS3BT\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "\fBPS3BT::PS3BT\fP (\fBBTD\fP *pBtd, uint8_tbtadr5 = \fC0\fP, uint8_tbtadr4 = \fC0\fP, uint8_tbtadr3 = \fC0\fP, uint8_tbtadr2 = \fC0\fP, uint8_tbtadr1 = \fC0\fP, uint8_tbtadr0 = \fC0\fP)"Constructor for the \fBPS3BT\fP class\&. 
.PP
\fBParameters:\fP
.RS 4
\fIpBtd\fP Pointer to \fBBTD\fP class instance\&. 
.br
\fIbtadr5,btadr4,btadr3,btadr2,btadr1,btadr0\fP Pass your dongles Bluetooth address into the constructor, This will set \fBBTD::my_bdaddr\fP, so you don't have to plug in the dongle before pairing with your controller\&. 
.RE
.PP

.PP
Definition at line 23 of file PS3BT\&.cpp\&.
.SH "Member Function Documentation"
.PP 
.SS "void \fBPS3BT::ACLData\fP (uint8_t *ACLData)\fC [virtual]\fP"Used to pass acldata to the services\&. 
.PP
\fBParameters:\fP
.RS 4
\fIACLData\fP Incoming acldata\&. 
.RE
.PP

.PP
Reimplemented from \fBBluetoothService\fP\&.
.PP
Definition at line 227 of file PS3BT\&.cpp\&.
.SS "void \fBPS3BT::attachOnInit\fP (void(*)(void)funcOnInit)\fC [inline]\fP"Used to call your own function when the controller is successfully initialized\&. 
.PP
\fBParameters:\fP
.RS 4
\fIfuncOnInit\fP Function to call\&. 
.RE
.PP

.PP
Definition at line 191 of file PS3BT\&.h\&.
.SS "void \fBPS3BT::disconnect\fP ()\fC [virtual]\fP"Used this to disconnect any of the controllers\&. 
.PP
Reimplemented from \fBBluetoothService\fP\&.
.PP
Definition at line 220 of file PS3BT\&.cpp\&.
.SS "double \fBPS3BT::get9DOFValues\fP (\fBSensorEnum\fPa)"Read the sensors inside the Move controller\&. 
.PP
\fBParameters:\fP
.RS 4
\fIa\fP \fBaXmove\fP, \fBaYmove\fP, \fBaZmove\fP, \fBgXmove\fP, \fBgYmove\fP, \fBgZmove\fP, \fBmXmove\fP, \fBmYmove\fP, and \fBmXmove\fP\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The value in SI units\&. 
.RE
.PP

.PP
Definition at line 115 of file PS3BT\&.cpp\&.
.SS "uint8_t \fBPS3BT::getAnalogButton\fP (\fBButtonEnum\fPa)"Used to get the analog value from button presses\&. 
.PP
\fBParameters:\fP
.RS 4
\fIa\fP The \fBButtonEnum\fP to read\&. The supported buttons are: \fBUP\fP, \fBRIGHT\fP, \fBDOWN\fP, \fBLEFT\fP, \fBL1\fP, \fBL2\fP, \fBR1\fP, \fBR2\fP, \fBTRIANGLE\fP, \fBCIRCLE\fP, \fBCROSS\fP, \fBSQUARE\fP, and \fBT\fP\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Analog value in the range of 0-255\&. 
.RE
.PP

.PP
Definition at line 63 of file PS3BT\&.cpp\&.
.SS "uint8_t \fBPS3BT::getAnalogHat\fP (\fBAnalogHatEnum\fPa)"Used to read the analog joystick\&. 
.PP
\fBParameters:\fP
.RS 4
\fIa\fP \fBLeftHatX\fP, \fBLeftHatY\fP, \fBRightHatX\fP, and \fBRightHatY\fP\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Return the analog value in the range of 0-255\&. 
.RE
.PP

.PP
Definition at line 67 of file PS3BT\&.cpp\&.
.SS "double \fBPS3BT::getAngle\fP (\fBAngleEnum\fPa)"Use this to get \fBPitch\fP and \fBRoll\fP calculated using the accelerometer\&. 
.PP
\fBParameters:\fP
.RS 4
\fIa\fP Either \fBPitch\fP or \fBRoll\fP\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Return the angle in the range of 0-360\&. 
.RE
.PP

.PP
Definition at line 88 of file PS3BT\&.cpp\&.
.SS "bool \fBPS3BT::getButtonClick\fP (\fBButtonEnum\fPb)"
.PP
Definition at line 56 of file PS3BT\&.cpp\&.
.SS "bool \fBPS3BT::getButtonPress\fP (\fBButtonEnum\fPb)"\fBgetButtonPress(ButtonEnum b)\fP will return true as long as the button is held down\&.
.PP
While \fBgetButtonClick(ButtonEnum b)\fP will only return it once\&.
.PP
So you instance if you need to increase a variable once you would use \fBgetButtonClick(ButtonEnum b)\fP, but if you need to drive a robot forward you would use \fBgetButtonPress(ButtonEnum b)\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIb\fP \fBButtonEnum\fP to read\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBgetButtonPress(ButtonEnum b)\fP will return a true as long as a button is held down, while \fBgetButtonClick(ButtonEnum b)\fP will return true once for each button press\&. 
.RE
.PP

.PP
Definition at line 52 of file PS3BT\&.cpp\&.
.SS "uint32_t \fBPS3BT::getLastMessageTime\fP ()\fC [inline]\fP"Used to get the millis() of the last message 
.PP
Definition at line 183 of file PS3BT\&.h\&.
.SS "int16_t \fBPS3BT::getSensor\fP (\fBSensorEnum\fPa)"Used to read the sensors inside the Dualshock 3 and Move controller\&. 
.PP
\fBParameters:\fP
.RS 4
\fIa\fP The Dualshock 3 has a 3-axis accelerometer and a 1-axis gyro inside\&. The Move controller has a 3-axis accelerometer, a 3-axis gyro, a 3-axis magnetometer and a temperature sensor inside\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Return the raw sensor value\&. 
.RE
.PP

.PP
Definition at line 71 of file PS3BT\&.cpp\&.
.SS "bool \fBPS3BT::getStatus\fP (\fBStatusEnum\fPc)"Get the status from the controller\&. 
.PP
\fBParameters:\fP
.RS 4
\fIc\fP The \fBStatusEnum\fP you want to read\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
True if correct and false if not\&. 
.RE
.PP

.PP
Definition at line 159 of file PS3BT\&.cpp\&.
.SS "String \fBPS3BT::getTemperature\fP ()"Read the temperature from the Move controller\&. 
.PP
\fBReturns:\fP
.RS 4
The temperature in degrees Celsius\&. 
.RE
.PP

.PP
Definition at line 144 of file PS3BT\&.cpp\&.
.SS "void \fBPS3BT::moveSetBulb\fP (uint8_tr, uint8_tg, uint8_tb)"Use this to set the Color using RGB values\&. 
.PP
\fBParameters:\fP
.RS 4
\fIr,g,b\fP RGB value\&. 
.RE
.PP

.PP
Definition at line 605 of file PS3BT\&.cpp\&.
.SS "void \fBPS3BT::moveSetBulb\fP (\fBColorsEnum\fPcolor)"Use this to set the color using the predefined colors in \fBColorsEnum\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcolor\fP The desired color\&. 
.RE
.PP

.PP
Definition at line 614 of file PS3BT\&.cpp\&.
.SS "void \fBPS3BT::moveSetRumble\fP (uint8_trumble)"Set the rumble value inside the Move controller\&. 
.PP
\fBParameters:\fP
.RS 4
\fIrumble\fP The desired value in the range from 64-255\&. 
.RE
.PP

.PP
Definition at line 618 of file PS3BT\&.cpp\&.
.SS "void \fBPS3BT::printStatusString\fP ()"Read all the available statuses from the controller and prints it as a nice formated string\&. 
.PP
Definition at line 163 of file PS3BT\&.cpp\&.
.SS "void \fBPS3BT::Reset\fP ()\fC [virtual]\fP"Use this to reset the service\&. 
.PP
Reimplemented from \fBBluetoothService\fP\&.
.PP
Definition at line 207 of file PS3BT\&.cpp\&.
.SS "void \fBPS3BT::Run\fP ()\fC [virtual]\fP"Used to run part of the state machine\&. 
.PP
Reimplemented from \fBBluetoothService\fP\&.
.PP
Definition at line 458 of file PS3BT\&.cpp\&.
.SS "void \fBPS3BT::setAllOff\fP ()"Used to set all LEDs and rumble off\&. 
.PP
Definition at line 523 of file PS3BT\&.cpp\&.
.SS "void \fBPS3BT::setLedOff\fP ()\fC [inline]\fP"Turn all LEDs off\&. 
.PP
Definition at line 147 of file PS3BT\&.h\&.
.SS "void \fBPS3BT::setLedOff\fP (\fBLEDEnum\fPa)"Turn the specific LED off\&. 
.PP
\fBParameters:\fP
.RS 4
\fIa\fP The \fBLEDEnum\fP to turn off\&. 
.RE
.PP

.PP
Definition at line 565 of file PS3BT\&.cpp\&.
.SS "void \fBPS3BT::setLedOn\fP (\fBLEDEnum\fPa)"Turn the specific LED on\&. 
.PP
\fBParameters:\fP
.RS 4
\fIa\fP The \fBLEDEnum\fP to turn on\&. 
.RE
.PP

.PP
Definition at line 570 of file PS3BT\&.cpp\&.
.SS "void \fBPS3BT::setLedRaw\fP (uint8_tvalue)"Set LED value without using \fBLEDEnum\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIvalue\fP See: \fBLEDEnum\fP\&. 
.RE
.PP

.PP
Definition at line 560 of file PS3BT\&.cpp\&.
.SS "void \fBPS3BT::setLedToggle\fP (\fBLEDEnum\fPa)"Toggle the specific LED\&. 
.PP
\fBParameters:\fP
.RS 4
\fIa\fP The \fBLEDEnum\fP to toggle\&. 
.RE
.PP

.PP
Definition at line 579 of file PS3BT\&.cpp\&.
.SS "void \fBPS3BT::setRumbleOff\fP ()"Turn off rumble\&. 
.PP
Definition at line 534 of file PS3BT\&.cpp\&.
.SS "void \fBPS3BT::setRumbleOn\fP (\fBRumbleEnum\fPmode)"Turn on rumble\&. 
.PP
\fBParameters:\fP
.RS 4
\fImode\fP Either \fBRumbleHigh\fP or \fBRumbleLow\fP\&. 
.RE
.PP

.PP
Definition at line 543 of file PS3BT\&.cpp\&.
.SS "void \fBPS3BT::setRumbleOn\fP (uint8_trightDuration, uint8_trightPower, uint8_tleftDuration, uint8_tleftPower)"Turn on rumble using custom duration and power\&. 
.PP
\fBParameters:\fP
.RS 4
\fIrightDuration\fP The duration of the right/low rumble effect\&. 
.br
\fIrightPower\fP The intensity of the right/low rumble effect\&. 
.br
\fIleftDuration\fP The duration of the left/high rumble effect\&. 
.br
\fIleftPower\fP The intensity of the left/high rumble effect\&. 
.RE
.PP

.PP
Definition at line 552 of file PS3BT\&.cpp\&.
.SH "Member Data Documentation"
.PP 
.SS "bool \fBPS3BT::PS3Connected\fP"Variable used to indicate if the normal Playstation controller is successfully connected\&. 
.PP
Definition at line 193 of file PS3BT\&.h\&.
.SS "bool \fBPS3BT::PS3MoveConnected\fP"Variable used to indicate if the Move controller is successfully connected\&. 
.PP
Definition at line 199 of file PS3BT\&.h\&.
.SS "bool \fBPS3BT::PS3NavigationConnected\fP"Variable used to indicate if the Navigation controller is successfully connected\&. 
.PP
Definition at line 201 of file PS3BT\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for GHID Framework from the source code\&.
