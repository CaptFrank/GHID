
CLASS_JOYSTICK1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800100  000018a4  00001938  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000018a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000130  00800130  00800130  00001968  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001968  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000720  00000000  00000000  00001998  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000b34a  00000000  00000000  000020b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002e17  00000000  00000000  0000d402  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00014df4  00000000  00000000  00010219  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00001258  00000000  00000000  00025010  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00017a34  00000000  00000000  00026268  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000077be  00000000  00000000  0003dc9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001128  00000000  00000000  0004545a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000a756  00000000  00000000  00046582  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	c0 c0       	rjmp	.+384    	; 0x182 <__ctors_end>
       2:	00 00       	nop
       4:	da c0       	rjmp	.+436    	; 0x1ba <__bad_interrupt>
       6:	00 00       	nop
       8:	d8 c0       	rjmp	.+432    	; 0x1ba <__bad_interrupt>
       a:	00 00       	nop
       c:	d6 c0       	rjmp	.+428    	; 0x1ba <__bad_interrupt>
       e:	00 00       	nop
      10:	d4 c0       	rjmp	.+424    	; 0x1ba <__bad_interrupt>
      12:	00 00       	nop
      14:	d2 c0       	rjmp	.+420    	; 0x1ba <__bad_interrupt>
      16:	00 00       	nop
      18:	d0 c0       	rjmp	.+416    	; 0x1ba <__bad_interrupt>
      1a:	00 00       	nop
      1c:	ce c0       	rjmp	.+412    	; 0x1ba <__bad_interrupt>
      1e:	00 00       	nop
      20:	cc c0       	rjmp	.+408    	; 0x1ba <__bad_interrupt>
      22:	00 00       	nop
      24:	ca c0       	rjmp	.+404    	; 0x1ba <__bad_interrupt>
      26:	00 00       	nop
      28:	c8 c0       	rjmp	.+400    	; 0x1ba <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0c 94 61 09 	jmp	0x12c2	; 0x12c2 <__vector_11>
      30:	c4 c0       	rjmp	.+392    	; 0x1ba <__bad_interrupt>
      32:	00 00       	nop
      34:	c2 c0       	rjmp	.+388    	; 0x1ba <__bad_interrupt>
      36:	00 00       	nop
      38:	c0 c0       	rjmp	.+384    	; 0x1ba <__bad_interrupt>
      3a:	00 00       	nop
      3c:	be c0       	rjmp	.+380    	; 0x1ba <__bad_interrupt>
      3e:	00 00       	nop
      40:	bc c0       	rjmp	.+376    	; 0x1ba <__bad_interrupt>
      42:	00 00       	nop
      44:	ba c0       	rjmp	.+372    	; 0x1ba <__bad_interrupt>
      46:	00 00       	nop
      48:	b8 c0       	rjmp	.+368    	; 0x1ba <__bad_interrupt>
      4a:	00 00       	nop
      4c:	b6 c0       	rjmp	.+364    	; 0x1ba <__bad_interrupt>
      4e:	00 00       	nop
      50:	b4 c0       	rjmp	.+360    	; 0x1ba <__bad_interrupt>
      52:	00 00       	nop
      54:	b2 c0       	rjmp	.+356    	; 0x1ba <__bad_interrupt>
      56:	00 00       	nop
      58:	b0 c0       	rjmp	.+352    	; 0x1ba <__bad_interrupt>
      5a:	00 00       	nop
      5c:	36 c2       	rjmp	.+1132   	; 0x4ca <__vector_23>
      5e:	00 00       	nop
      60:	ac c0       	rjmp	.+344    	; 0x1ba <__bad_interrupt>
      62:	00 00       	nop
      64:	aa c0       	rjmp	.+340    	; 0x1ba <__bad_interrupt>
      66:	00 00       	nop
      68:	a8 c0       	rjmp	.+336    	; 0x1ba <__bad_interrupt>
      6a:	00 00       	nop
      6c:	a6 c0       	rjmp	.+332    	; 0x1ba <__bad_interrupt>
      6e:	00 00       	nop
      70:	a4 c0       	rjmp	.+328    	; 0x1ba <__bad_interrupt>
      72:	00 00       	nop
      74:	2c 0a       	sbc	r2, r28
      76:	54 0a       	sbc	r5, r20
      78:	41 0b       	sbc	r20, r17
      7a:	54 0a       	sbc	r5, r20
      7c:	41 0b       	sbc	r20, r17
      7e:	93 0a       	sbc	r9, r19
      80:	b6 0a       	sbc	r11, r22
      82:	41 0b       	sbc	r20, r17
      84:	0e 0b       	sbc	r16, r30
      86:	1e 0b       	sbc	r17, r30

00000088 <ProductString>:
      88:	26 03 4a 00 6f 00 79 00 73 00 74 00 69 00 63 00     &.J.o.y.s.t.i.c.
      98:	6b 00 20 00 2b 00 20 00 53 00 65 00 72 00 69 00     k. .+. .S.e.r.i.
      a8:	61 00 6c 00 00 00                                   a.l...

000000ae <ManufacturerString>:
      ae:	22 03 46 00 72 00 61 00 6e 00 63 00 69 00 73 00     ".F.r.a.n.c.i.s.
      be:	20 00 50 00 61 00 70 00 69 00 6e 00 65 00 61 00      .P.a.p.i.n.e.a.
      ce:	75 00 00 00                                         u...

000000d2 <LanguageString>:
      d2:	04 03 09 04                                         ....

000000d6 <ConfigurationDescriptor>:
      d6:	09 02 5f 00 03 01 00 c0 32 09 04 00 00 01 03 00     .._.....2.......
      e6:	00 00 09 21 11 01 00 01 22 3a 00 07 05 81 03 08     ...!....":......
      f6:	00 05 08 0b 01 02 02 02 01 00 09 04 01 00 01 02     ................
     106:	02 01 00 05 24 00 10 01 04 24 02 06 05 24 06 01     ....$....$...$..
     116:	02 07 05 84 03 08 00 ff 09 04 02 00 02 0a 00 00     ................
     126:	00 07 05 03 02 10 00 05 07 05 82 02 10 00 05        ...............

00000135 <DeviceDescriptor>:
     135:	12 01 00 02 ef 02 01 08 eb 03 43 20 00 01 01 02     ..........C ....
     145:	dc 01                                               ..

00000147 <JoystickReport>:
     147:	05 01 09 04 a1 01 09 01 a1 00 09 30 09 31 09 32     ...........0.1.2
     157:	16 18 fc 26 e8 03 36 ff ff 46 01 00 95 03 75 10     ...&..6..F....u.
     167:	81 02 c0 05 09 19 01 29 08 15 00 25 01 75 01 95     .......)...%.u..
     177:	08 81 02 75 00 95 01 81 01 c0 00                    ...u.......

00000182 <__ctors_end>:
     182:	11 24       	eor	r1, r1
     184:	1f be       	out	0x3f, r1	; 63
     186:	cf ef       	ldi	r28, 0xFF	; 255
     188:	d2 e0       	ldi	r29, 0x02	; 2
     18a:	de bf       	out	0x3e, r29	; 62
     18c:	cd bf       	out	0x3d, r28	; 61

0000018e <__do_copy_data>:
     18e:	11 e0       	ldi	r17, 0x01	; 1
     190:	a0 e0       	ldi	r26, 0x00	; 0
     192:	b1 e0       	ldi	r27, 0x01	; 1
     194:	e4 ea       	ldi	r30, 0xA4	; 164
     196:	f8 e1       	ldi	r31, 0x18	; 24
     198:	02 c0       	rjmp	.+4      	; 0x19e <__do_copy_data+0x10>
     19a:	05 90       	lpm	r0, Z+
     19c:	0d 92       	st	X+, r0
     19e:	a0 33       	cpi	r26, 0x30	; 48
     1a0:	b1 07       	cpc	r27, r17
     1a2:	d9 f7       	brne	.-10     	; 0x19a <__do_copy_data+0xc>

000001a4 <__do_clear_bss>:
     1a4:	22 e0       	ldi	r18, 0x02	; 2
     1a6:	a0 e3       	ldi	r26, 0x30	; 48
     1a8:	b1 e0       	ldi	r27, 0x01	; 1
     1aa:	01 c0       	rjmp	.+2      	; 0x1ae <.do_clear_bss_start>

000001ac <.do_clear_bss_loop>:
     1ac:	1d 92       	st	X+, r1

000001ae <.do_clear_bss_start>:
     1ae:	a0 36       	cpi	r26, 0x60	; 96
     1b0:	b2 07       	cpc	r27, r18
     1b2:	e1 f7       	brne	.-8      	; 0x1ac <.do_clear_bss_loop>
     1b4:	6a d1       	rcall	.+724    	; 0x48a <main>
     1b6:	0c 94 50 0c 	jmp	0x18a0	; 0x18a0 <_exit>

000001ba <__bad_interrupt>:
     1ba:	22 cf       	rjmp	.-444    	; 0x0 <__vectors>

000001bc <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
     1bc:	29 2f       	mov	r18, r25
     1be:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     1c0:	23 30       	cpi	r18, 0x03	; 3
     1c2:	31 05       	cpc	r19, r1
     1c4:	c9 f0       	breq	.+50     	; 0x1f8 <CALLBACK_USB_GetDescriptor+0x3c>
     1c6:	44 f4       	brge	.+16     	; 0x1d8 <CALLBACK_USB_GetDescriptor+0x1c>
     1c8:	21 30       	cpi	r18, 0x01	; 1
     1ca:	31 05       	cpc	r19, r1
     1cc:	09 f4       	brne	.+2      	; 0x1d0 <CALLBACK_USB_GetDescriptor+0x14>
     1ce:	39 c0       	rjmp	.+114    	; 0x242 <CALLBACK_USB_GetDescriptor+0x86>
     1d0:	22 30       	cpi	r18, 0x02	; 2
     1d2:	31 05       	cpc	r19, r1
     1d4:	61 f0       	breq	.+24     	; 0x1ee <CALLBACK_USB_GetDescriptor+0x32>
     1d6:	06 c0       	rjmp	.+12     	; 0x1e4 <CALLBACK_USB_GetDescriptor+0x28>
     1d8:	21 32       	cpi	r18, 0x21	; 33
     1da:	31 05       	cpc	r19, r1
     1dc:	41 f1       	breq	.+80     	; 0x22e <CALLBACK_USB_GetDescriptor+0x72>
     1de:	22 32       	cpi	r18, 0x22	; 34
     1e0:	31 05       	cpc	r19, r1
     1e2:	51 f1       	breq	.+84     	; 0x238 <CALLBACK_USB_GetDescriptor+0x7c>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     1e4:	80 e0       	ldi	r24, 0x00	; 0
     1e6:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     1e8:	20 e0       	ldi	r18, 0x00	; 0
     1ea:	30 e0       	ldi	r19, 0x00	; 0
     1ec:	33 c0       	rjmp	.+102    	; 0x254 <CALLBACK_USB_GetDescriptor+0x98>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     1ee:	8f e5       	ldi	r24, 0x5F	; 95
     1f0:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     1f2:	26 ed       	ldi	r18, 0xD6	; 214
     1f4:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     1f6:	2e c0       	rjmp	.+92     	; 0x254 <CALLBACK_USB_GetDescriptor+0x98>
     1f8:	99 27       	eor	r25, r25
		case DTYPE_String:
			switch (DescriptorNumber)
     1fa:	81 30       	cpi	r24, 0x01	; 1
     1fc:	91 05       	cpc	r25, r1
     1fe:	59 f0       	breq	.+22     	; 0x216 <CALLBACK_USB_GetDescriptor+0x5a>
     200:	82 30       	cpi	r24, 0x02	; 2
     202:	91 05       	cpc	r25, r1
     204:	71 f0       	breq	.+28     	; 0x222 <CALLBACK_USB_GetDescriptor+0x66>
     206:	89 2b       	or	r24, r25
     208:	09 f5       	brne	.+66     	; 0x24c <CALLBACK_USB_GetDescriptor+0x90>
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     20a:	e2 ed       	ldi	r30, 0xD2	; 210
     20c:	f0 e0       	ldi	r31, 0x00	; 0
     20e:	84 91       	lpm	r24, Z
     210:	90 e0       	ldi	r25, 0x00	; 0
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case STRING_ID_Language:
					Address = &LanguageString;
     212:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
     214:	1f c0       	rjmp	.+62     	; 0x254 <CALLBACK_USB_GetDescriptor+0x98>
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     216:	ee ea       	ldi	r30, 0xAE	; 174
     218:	f0 e0       	ldi	r31, 0x00	; 0
     21a:	84 91       	lpm	r24, Z
     21c:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
     21e:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
     220:	19 c0       	rjmp	.+50     	; 0x254 <CALLBACK_USB_GetDescriptor+0x98>
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     222:	e8 e8       	ldi	r30, 0x88	; 136
     224:	f0 e0       	ldi	r31, 0x00	; 0
     226:	84 91       	lpm	r24, Z
     228:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
     22a:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
     22c:	13 c0       	rjmp	.+38     	; 0x254 <CALLBACK_USB_GetDescriptor+0x98>
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_JoystickHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
     22e:	89 e0       	ldi	r24, 0x09	; 9
     230:	90 e0       	ldi	r25, 0x00	; 0
					break;
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_JoystickHID;
     232:	28 ee       	ldi	r18, 0xE8	; 232
     234:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
     236:	0e c0       	rjmp	.+28     	; 0x254 <CALLBACK_USB_GetDescriptor+0x98>
		case HID_DTYPE_Report:
			Address = &JoystickReport;
			Size    = sizeof(JoystickReport);
     238:	8a e3       	ldi	r24, 0x3A	; 58
     23a:	90 e0       	ldi	r25, 0x00	; 0
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_JoystickHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case HID_DTYPE_Report:
			Address = &JoystickReport;
     23c:	27 e4       	ldi	r18, 0x47	; 71
     23e:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(JoystickReport);
			break;
     240:	09 c0       	rjmp	.+18     	; 0x254 <CALLBACK_USB_GetDescriptor+0x98>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     242:	82 e1       	ldi	r24, 0x12	; 18
     244:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     246:	25 e3       	ldi	r18, 0x35	; 53
     248:	31 e0       	ldi	r19, 0x01	; 1
     24a:	04 c0       	rjmp	.+8      	; 0x254 <CALLBACK_USB_GetDescriptor+0x98>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     24c:	80 e0       	ldi	r24, 0x00	; 0
     24e:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     250:	20 e0       	ldi	r18, 0x00	; 0
     252:	30 e0       	ldi	r19, 0x00	; 0
			Address = &JoystickReport;
			Size    = sizeof(JoystickReport);
			break;
	}

	*DescriptorAddress = Address;
     254:	fa 01       	movw	r30, r20
     256:	31 83       	std	Z+1, r19	; 0x01
     258:	20 83       	st	Z, r18
	return Size;
}
     25a:	08 95       	ret

0000025c <Serial_SendData>:
	}
}

void Serial_SendData(const uint8_t* Buffer,
                     uint16_t Length)
{
     25c:	cf 93       	push	r28
     25e:	df 93       	push	r29
	while (Length--)
     260:	61 15       	cp	r22, r1
     262:	71 05       	cpc	r23, r1
     264:	79 f0       	breq	.+30     	; 0x284 <Serial_SendData+0x28>
     266:	dc 01       	movw	r26, r24
     268:	86 0f       	add	r24, r22
     26a:	97 1f       	adc	r25, r23
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
     26c:	e8 ec       	ldi	r30, 0xC8	; 200
     26e:	f0 e0       	ldi	r31, 0x00	; 0
				UDR1 = DataByte;
     270:	ce ec       	ldi	r28, 0xCE	; 206
     272:	d0 e0       	ldi	r29, 0x00	; 0
	  Serial_SendByte(*(Buffer++));
     274:	3d 91       	ld	r19, X+
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
     276:	20 81       	ld	r18, Z
     278:	25 ff       	sbrs	r18, 5
     27a:	fd cf       	rjmp	.-6      	; 0x276 <Serial_SendData+0x1a>
				UDR1 = DataByte;
     27c:	38 83       	st	Y, r19
}

void Serial_SendData(const uint8_t* Buffer,
                     uint16_t Length)
{
	while (Length--)
     27e:	a8 17       	cp	r26, r24
     280:	b9 07       	cpc	r27, r25
     282:	c1 f7       	brne	.-16     	; 0x274 <Serial_SendData+0x18>
	  Serial_SendByte(*(Buffer++));
}
     284:	df 91       	pop	r29
     286:	cf 91       	pop	r28
     288:	08 95       	ret

0000028a <SetupHardware>:
	}
}

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
     28a:	cf 93       	push	r28
     28c:	df 93       	push	r29
    /* Disable watchdog if enabled by bootloader/fuses */
    MCUSR &= ~(1 << WDRF);
     28e:	84 b7       	in	r24, 0x34	; 52
     290:	87 7f       	andi	r24, 0xF7	; 247
     292:	84 bf       	out	0x34, r24	; 52
    wdt_disable();
     294:	88 e1       	ldi	r24, 0x18	; 24
     296:	0f b6       	in	r0, 0x3f	; 63
     298:	f8 94       	cli
     29a:	80 93 60 00 	sts	0x0060, r24
     29e:	10 92 60 00 	sts	0x0060, r1
     2a2:	0f be       	out	0x3f, r0	; 63
	
	//! Setup the port pin (Reset) - PD7
	DDRD  |= (1 << PIND7);	//! Output
     2a4:	57 9a       	sbi	0x0a, 7	; 10
	PORTD |= (1 << PIND7);	//! High
     2a6:	5f 9a       	sbi	0x0b, 7	; 11
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     2a8:	8f ec       	ldi	r24, 0xCF	; 207
     2aa:	90 e0       	ldi	r25, 0x00	; 0
     2ac:	90 93 cd 00 	sts	0x00CD, r25
     2b0:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     2b4:	86 e0       	ldi	r24, 0x06	; 6
     2b6:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     2ba:	82 e0       	ldi	r24, 0x02	; 2
     2bc:	80 93 c8 00 	sts	0x00C8, r24
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     2c0:	c9 ec       	ldi	r28, 0xC9	; 201
     2c2:	d0 e0       	ldi	r29, 0x00	; 0
     2c4:	88 e1       	ldi	r24, 0x18	; 24
     2c6:	88 83       	st	Y, r24

				DDRD  |= (1 << 3);
     2c8:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     2ca:	5a 9a       	sbi	0x0b, 2	; 11

    /* Hardware Initialization */
    Serial_Init(9600, true);
    LEDs_Init();
    USB_Init();
     2cc:	ea d7       	rcall	.+4052   	; 0x12a2 <USB_Init>

	//! Serial Port Default INIT
    UCSR1B = ((1 << RXCIE1) | (1 << TXEN1) | (1 << RXEN1));
     2ce:	88 e9       	ldi	r24, 0x98	; 152
     2d0:	88 83       	st	Y, r24
}
     2d2:	df 91       	pop	r29
     2d4:	cf 91       	pop	r28
     2d6:	08 95       	ret

000002d8 <EVENT_USB_Device_Connect>:

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
     2d8:	08 95       	ret

000002da <EVENT_USB_Device_Disconnect>:
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
     2da:	08 95       	ret

000002dc <EVENT_USB_Device_ConfigurationChanged>:
void EVENT_USB_Device_ConfigurationChanged(void)
{
	
	bool config_success = true;
	
	config_success &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
     2dc:	80 e0       	ldi	r24, 0x00	; 0
     2de:	91 e0       	ldi	r25, 0x01	; 1
     2e0:	2d d1       	rcall	.+602    	; 0x53c <CDC_Device_ConfigureEndpoints>
	config_success &= HID_Device_ConfigureEndpoints(&Joystick_HID_Interface);
     2e2:	8b e1       	ldi	r24, 0x1B	; 27
     2e4:	91 e0       	ldi	r25, 0x01	; 1
     2e6:	ff d3       	rcall	.+2046   	; 0xae6 <HID_Device_ConfigureEndpoints>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
     2e8:	e2 ee       	ldi	r30, 0xE2	; 226
     2ea:	f0 e0       	ldi	r31, 0x00	; 0
     2ec:	80 81       	ld	r24, Z
     2ee:	84 60       	ori	r24, 0x04	; 4
     2f0:	80 83       	st	Z, r24
     2f2:	08 95       	ret

000002f4 <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
     2f4:	80 e0       	ldi	r24, 0x00	; 0
     2f6:	91 e0       	ldi	r25, 0x01	; 1
     2f8:	13 d2       	rcall	.+1062   	; 0x720 <CDC_Device_ProcessControlRequest>
	HID_Device_ProcessControlRequest(&Joystick_HID_Interface);
     2fa:	8b e1       	ldi	r24, 0x1B	; 27
     2fc:	91 e0       	ldi	r25, 0x01	; 1
     2fe:	af c2       	rjmp	.+1374   	; 0x85e <HID_Device_ProcessControlRequest>
     300:	08 95       	ret

00000302 <EVENT_USB_Device_StartOfFrame>:
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
     302:	80 91 29 01 	lds	r24, 0x0129
     306:	90 91 2a 01 	lds	r25, 0x012A
     30a:	00 97       	sbiw	r24, 0x00	; 0
     30c:	29 f0       	breq	.+10     	; 0x318 <EVENT_USB_Device_StartOfFrame+0x16>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
     30e:	01 97       	sbiw	r24, 0x01	; 1
     310:	90 93 2a 01 	sts	0x012A, r25
     314:	80 93 29 01 	sts	0x0129, r24
     318:	08 95       	ret

0000031a <CALLBACK_HID_Device_CreateHIDReport>:
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                         uint8_t* const ReportID,
                                         const uint8_t ReportType,
                                         void* ReportData,
                                         uint16_t* const ReportSize)
{
     31a:	af 92       	push	r10
     31c:	bf 92       	push	r11
     31e:	df 92       	push	r13
     320:	ef 92       	push	r14
     322:	ff 92       	push	r15
     324:	0f 93       	push	r16
     326:	1f 93       	push	r17
     328:	cf 93       	push	r28
     32a:	df 93       	push	r29
     32c:	cd b7       	in	r28, 0x3d	; 61
     32e:	de b7       	in	r29, 0x3e	; 62
     330:	27 97       	sbiw	r28, 0x07	; 7
     332:	0f b6       	in	r0, 0x3f	; 63
     334:	f8 94       	cli
     336:	de bf       	out	0x3e, r29	; 62
     338:	0f be       	out	0x3f, r0	; 63
     33a:	cd bf       	out	0x3d, r28	; 61
		 */
		static inline RingBuff_Count_t RingBuffer_GetCount(RingBuff_t* const Buffer)
		{
			RingBuff_Count_t Count;
			
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     33c:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     33e:	f8 94       	cli
			{
				Count = Buffer->Count;
     340:	80 91 52 02 	lds	r24, 0x0252
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     344:	9f bf       	out	0x3f, r25	; 63
	int ind;
	
    USB_JoystickReport_Data_t *reportp = (USB_JoystickReport_Data_t*)ReportData;
	RingBuff_Count_t BufferCount = RingBuffer_GetCount(&USARTtoUSB_Buffer);

	if (BufferCount >= 8) {
     346:	88 30       	cpi	r24, 0x08	; 8
     348:	08 f4       	brcc	.+2      	; 0x34c <CALLBACK_HID_Device_CreateHIDReport+0x32>
     34a:	5d c0       	rjmp	.+186    	; 0x406 <CALLBACK_HID_Device_CreateHIDReport+0xec>
		for (ind = 0; ind < sizeof(joyReport); ind ++) {
     34c:	60 e0       	ldi	r22, 0x00	; 0
     34e:	70 e0       	ldi	r23, 0x00	; 0
	int ind;
	
    USB_JoystickReport_Data_t *reportp = (USB_JoystickReport_Data_t*)ReportData;
	RingBuff_Count_t BufferCount = RingBuffer_GetCount(&USARTtoUSB_Buffer);

	if (BufferCount >= 8) {
     350:	80 e0       	ldi	r24, 0x00	; 0
     352:	90 e0       	ldi	r25, 0x00	; 0
		 *
		 *  \return Next data element stored in the buffer
		 */
		static inline RingBuff_Data_t RingBuffer_Remove(RingBuff_t* const Buffer)
		{
			RingBuff_Data_t Data = *Buffer->Out;
     354:	a0 e5       	ldi	r26, 0x50	; 80
     356:	b2 e0       	ldi	r27, 0x02	; 2
			
			if (++Buffer->Out == &Buffer->Buffer[BUFFER_SIZE])
			  Buffer->Out = Buffer->Buffer;
     358:	0f 2e       	mov	r0, r31
     35a:	ff e4       	ldi	r31, 0x4F	; 79
     35c:	ef 2e       	mov	r14, r31
     35e:	f1 e0       	ldi	r31, 0x01	; 1
     360:	ff 2e       	mov	r15, r31
     362:	f0 2d       	mov	r31, r0

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
			{
				Buffer->Count--;
     364:	42 e5       	ldi	r20, 0x52	; 82
     366:	52 e0       	ldi	r21, 0x02	; 2
		for (ind = 0; ind < sizeof(joyReport); ind ++) {
			((uint8_t *)&newReport)[ind] = RingBuffer_Remove(&USARTtoUSB_Buffer);
     368:	aa 24       	eor	r10, r10
     36a:	a3 94       	inc	r10
     36c:	b1 2c       	mov	r11, r1
     36e:	ac 0e       	add	r10, r28
     370:	bd 1e       	adc	r11, r29
     372:	a6 0e       	add	r10, r22
     374:	b7 1e       	adc	r11, r23
		 *
		 *  \return Next data element stored in the buffer
		 */
		static inline RingBuff_Data_t RingBuffer_Remove(RingBuff_t* const Buffer)
		{
			RingBuff_Data_t Data = *Buffer->Out;
     376:	ed 91       	ld	r30, X+
     378:	fc 91       	ld	r31, X
     37a:	11 97       	sbiw	r26, 0x01	; 1
     37c:	d1 90       	ld	r13, Z+
			
			if (++Buffer->Out == &Buffer->Buffer[BUFFER_SIZE])
     37e:	11 96       	adiw	r26, 0x01	; 1
     380:	fc 93       	st	X, r31
     382:	ee 93       	st	-X, r30
     384:	ee 54       	subi	r30, 0x4E	; 78
     386:	f2 40       	sbci	r31, 0x02	; 2
     388:	19 f4       	brne	.+6      	; 0x390 <CALLBACK_HID_Device_CreateHIDReport+0x76>
			  Buffer->Out = Buffer->Buffer;
     38a:	11 96       	adiw	r26, 0x01	; 1
     38c:	fc 92       	st	X, r15
     38e:	ee 92       	st	-X, r14

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     390:	6f b7       	in	r22, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     392:	f8 94       	cli
			{
				Buffer->Count--;
     394:	fa 01       	movw	r30, r20
     396:	70 81       	ld	r23, Z
     398:	71 50       	subi	r23, 0x01	; 1
     39a:	70 83       	st	Z, r23
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     39c:	6f bf       	out	0x3f, r22	; 63
     39e:	f5 01       	movw	r30, r10
     3a0:	d0 82       	st	Z, r13
	
    USB_JoystickReport_Data_t *reportp = (USB_JoystickReport_Data_t*)ReportData;
	RingBuff_Count_t BufferCount = RingBuffer_GetCount(&USARTtoUSB_Buffer);

	if (BufferCount >= 8) {
		for (ind = 0; ind < sizeof(joyReport); ind ++) {
     3a2:	01 96       	adiw	r24, 0x01	; 1
     3a4:	bc 01       	movw	r22, r24
     3a6:	87 30       	cpi	r24, 0x07	; 7
     3a8:	91 05       	cpc	r25, r1
     3aa:	f1 f6       	brne	.-68     	; 0x368 <CALLBACK_HID_Device_CreateHIDReport+0x4e>
			((uint8_t *)&newReport)[ind] = RingBuffer_Remove(&USARTtoUSB_Buffer);
		}

		joyReport.Button = newReport.Button;
     3ac:	8f 81       	ldd	r24, Y+7	; 0x07
     3ae:	80 93 4b 01 	sts	0x014B, r24
		joyReport.X = newReport.X;
     3b2:	89 81       	ldd	r24, Y+1	; 0x01
     3b4:	9a 81       	ldd	r25, Y+2	; 0x02
     3b6:	90 93 46 01 	sts	0x0146, r25
     3ba:	80 93 45 01 	sts	0x0145, r24
		joyReport.Y = newReport.Y;
     3be:	8b 81       	ldd	r24, Y+3	; 0x03
     3c0:	9c 81       	ldd	r25, Y+4	; 0x04
     3c2:	90 93 48 01 	sts	0x0148, r25
     3c6:	80 93 47 01 	sts	0x0147, r24
		joyReport.Z = newReport.Z;
     3ca:	8d 81       	ldd	r24, Y+5	; 0x05
     3cc:	9e 81       	ldd	r25, Y+6	; 0x06
     3ce:	90 93 4a 01 	sts	0x014A, r25
     3d2:	80 93 49 01 	sts	0x0149, r24
		 *
		 *  \return Next data element stored in the buffer
		 */
		static inline RingBuff_Data_t RingBuffer_Remove(RingBuff_t* const Buffer)
		{
			RingBuff_Data_t Data = *Buffer->Out;
     3d6:	e0 e5       	ldi	r30, 0x50	; 80
     3d8:	f2 e0       	ldi	r31, 0x02	; 2
			
			if (++Buffer->Out == &Buffer->Buffer[BUFFER_SIZE])
     3da:	80 81       	ld	r24, Z
     3dc:	91 81       	ldd	r25, Z+1	; 0x01
     3de:	01 96       	adiw	r24, 0x01	; 1
     3e0:	91 83       	std	Z+1, r25	; 0x01
     3e2:	80 83       	st	Z, r24
     3e4:	8e 54       	subi	r24, 0x4E	; 78
     3e6:	92 40       	sbci	r25, 0x02	; 2
     3e8:	31 f4       	brne	.+12     	; 0x3f6 <CALLBACK_HID_Device_CreateHIDReport+0xdc>
			  Buffer->Out = Buffer->Buffer;
     3ea:	8f e4       	ldi	r24, 0x4F	; 79
     3ec:	91 e0       	ldi	r25, 0x01	; 1
     3ee:	90 93 51 02 	sts	0x0251, r25
     3f2:	80 93 50 02 	sts	0x0250, r24

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     3f6:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     3f8:	f8 94       	cli
			{
				Buffer->Count--;
     3fa:	e2 e5       	ldi	r30, 0x52	; 82
     3fc:	f2 e0       	ldi	r31, 0x02	; 2
     3fe:	90 81       	ld	r25, Z
     400:	91 50       	subi	r25, 0x01	; 1
     402:	90 83       	st	Z, r25
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     404:	8f bf       	out	0x3f, r24	; 63
		/* Remove spacer */
		RingBuffer_Remove(&USARTtoUSB_Buffer);
	}
	

    *reportp = joyReport;
     406:	87 e0       	ldi	r24, 0x07	; 7
     408:	e5 e4       	ldi	r30, 0x45	; 69
     40a:	f1 e0       	ldi	r31, 0x01	; 1
     40c:	d9 01       	movw	r26, r18
     40e:	01 90       	ld	r0, Z+
     410:	0d 92       	st	X+, r0
     412:	8a 95       	dec	r24
     414:	e1 f7       	brne	.-8      	; 0x40e <CALLBACK_HID_Device_CreateHIDReport+0xf4>

    *ReportSize = sizeof(USB_JoystickReport_Data_t);
     416:	87 e0       	ldi	r24, 0x07	; 7
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	f8 01       	movw	r30, r16
     41c:	91 83       	std	Z+1, r25	; 0x01
     41e:	80 83       	st	Z, r24
    return false;
}
     420:	80 e0       	ldi	r24, 0x00	; 0
     422:	27 96       	adiw	r28, 0x07	; 7
     424:	0f b6       	in	r0, 0x3f	; 63
     426:	f8 94       	cli
     428:	de bf       	out	0x3e, r29	; 62
     42a:	0f be       	out	0x3f, r0	; 63
     42c:	cd bf       	out	0x3d, r28	; 61
     42e:	df 91       	pop	r29
     430:	cf 91       	pop	r28
     432:	1f 91       	pop	r17
     434:	0f 91       	pop	r16
     436:	ff 90       	pop	r15
     438:	ef 90       	pop	r14
     43a:	df 90       	pop	r13
     43c:	bf 90       	pop	r11
     43e:	af 90       	pop	r10
     440:	08 95       	ret

00000442 <CALLBACK_HID_Device_ProcessHIDReport>:
void CALLBACK_HID_Device_ProcessHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                          const uint8_t ReportID,
                                          const uint8_t ReportType,
                                          const void* ReportData,
                                          const uint16_t ReportSize)
{
     442:	08 95       	ret

00000444 <Reset_Mega>:
}

//! Resets the ATMEGA chip
void Reset_Mega(){
	
	PORTD &= (0 << PIND7);
     444:	8b b1       	in	r24, 0x0b	; 11
     446:	1b b8       	out	0x0b, r1	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     448:	8f e3       	ldi	r24, 0x3F	; 63
     44a:	9c e9       	ldi	r25, 0x9C	; 156
     44c:	01 97       	sbiw	r24, 0x01	; 1
     44e:	f1 f7       	brne	.-4      	; 0x44c <Reset_Mega+0x8>
     450:	00 c0       	rjmp	.+0      	; 0x452 <Reset_Mega+0xe>
     452:	00 00       	nop
	_delay_ms(10);
	PORTD |= (1 << PIND7);
     454:	5f 9a       	sbi	0x0b, 7	; 11
     456:	08 95       	ret

00000458 <CDC_Device_USBSerialTask>:
//! Custom write function
void CDC_Device_USBSerialTask(USB_ClassInfo_CDC_Device_t* ptr){
	
	//! We check to see if its a Arduino signal (!!!)
	
	fread(_buff, sizeof(uint8_t), sizeof(_buff), &USBSerialStream);
     458:	20 e3       	ldi	r18, 0x30	; 48
     45a:	31 e0       	ldi	r19, 0x01	; 1
     45c:	43 e0       	ldi	r20, 0x03	; 3
     45e:	50 e0       	ldi	r21, 0x00	; 0
     460:	61 e0       	ldi	r22, 0x01	; 1
     462:	70 e0       	ldi	r23, 0x00	; 0
     464:	8c e4       	ldi	r24, 0x4C	; 76
     466:	91 e0       	ldi	r25, 0x01	; 1
     468:	0e 94 ae 0b 	call	0x175c	; 0x175c <fread>
	if(strcmp((char*)_buff, (char*)PATTERN) == 0){
     46c:	6b e2       	ldi	r22, 0x2B	; 43
     46e:	71 e0       	ldi	r23, 0x01	; 1
     470:	8c e4       	ldi	r24, 0x4C	; 76
     472:	91 e0       	ldi	r25, 0x01	; 1
     474:	0e 94 a5 0b 	call	0x174a	; 0x174a <strcmp>
     478:	89 2b       	or	r24, r25
     47a:	09 f4       	brne	.+2      	; 0x47e <CDC_Device_USBSerialTask+0x26>
		Reset_Mega();
     47c:	e3 df       	rcall	.-58     	; 0x444 <Reset_Mega>
	}
	Serial_SendData(_buff, sizeof(_buff));
     47e:	63 e0       	ldi	r22, 0x03	; 3
     480:	70 e0       	ldi	r23, 0x00	; 0
     482:	8c e4       	ldi	r24, 0x4C	; 76
     484:	91 e0       	ldi	r25, 0x01	; 1
     486:	ea ce       	rjmp	.-556    	; 0x25c <Serial_SendData>
     488:	08 95       	ret

0000048a <main>:
 */
int main(void)
{	
	
	//! Setup Hardware
	SetupHardware();
     48a:	ff de       	rcall	.-514    	; 0x28a <SetupHardware>
		 *
		 *  \param[out] Buffer  Pointer to a ring buffer structure to initialize
		 */
		static inline void RingBuffer_InitBuffer(RingBuff_t* const Buffer)
		{
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     48c:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     48e:	f8 94       	cli
			{
				Buffer->In  = Buffer->Buffer;
     490:	8f e4       	ldi	r24, 0x4F	; 79
     492:	91 e0       	ldi	r25, 0x01	; 1
     494:	90 93 4f 02 	sts	0x024F, r25
     498:	80 93 4e 02 	sts	0x024E, r24
				Buffer->Out = Buffer->Buffer;
     49c:	90 93 51 02 	sts	0x0251, r25
     4a0:	80 93 50 02 	sts	0x0250, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     4a4:	2f bf       	out	0x3f, r18	; 63
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     4a6:	78 94       	sei

	//! Enable the interrupt globally
    GlobalInterruptEnable();
	
	//! We create a Stream type
	CDC_Device_CreateStream(&VirtualSerial_CDC_Interface, &USBSerialStream);
     4a8:	60 e3       	ldi	r22, 0x30	; 48
     4aa:	71 e0       	ldi	r23, 0x01	; 1
     4ac:	80 e0       	ldi	r24, 0x00	; 0
     4ae:	91 e0       	ldi	r25, 0x01	; 1
     4b0:	23 d1       	rcall	.+582    	; 0x6f8 <CDC_Device_CreateStream>

	//! Our work thread
    for (;;) {
		
		//! HID Device Task
	    HID_Device_USBTask(&Joystick_HID_Interface);
     4b2:	8b e1       	ldi	r24, 0x1B	; 27
     4b4:	91 e0       	ldi	r25, 0x01	; 1
     4b6:	2b d3       	rcall	.+1622   	; 0xb0e <HID_Device_USBTask>
				
		//! CDC Device USB Task
		CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
     4b8:	80 e0       	ldi	r24, 0x00	; 0
     4ba:	91 e0       	ldi	r25, 0x01	; 1
     4bc:	c7 d0       	rcall	.+398    	; 0x64c <CDC_Device_USBTask>
		
		//! Serial task
		CDC_Device_USBSerialTask(&VirtualSerial_CDC_Interface);
     4be:	80 e0       	ldi	r24, 0x00	; 0
     4c0:	91 e0       	ldi	r25, 0x01	; 1
     4c2:	ca df       	rcall	.-108    	; 0x458 <CDC_Device_USBSerialTask>
		
		//! USB Task
	    USB_USBTask();
     4c4:	0e 94 67 0b 	call	0x16ce	; 0x16ce <USB_USBTask>
     4c8:	f4 cf       	rjmp	.-24     	; 0x4b2 <main+0x28>

000004ca <__vector_23>:

/** ISR to manage the reception of data from the serial port, placing received bytes into a circular buffer
 *  for later transmission to the host.
 */
ISR(USART1_RX_vect, ISR_BLOCK)
{
     4ca:	1f 92       	push	r1
     4cc:	0f 92       	push	r0
     4ce:	0f b6       	in	r0, 0x3f	; 63
     4d0:	0f 92       	push	r0
     4d2:	11 24       	eor	r1, r1
     4d4:	2f 93       	push	r18
     4d6:	8f 93       	push	r24
     4d8:	9f 93       	push	r25
     4da:	af 93       	push	r26
     4dc:	bf 93       	push	r27
     4de:	ef 93       	push	r30
     4e0:	ff 93       	push	r31
    uint8_t ReceivedByte = UDR1;
     4e2:	90 91 ce 00 	lds	r25, 0x00CE

    if ((USB_DeviceState == DEVICE_STATE_Configured)) {
     4e6:	80 91 57 02 	lds	r24, 0x0257
     4ea:	84 30       	cpi	r24, 0x04	; 4
     4ec:	d9 f4       	brne	.+54     	; 0x524 <__vector_23+0x5a>
		 *  \param[in]     Data    Data element to insert into the buffer
		 */
		static inline void RingBuffer_Insert(RingBuff_t* const Buffer,
		                                     const RingBuff_Data_t Data)
		{
			*Buffer->In = Data;
     4ee:	ee e4       	ldi	r30, 0x4E	; 78
     4f0:	f2 e0       	ldi	r31, 0x02	; 2
     4f2:	a0 81       	ld	r26, Z
     4f4:	b1 81       	ldd	r27, Z+1	; 0x01
     4f6:	9c 93       	st	X, r25
			
			if (++Buffer->In == &Buffer->Buffer[BUFFER_SIZE])
     4f8:	80 81       	ld	r24, Z
     4fa:	91 81       	ldd	r25, Z+1	; 0x01
     4fc:	01 96       	adiw	r24, 0x01	; 1
     4fe:	91 83       	std	Z+1, r25	; 0x01
     500:	80 83       	st	Z, r24
     502:	8e 17       	cp	r24, r30
     504:	9f 07       	cpc	r25, r31
     506:	31 f4       	brne	.+12     	; 0x514 <__vector_23+0x4a>
			  Buffer->In = Buffer->Buffer;
     508:	8f e4       	ldi	r24, 0x4F	; 79
     50a:	91 e0       	ldi	r25, 0x01	; 1
     50c:	90 93 4f 02 	sts	0x024F, r25
     510:	80 93 4e 02 	sts	0x024E, r24

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     514:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     516:	f8 94       	cli
			{
				Buffer->Count++;
     518:	e2 e5       	ldi	r30, 0x52	; 82
     51a:	f2 e0       	ldi	r31, 0x02	; 2
     51c:	90 81       	ld	r25, Z
     51e:	9f 5f       	subi	r25, 0xFF	; 255
     520:	90 83       	st	Z, r25
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     522:	8f bf       	out	0x3f, r24	; 63
		RingBuffer_Insert(&USARTtoUSB_Buffer, ReceivedByte);
    }
     524:	ff 91       	pop	r31
     526:	ef 91       	pop	r30
     528:	bf 91       	pop	r27
     52a:	af 91       	pop	r26
     52c:	9f 91       	pop	r25
     52e:	8f 91       	pop	r24
     530:	2f 91       	pop	r18
     532:	0f 90       	pop	r0
     534:	0f be       	out	0x3f, r0	; 63
     536:	0f 90       	pop	r0
     538:	1f 90       	pop	r1
     53a:	18 95       	reti

0000053c <CDC_Device_ConfigureEndpoints>:

void CDC_Device_CreateBlockingStream(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                                     FILE* const Stream)
{
	*Stream = (FILE)FDEV_SETUP_STREAM(CDC_Device_putchar, CDC_Device_getchar_Blocking, _FDEV_SETUP_RW);
	fdev_set_udata(Stream, CDCInterfaceInfo);
     53c:	cf 93       	push	r28
     53e:	df 93       	push	r29
     540:	ec 01       	movw	r28, r24
     542:	fc 01       	movw	r30, r24
     544:	70 96       	adiw	r30, 0x10	; 16
     546:	8b e0       	ldi	r24, 0x0B	; 11
     548:	df 01       	movw	r26, r30
     54a:	1d 92       	st	X+, r1
     54c:	8a 95       	dec	r24
     54e:	e9 f7       	brne	.-6      	; 0x54a <CDC_Device_ConfigureEndpoints+0xe>
     550:	82 e0       	ldi	r24, 0x02	; 2
     552:	8c 83       	std	Y+4, r24	; 0x04
     554:	89 87       	std	Y+9, r24	; 0x09
     556:	83 e0       	ldi	r24, 0x03	; 3
     558:	8e 87       	std	Y+14, r24	; 0x0e
     55a:	61 e0       	ldi	r22, 0x01	; 1
     55c:	ce 01       	movw	r24, r28
     55e:	01 96       	adiw	r24, 0x01	; 1
     560:	aa d5       	rcall	.+2900   	; 0x10b6 <Endpoint_ConfigureEndpointTable>
     562:	88 23       	and	r24, r24
     564:	51 f0       	breq	.+20     	; 0x57a <CDC_Device_ConfigureEndpoints+0x3e>
     566:	61 e0       	ldi	r22, 0x01	; 1
     568:	ce 01       	movw	r24, r28
     56a:	06 96       	adiw	r24, 0x06	; 6
     56c:	a4 d5       	rcall	.+2888   	; 0x10b6 <Endpoint_ConfigureEndpointTable>
     56e:	88 23       	and	r24, r24
     570:	21 f0       	breq	.+8      	; 0x57a <CDC_Device_ConfigureEndpoints+0x3e>
     572:	61 e0       	ldi	r22, 0x01	; 1
     574:	ce 01       	movw	r24, r28
     576:	0b 96       	adiw	r24, 0x0b	; 11
     578:	9e d5       	rcall	.+2876   	; 0x10b6 <Endpoint_ConfigureEndpointTable>
     57a:	df 91       	pop	r29
     57c:	cf 91       	pop	r28
     57e:	08 95       	ret

00000580 <CDC_Device_SendByte>:
     580:	cf 93       	push	r28
     582:	c6 2f       	mov	r28, r22
     584:	20 91 57 02 	lds	r18, 0x0257
     588:	24 30       	cpi	r18, 0x04	; 4
     58a:	e9 f4       	brne	.+58     	; 0x5c6 <CDC_Device_SendByte+0x46>
     58c:	fc 01       	movw	r30, r24
     58e:	44 89       	ldd	r20, Z+20	; 0x14
     590:	55 89       	ldd	r21, Z+21	; 0x15
     592:	66 89       	ldd	r22, Z+22	; 0x16
     594:	77 89       	ldd	r23, Z+23	; 0x17
     596:	45 2b       	or	r20, r21
     598:	46 2b       	or	r20, r22
     59a:	47 2b       	or	r20, r23
     59c:	b1 f0       	breq	.+44     	; 0x5ca <CDC_Device_SendByte+0x4a>
     59e:	81 81       	ldd	r24, Z+1	; 0x01
     5a0:	8f 70       	andi	r24, 0x0F	; 15
     5a2:	80 93 e9 00 	sts	0x00E9, r24
     5a6:	80 91 e8 00 	lds	r24, 0x00E8
     5aa:	85 fd       	sbrc	r24, 5
     5ac:	08 c0       	rjmp	.+16     	; 0x5be <CDC_Device_SendByte+0x3e>
     5ae:	e8 ee       	ldi	r30, 0xE8	; 232
     5b0:	f0 e0       	ldi	r31, 0x00	; 0
     5b2:	80 81       	ld	r24, Z
     5b4:	8e 77       	andi	r24, 0x7E	; 126
     5b6:	80 83       	st	Z, r24
     5b8:	ff d5       	rcall	.+3070   	; 0x11b8 <Endpoint_WaitUntilReady>
     5ba:	81 11       	cpse	r24, r1
     5bc:	07 c0       	rjmp	.+14     	; 0x5cc <CDC_Device_SendByte+0x4c>
     5be:	c0 93 f1 00 	sts	0x00F1, r28
     5c2:	80 e0       	ldi	r24, 0x00	; 0
     5c4:	03 c0       	rjmp	.+6      	; 0x5cc <CDC_Device_SendByte+0x4c>
     5c6:	82 e0       	ldi	r24, 0x02	; 2
     5c8:	01 c0       	rjmp	.+2      	; 0x5cc <CDC_Device_SendByte+0x4c>
     5ca:	82 e0       	ldi	r24, 0x02	; 2
     5cc:	cf 91       	pop	r28
     5ce:	08 95       	ret

000005d0 <CDC_Device_putchar>:
     5d0:	fb 01       	movw	r30, r22
     5d2:	68 2f       	mov	r22, r24
     5d4:	84 85       	ldd	r24, Z+12	; 0x0c
     5d6:	95 85       	ldd	r25, Z+13	; 0x0d
     5d8:	d3 df       	rcall	.-90     	; 0x580 <CDC_Device_SendByte>
     5da:	21 e0       	ldi	r18, 0x01	; 1
     5dc:	30 e0       	ldi	r19, 0x00	; 0
     5de:	81 11       	cpse	r24, r1
     5e0:	02 c0       	rjmp	.+4      	; 0x5e6 <CDC_Device_putchar+0x16>
     5e2:	20 e0       	ldi	r18, 0x00	; 0
     5e4:	30 e0       	ldi	r19, 0x00	; 0
     5e6:	88 27       	eor	r24, r24
     5e8:	99 27       	eor	r25, r25
     5ea:	82 1b       	sub	r24, r18
     5ec:	93 0b       	sbc	r25, r19
     5ee:	08 95       	ret

000005f0 <CDC_Device_Flush>:
     5f0:	20 91 57 02 	lds	r18, 0x0257
     5f4:	24 30       	cpi	r18, 0x04	; 4
     5f6:	11 f5       	brne	.+68     	; 0x63c <CDC_Device_Flush+0x4c>
     5f8:	fc 01       	movw	r30, r24
     5fa:	44 89       	ldd	r20, Z+20	; 0x14
     5fc:	55 89       	ldd	r21, Z+21	; 0x15
     5fe:	66 89       	ldd	r22, Z+22	; 0x16
     600:	77 89       	ldd	r23, Z+23	; 0x17
     602:	45 2b       	or	r20, r21
     604:	46 2b       	or	r20, r22
     606:	47 2b       	or	r20, r23
     608:	d9 f0       	breq	.+54     	; 0x640 <CDC_Device_Flush+0x50>
     60a:	81 81       	ldd	r24, Z+1	; 0x01
     60c:	8f 70       	andi	r24, 0x0F	; 15
     60e:	80 93 e9 00 	sts	0x00E9, r24
     612:	80 91 f2 00 	lds	r24, 0x00F2
     616:	88 23       	and	r24, r24
     618:	a9 f0       	breq	.+42     	; 0x644 <CDC_Device_Flush+0x54>
     61a:	e8 ee       	ldi	r30, 0xE8	; 232
     61c:	f0 e0       	ldi	r31, 0x00	; 0
     61e:	80 81       	ld	r24, Z
     620:	90 81       	ld	r25, Z
     622:	9e 77       	andi	r25, 0x7E	; 126
     624:	90 83       	st	Z, r25
     626:	85 fd       	sbrc	r24, 5
     628:	0f c0       	rjmp	.+30     	; 0x648 <CDC_Device_Flush+0x58>
     62a:	c6 d5       	rcall	.+2956   	; 0x11b8 <Endpoint_WaitUntilReady>
     62c:	81 11       	cpse	r24, r1
     62e:	0d c0       	rjmp	.+26     	; 0x64a <CDC_Device_Flush+0x5a>
     630:	e8 ee       	ldi	r30, 0xE8	; 232
     632:	f0 e0       	ldi	r31, 0x00	; 0
     634:	90 81       	ld	r25, Z
     636:	9e 77       	andi	r25, 0x7E	; 126
     638:	90 83       	st	Z, r25
     63a:	08 95       	ret
     63c:	82 e0       	ldi	r24, 0x02	; 2
     63e:	08 95       	ret
     640:	82 e0       	ldi	r24, 0x02	; 2
     642:	08 95       	ret
     644:	80 e0       	ldi	r24, 0x00	; 0
     646:	08 95       	ret
     648:	80 e0       	ldi	r24, 0x00	; 0
     64a:	08 95       	ret

0000064c <CDC_Device_USBTask>:
     64c:	20 91 57 02 	lds	r18, 0x0257
     650:	24 30       	cpi	r18, 0x04	; 4
     652:	89 f4       	brne	.+34     	; 0x676 <CDC_Device_USBTask+0x2a>
     654:	fc 01       	movw	r30, r24
     656:	44 89       	ldd	r20, Z+20	; 0x14
     658:	55 89       	ldd	r21, Z+21	; 0x15
     65a:	66 89       	ldd	r22, Z+22	; 0x16
     65c:	77 89       	ldd	r23, Z+23	; 0x17
     65e:	45 2b       	or	r20, r21
     660:	46 2b       	or	r20, r22
     662:	47 2b       	or	r20, r23
     664:	41 f0       	breq	.+16     	; 0x676 <CDC_Device_USBTask+0x2a>
     666:	21 81       	ldd	r18, Z+1	; 0x01
     668:	2f 70       	andi	r18, 0x0F	; 15
     66a:	20 93 e9 00 	sts	0x00E9, r18
     66e:	20 91 e8 00 	lds	r18, 0x00E8
     672:	20 fd       	sbrc	r18, 0
     674:	bd cf       	rjmp	.-134    	; 0x5f0 <CDC_Device_Flush>
     676:	08 95       	ret

00000678 <CDC_Device_ReceiveByte>:
     678:	20 91 57 02 	lds	r18, 0x0257
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	39 f5       	brne	.+78     	; 0x6ce <CDC_Device_ReceiveByte+0x56>
     680:	fc 01       	movw	r30, r24
     682:	44 89       	ldd	r20, Z+20	; 0x14
     684:	55 89       	ldd	r21, Z+21	; 0x15
     686:	66 89       	ldd	r22, Z+22	; 0x16
     688:	77 89       	ldd	r23, Z+23	; 0x17
     68a:	45 2b       	or	r20, r21
     68c:	46 2b       	or	r20, r22
     68e:	47 2b       	or	r20, r23
     690:	09 f1       	breq	.+66     	; 0x6d4 <CDC_Device_ReceiveByte+0x5c>
     692:	86 81       	ldd	r24, Z+6	; 0x06
     694:	8f 70       	andi	r24, 0x0F	; 15
     696:	80 93 e9 00 	sts	0x00E9, r24
     69a:	80 91 e8 00 	lds	r24, 0x00E8
     69e:	82 ff       	sbrs	r24, 2
     6a0:	1c c0       	rjmp	.+56     	; 0x6da <CDC_Device_ReceiveByte+0x62>
     6a2:	80 91 f2 00 	lds	r24, 0x00F2
     6a6:	88 23       	and	r24, r24
     6a8:	21 f0       	breq	.+8      	; 0x6b2 <CDC_Device_ReceiveByte+0x3a>
     6aa:	20 91 f1 00 	lds	r18, 0x00F1
     6ae:	30 e0       	ldi	r19, 0x00	; 0
     6b0:	02 c0       	rjmp	.+4      	; 0x6b6 <CDC_Device_ReceiveByte+0x3e>
     6b2:	2f ef       	ldi	r18, 0xFF	; 255
     6b4:	3f ef       	ldi	r19, 0xFF	; 255
     6b6:	80 91 f2 00 	lds	r24, 0x00F2
     6ba:	81 11       	cpse	r24, r1
     6bc:	11 c0       	rjmp	.+34     	; 0x6e0 <CDC_Device_ReceiveByte+0x68>
     6be:	e8 ee       	ldi	r30, 0xE8	; 232
     6c0:	f0 e0       	ldi	r31, 0x00	; 0
     6c2:	80 81       	ld	r24, Z
     6c4:	8b 77       	andi	r24, 0x7B	; 123
     6c6:	80 83       	st	Z, r24
     6c8:	82 2f       	mov	r24, r18
     6ca:	93 2f       	mov	r25, r19
     6cc:	08 95       	ret
     6ce:	8f ef       	ldi	r24, 0xFF	; 255
     6d0:	9f ef       	ldi	r25, 0xFF	; 255
     6d2:	08 95       	ret
     6d4:	8f ef       	ldi	r24, 0xFF	; 255
     6d6:	9f ef       	ldi	r25, 0xFF	; 255
     6d8:	08 95       	ret
     6da:	8f ef       	ldi	r24, 0xFF	; 255
     6dc:	9f ef       	ldi	r25, 0xFF	; 255
     6de:	08 95       	ret
     6e0:	82 2f       	mov	r24, r18
     6e2:	93 2f       	mov	r25, r19
     6e4:	08 95       	ret

000006e6 <CDC_Device_getchar>:
     6e6:	fc 01       	movw	r30, r24
     6e8:	84 85       	ldd	r24, Z+12	; 0x0c
     6ea:	95 85       	ldd	r25, Z+13	; 0x0d
     6ec:	c5 df       	rcall	.-118    	; 0x678 <CDC_Device_ReceiveByte>
     6ee:	99 23       	and	r25, r25
     6f0:	14 f4       	brge	.+4      	; 0x6f6 <CDC_Device_getchar+0x10>
     6f2:	8e ef       	ldi	r24, 0xFE	; 254
     6f4:	9f ef       	ldi	r25, 0xFF	; 255
     6f6:	08 95       	ret

000006f8 <CDC_Device_CreateStream>:
     6f8:	fb 01       	movw	r30, r22
     6fa:	2e e0       	ldi	r18, 0x0E	; 14
     6fc:	db 01       	movw	r26, r22
     6fe:	1d 92       	st	X+, r1
     700:	2a 95       	dec	r18
     702:	e9 f7       	brne	.-6      	; 0x6fe <CDC_Device_CreateStream+0x6>
     704:	23 e0       	ldi	r18, 0x03	; 3
     706:	23 83       	std	Z+3, r18	; 0x03
     708:	28 ee       	ldi	r18, 0xE8	; 232
     70a:	32 e0       	ldi	r19, 0x02	; 2
     70c:	31 87       	std	Z+9, r19	; 0x09
     70e:	20 87       	std	Z+8, r18	; 0x08
     710:	23 e7       	ldi	r18, 0x73	; 115
     712:	33 e0       	ldi	r19, 0x03	; 3
     714:	33 87       	std	Z+11, r19	; 0x0b
     716:	22 87       	std	Z+10, r18	; 0x0a
     718:	95 87       	std	Z+13, r25	; 0x0d
     71a:	84 87       	std	Z+12, r24	; 0x0c
     71c:	08 95       	ret

0000071e <CDC_Device_Event_Stub>:
	return ReceivedByte;
}
#endif

void CDC_Device_Event_Stub(void)
{
     71e:	08 95       	ret

00000720 <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     720:	cf 93       	push	r28
     722:	df 93       	push	r29
     724:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     726:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
     72a:	83 ff       	sbrs	r24, 3
     72c:	95 c0       	rjmp	.+298    	; 0x858 <CDC_Device_ProcessControlRequest+0x138>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
     72e:	88 81       	ld	r24, Y
     730:	90 e0       	ldi	r25, 0x00	; 0
     732:	20 91 5c 02 	lds	r18, 0x025C
     736:	30 91 5d 02 	lds	r19, 0x025D
     73a:	28 17       	cp	r18, r24
     73c:	39 07       	cpc	r19, r25
     73e:	09 f0       	breq	.+2      	; 0x742 <CDC_Device_ProcessControlRequest+0x22>
     740:	8b c0       	rjmp	.+278    	; 0x858 <CDC_Device_ProcessControlRequest+0x138>
	  return;

	switch (USB_ControlRequest.bRequest)
     742:	80 91 59 02 	lds	r24, 0x0259
     746:	81 32       	cpi	r24, 0x21	; 33
     748:	59 f0       	breq	.+22     	; 0x760 <CDC_Device_ProcessControlRequest+0x40>
     74a:	18 f4       	brcc	.+6      	; 0x752 <CDC_Device_ProcessControlRequest+0x32>
     74c:	80 32       	cpi	r24, 0x20	; 32
     74e:	b9 f1       	breq	.+110    	; 0x7be <CDC_Device_ProcessControlRequest+0x9e>
     750:	83 c0       	rjmp	.+262    	; 0x858 <CDC_Device_ProcessControlRequest+0x138>
     752:	82 32       	cpi	r24, 0x22	; 34
     754:	09 f4       	brne	.+2      	; 0x758 <CDC_Device_ProcessControlRequest+0x38>
     756:	5f c0       	rjmp	.+190    	; 0x816 <CDC_Device_ProcessControlRequest+0xf6>
     758:	83 32       	cpi	r24, 0x23	; 35
     75a:	09 f4       	brne	.+2      	; 0x75e <CDC_Device_ProcessControlRequest+0x3e>
     75c:	6f c0       	rjmp	.+222    	; 0x83c <CDC_Device_ProcessControlRequest+0x11c>
     75e:	7c c0       	rjmp	.+248    	; 0x858 <CDC_Device_ProcessControlRequest+0x138>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     760:	80 91 58 02 	lds	r24, 0x0258
     764:	81 3a       	cpi	r24, 0xA1	; 161
     766:	09 f0       	breq	.+2      	; 0x76a <CDC_Device_ProcessControlRequest+0x4a>
     768:	77 c0       	rjmp	.+238    	; 0x858 <CDC_Device_ProcessControlRequest+0x138>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     76a:	e8 ee       	ldi	r30, 0xE8	; 232
     76c:	f0 e0       	ldi	r31, 0x00	; 0
     76e:	80 81       	ld	r24, Z
     770:	87 7f       	andi	r24, 0xF7	; 247
     772:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     774:	80 81       	ld	r24, Z
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
     776:	80 ff       	sbrs	r24, 0
     778:	fd cf       	rjmp	.-6      	; 0x774 <CDC_Device_ProcessControlRequest+0x54>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
     77a:	4c 89       	ldd	r20, Y+20	; 0x14
     77c:	5d 89       	ldd	r21, Y+21	; 0x15
     77e:	6e 89       	ldd	r22, Y+22	; 0x16
     780:	7f 89       	ldd	r23, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
     782:	e1 ef       	ldi	r30, 0xF1	; 241
     784:	f0 e0       	ldi	r31, 0x00	; 0
     786:	40 83       	st	Z, r20
				UEDATX = (Data >> 8);
     788:	bb 27       	eor	r27, r27
     78a:	a7 2f       	mov	r26, r23
     78c:	96 2f       	mov	r25, r22
     78e:	85 2f       	mov	r24, r21
     790:	80 83       	st	Z, r24
				UEDATX = (Data >> 16);
     792:	cb 01       	movw	r24, r22
     794:	aa 27       	eor	r26, r26
     796:	bb 27       	eor	r27, r27
     798:	80 83       	st	Z, r24
				UEDATX = (Data >> 24);
     79a:	47 2f       	mov	r20, r23
     79c:	55 27       	eor	r21, r21
     79e:	66 27       	eor	r22, r22
     7a0:	77 27       	eor	r23, r23
     7a2:	40 83       	st	Z, r20
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
     7a4:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     7a6:	80 83       	st	Z, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
     7a8:	89 8d       	ldd	r24, Y+25	; 0x19
     7aa:	80 83       	st	Z, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
     7ac:	8a 8d       	ldd	r24, Y+26	; 0x1a
     7ae:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     7b0:	e8 ee       	ldi	r30, 0xE8	; 232
     7b2:	f0 e0       	ldi	r31, 0x00	; 0
     7b4:	80 81       	ld	r24, Z
     7b6:	8e 77       	andi	r24, 0x7E	; 126
     7b8:	80 83       	st	Z, r24

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     7ba:	da d4       	rcall	.+2484   	; 0x1170 <Endpoint_ClearStatusStage>
     7bc:	4d c0       	rjmp	.+154    	; 0x858 <CDC_Device_ProcessControlRequest+0x138>
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     7be:	80 91 58 02 	lds	r24, 0x0258
     7c2:	81 32       	cpi	r24, 0x21	; 33
     7c4:	09 f0       	breq	.+2      	; 0x7c8 <CDC_Device_ProcessControlRequest+0xa8>
     7c6:	48 c0       	rjmp	.+144    	; 0x858 <CDC_Device_ProcessControlRequest+0x138>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     7c8:	e8 ee       	ldi	r30, 0xE8	; 232
     7ca:	f0 e0       	ldi	r31, 0x00	; 0
     7cc:	80 81       	ld	r24, Z
     7ce:	87 7f       	andi	r24, 0xF7	; 247
     7d0:	80 83       	st	Z, r24
     7d2:	05 c0       	rjmp	.+10     	; 0x7de <CDC_Device_ProcessControlRequest+0xbe>
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
     7d4:	80 91 57 02 	lds	r24, 0x0257
     7d8:	88 23       	and	r24, r24
     7da:	09 f4       	brne	.+2      	; 0x7de <CDC_Device_ProcessControlRequest+0xbe>
     7dc:	3d c0       	rjmp	.+122    	; 0x858 <CDC_Device_ProcessControlRequest+0x138>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     7de:	80 81       	ld	r24, Z
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
     7e0:	82 ff       	sbrs	r24, 2
     7e2:	f8 cf       	rjmp	.-16     	; 0x7d4 <CDC_Device_ProcessControlRequest+0xb4>
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
     7e4:	e1 ef       	ldi	r30, 0xF1	; 241
     7e6:	f0 e0       	ldi	r31, 0x00	; 0
     7e8:	30 81       	ld	r19, Z
				Data.Bytes[1] = UEDATX;
     7ea:	20 81       	ld	r18, Z
				Data.Bytes[2] = UEDATX;
     7ec:	90 81       	ld	r25, Z
				Data.Bytes[3] = UEDATX;
     7ee:	80 81       	ld	r24, Z
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
     7f0:	3c 8b       	std	Y+20, r19	; 0x14
     7f2:	2d 8b       	std	Y+21, r18	; 0x15
     7f4:	9e 8b       	std	Y+22, r25	; 0x16
     7f6:	8f 8b       	std	Y+23, r24	; 0x17
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     7f8:	80 81       	ld	r24, Z
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
     7fa:	88 8f       	std	Y+24, r24	; 0x18
     7fc:	80 81       	ld	r24, Z
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
     7fe:	89 8f       	std	Y+25, r24	; 0x19
     800:	80 81       	ld	r24, Z
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
     802:	8a 8f       	std	Y+26, r24	; 0x1a
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     804:	e8 ee       	ldi	r30, 0xE8	; 232
     806:	f0 e0       	ldi	r31, 0x00	; 0
     808:	80 81       	ld	r24, Z
     80a:	8b 77       	andi	r24, 0x7B	; 123
     80c:	80 83       	st	Z, r24

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
     80e:	b0 d4       	rcall	.+2400   	; 0x1170 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
     810:	ce 01       	movw	r24, r28
     812:	85 df       	rcall	.-246    	; 0x71e <CDC_Device_Event_Stub>
     814:	21 c0       	rjmp	.+66     	; 0x858 <CDC_Device_ProcessControlRequest+0x138>
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     816:	80 91 58 02 	lds	r24, 0x0258
     81a:	81 32       	cpi	r24, 0x21	; 33
     81c:	e9 f4       	brne	.+58     	; 0x858 <CDC_Device_ProcessControlRequest+0x138>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     81e:	e8 ee       	ldi	r30, 0xE8	; 232
     820:	f0 e0       	ldi	r31, 0x00	; 0
     822:	80 81       	ld	r24, Z
     824:	87 7f       	andi	r24, 0xF7	; 247
     826:	80 83       	st	Z, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     828:	a3 d4       	rcall	.+2374   	; 0x1170 <Endpoint_ClearStatusStage>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
     82a:	80 91 5a 02 	lds	r24, 0x025A
     82e:	90 91 5b 02 	lds	r25, 0x025B
     832:	99 8b       	std	Y+17, r25	; 0x11
     834:	88 8b       	std	Y+16, r24	; 0x10

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
     836:	ce 01       	movw	r24, r28
     838:	72 df       	rcall	.-284    	; 0x71e <CDC_Device_Event_Stub>
     83a:	0e c0       	rjmp	.+28     	; 0x858 <CDC_Device_ProcessControlRequest+0x138>
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     83c:	80 91 58 02 	lds	r24, 0x0258
     840:	81 32       	cpi	r24, 0x21	; 33
     842:	51 f4       	brne	.+20     	; 0x858 <CDC_Device_ProcessControlRequest+0x138>
     844:	e8 ee       	ldi	r30, 0xE8	; 232
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	80 81       	ld	r24, Z
     84a:	87 7f       	andi	r24, 0xF7	; 247
     84c:	80 83       	st	Z, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     84e:	90 d4       	rcall	.+2336   	; 0x1170 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
     850:	60 91 5a 02 	lds	r22, 0x025A
     854:	ce 01       	movw	r24, r28
     856:	63 df       	rcall	.-314    	; 0x71e <CDC_Device_Event_Stub>
			}

			break;
	}
}
     858:	df 91       	pop	r29
     85a:	cf 91       	pop	r28
     85c:	08 95       	ret

0000085e <HID_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
     85e:	3f 92       	push	r3
     860:	4f 92       	push	r4
     862:	5f 92       	push	r5
     864:	6f 92       	push	r6
     866:	7f 92       	push	r7
     868:	8f 92       	push	r8
     86a:	9f 92       	push	r9
     86c:	af 92       	push	r10
     86e:	bf 92       	push	r11
     870:	cf 92       	push	r12
     872:	df 92       	push	r13
     874:	ef 92       	push	r14
     876:	ff 92       	push	r15
     878:	0f 93       	push	r16
     87a:	1f 93       	push	r17
     87c:	cf 93       	push	r28
     87e:	df 93       	push	r29
     880:	00 d0       	rcall	.+0      	; 0x882 <HID_Device_ProcessControlRequest+0x24>
     882:	1f 92       	push	r1
     884:	cd b7       	in	r28, 0x3d	; 61
     886:	de b7       	in	r29, 0x3e	; 62
     888:	6c 01       	movw	r12, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
     88a:	ed b6       	in	r14, 0x3d	; 61
     88c:	fe b6       	in	r15, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     88e:	80 91 e8 00 	lds	r24, 0x00E8
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
     892:	83 ff       	sbrs	r24, 3
     894:	0e c1       	rjmp	.+540    	; 0xab2 <HID_Device_ProcessControlRequest+0x254>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
     896:	f6 01       	movw	r30, r12
     898:	80 81       	ld	r24, Z
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	20 91 5c 02 	lds	r18, 0x025C
     8a0:	30 91 5d 02 	lds	r19, 0x025D
     8a4:	28 17       	cp	r18, r24
     8a6:	39 07       	cpc	r19, r25
     8a8:	09 f0       	breq	.+2      	; 0x8ac <HID_Device_ProcessControlRequest+0x4e>
     8aa:	03 c1       	rjmp	.+518    	; 0xab2 <HID_Device_ProcessControlRequest+0x254>
	  return;

	switch (USB_ControlRequest.bRequest)
     8ac:	80 91 59 02 	lds	r24, 0x0259
     8b0:	83 30       	cpi	r24, 0x03	; 3
     8b2:	09 f4       	brne	.+2      	; 0x8b6 <HID_Device_ProcessControlRequest+0x58>
     8b4:	9b c0       	rjmp	.+310    	; 0x9ec <HID_Device_ProcessControlRequest+0x18e>
     8b6:	30 f4       	brcc	.+12     	; 0x8c4 <HID_Device_ProcessControlRequest+0x66>
     8b8:	81 30       	cpi	r24, 0x01	; 1
     8ba:	71 f0       	breq	.+28     	; 0x8d8 <HID_Device_ProcessControlRequest+0x7a>
     8bc:	82 30       	cpi	r24, 0x02	; 2
     8be:	09 f4       	brne	.+2      	; 0x8c2 <HID_Device_ProcessControlRequest+0x64>
     8c0:	dd c0       	rjmp	.+442    	; 0xa7c <HID_Device_ProcessControlRequest+0x21e>
     8c2:	f7 c0       	rjmp	.+494    	; 0xab2 <HID_Device_ProcessControlRequest+0x254>
     8c4:	8a 30       	cpi	r24, 0x0A	; 10
     8c6:	09 f4       	brne	.+2      	; 0x8ca <HID_Device_ProcessControlRequest+0x6c>
     8c8:	bd c0       	rjmp	.+378    	; 0xa44 <HID_Device_ProcessControlRequest+0x1e6>
     8ca:	8b 30       	cpi	r24, 0x0B	; 11
     8cc:	09 f4       	brne	.+2      	; 0x8d0 <HID_Device_ProcessControlRequest+0x72>
     8ce:	a6 c0       	rjmp	.+332    	; 0xa1c <HID_Device_ProcessControlRequest+0x1be>
     8d0:	89 30       	cpi	r24, 0x09	; 9
     8d2:	09 f0       	breq	.+2      	; 0x8d6 <HID_Device_ProcessControlRequest+0x78>
     8d4:	ee c0       	rjmp	.+476    	; 0xab2 <HID_Device_ProcessControlRequest+0x254>
     8d6:	4c c0       	rjmp	.+152    	; 0x970 <HID_Device_ProcessControlRequest+0x112>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     8d8:	80 91 58 02 	lds	r24, 0x0258
     8dc:	81 3a       	cpi	r24, 0xA1	; 161
     8de:	09 f0       	breq	.+2      	; 0x8e2 <HID_Device_ProcessControlRequest+0x84>
     8e0:	e8 c0       	rjmp	.+464    	; 0xab2 <HID_Device_ProcessControlRequest+0x254>
     8e2:	8d b6       	in	r8, 0x3d	; 61
     8e4:	9e b6       	in	r9, 0x3e	; 62
			{
				uint16_t ReportSize = 0;
     8e6:	1a 82       	std	Y+2, r1	; 0x02
     8e8:	19 82       	std	Y+1, r1	; 0x01
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
     8ea:	ea e5       	ldi	r30, 0x5A	; 90
     8ec:	f2 e0       	ldi	r31, 0x02	; 2
     8ee:	80 81       	ld	r24, Z
     8f0:	11 81       	ldd	r17, Z+1	; 0x01
     8f2:	8b 83       	std	Y+3, r24	; 0x03
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
     8f4:	f6 01       	movw	r30, r12
     8f6:	40 85       	ldd	r20, Z+8	; 0x08
     8f8:	50 e0       	ldi	r21, 0x00	; 0
     8fa:	8d b7       	in	r24, 0x3d	; 61
     8fc:	9e b7       	in	r25, 0x3e	; 62
     8fe:	84 1b       	sub	r24, r20
     900:	95 0b       	sbc	r25, r21
     902:	0f b6       	in	r0, 0x3f	; 63
     904:	f8 94       	cli
     906:	9e bf       	out	0x3e, r25	; 62
     908:	0f be       	out	0x3f, r0	; 63
     90a:	8d bf       	out	0x3d, r24	; 61
     90c:	ed b7       	in	r30, 0x3d	; 61
     90e:	fe b7       	in	r31, 0x3e	; 62
     910:	31 96       	adiw	r30, 0x01	; 1
     912:	5f 01       	movw	r10, r30

				memset(ReportData, 0, sizeof(ReportData));
     914:	60 e0       	ldi	r22, 0x00	; 0
     916:	70 e0       	ldi	r23, 0x00	; 0
     918:	cf 01       	movw	r24, r30
     91a:	10 d7       	rcall	.+3616   	; 0x173c <memset>
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = 0;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
     91c:	4f ef       	ldi	r20, 0xFF	; 255
     91e:	41 0f       	add	r20, r17
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];

				memset(ReportData, 0, sizeof(ReportData));

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
     920:	8e 01       	movw	r16, r28
     922:	0f 5f       	subi	r16, 0xFF	; 255
     924:	1f 4f       	sbci	r17, 0xFF	; 255
     926:	95 01       	movw	r18, r10
     928:	be 01       	movw	r22, r28
     92a:	6d 5f       	subi	r22, 0xFD	; 253
     92c:	7f 4f       	sbci	r23, 0xFF	; 255
     92e:	c6 01       	movw	r24, r12
     930:	f4 dc       	rcall	.-1560   	; 0x31a <CALLBACK_HID_Device_CreateHIDReport>

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
     932:	f6 01       	movw	r30, r12
     934:	86 81       	ldd	r24, Z+6	; 0x06
     936:	97 81       	ldd	r25, Z+7	; 0x07
     938:	00 97       	sbiw	r24, 0x00	; 0
     93a:	21 f0       	breq	.+8      	; 0x944 <HID_Device_ProcessControlRequest+0xe6>
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
     93c:	40 85       	ldd	r20, Z+8	; 0x08
     93e:	50 e0       	ldi	r21, 0x00	; 0
     940:	b5 01       	movw	r22, r10
     942:	f3 d6       	rcall	.+3558   	; 0x172a <memcpy>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     944:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     948:	08 ee       	ldi	r16, 0xE8	; 232
     94a:	10 e0       	ldi	r17, 0x00	; 0
     94c:	f8 01       	movw	r30, r16
     94e:	80 81       	ld	r24, Z
     950:	87 7f       	andi	r24, 0xF7	; 247
     952:	80 83       	st	Z, r24
				}

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();
				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
     954:	69 81       	ldd	r22, Y+1	; 0x01
     956:	7a 81       	ldd	r23, Y+2	; 0x02
     958:	c5 01       	movw	r24, r10
     95a:	f3 d1       	rcall	.+998    	; 0xd42 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     95c:	f8 01       	movw	r30, r16
     95e:	80 81       	ld	r24, Z
     960:	8b 77       	andi	r24, 0x7B	; 123
     962:	80 83       	st	Z, r24
     964:	0f b6       	in	r0, 0x3f	; 63
     966:	f8 94       	cli
     968:	9e be       	out	0x3e, r9	; 62
     96a:	0f be       	out	0x3f, r0	; 63
     96c:	8d be       	out	0x3d, r8	; 61
     96e:	a1 c0       	rjmp	.+322    	; 0xab2 <HID_Device_ProcessControlRequest+0x254>
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     970:	80 91 58 02 	lds	r24, 0x0258
     974:	81 32       	cpi	r24, 0x21	; 33
     976:	09 f0       	breq	.+2      	; 0x97a <HID_Device_ProcessControlRequest+0x11c>
     978:	9c c0       	rjmp	.+312    	; 0xab2 <HID_Device_ProcessControlRequest+0x254>
     97a:	6d b6       	in	r6, 0x3d	; 61
     97c:	7e b6       	in	r7, 0x3e	; 62
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
     97e:	a0 90 5e 02 	lds	r10, 0x025E
     982:	b0 90 5f 02 	lds	r11, 0x025F
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
     986:	ea e5       	ldi	r30, 0x5A	; 90
     988:	f2 e0       	ldi	r31, 0x02	; 2
     98a:	50 80       	ld	r5, Z
     98c:	41 80       	ldd	r4, Z+1	; 0x01
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
     98e:	8d b7       	in	r24, 0x3d	; 61
     990:	9e b7       	in	r25, 0x3e	; 62
     992:	8a 19       	sub	r24, r10
     994:	9b 09       	sbc	r25, r11
     996:	0f b6       	in	r0, 0x3f	; 63
     998:	f8 94       	cli
     99a:	9e bf       	out	0x3e, r25	; 62
     99c:	0f be       	out	0x3f, r0	; 63
     99e:	8d bf       	out	0x3d, r24	; 61
     9a0:	ed b7       	in	r30, 0x3d	; 61
     9a2:	fe b7       	in	r31, 0x3e	; 62
     9a4:	31 96       	adiw	r30, 0x01	; 1
     9a6:	4f 01       	movw	r8, r30
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     9a8:	08 ee       	ldi	r16, 0xE8	; 232
     9aa:	10 e0       	ldi	r17, 0x00	; 0
     9ac:	f8 01       	movw	r30, r16
     9ae:	80 81       	ld	r24, Z
     9b0:	87 7f       	andi	r24, 0xF7	; 247
     9b2:	80 83       	st	Z, r24

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
     9b4:	b5 01       	movw	r22, r10
     9b6:	c4 01       	movw	r24, r8
     9b8:	38 d2       	rcall	.+1136   	; 0xe2a <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     9ba:	f8 01       	movw	r30, r16
     9bc:	80 81       	ld	r24, Z
     9be:	8e 77       	andi	r24, 0x7E	; 126
     9c0:	80 83       	st	Z, r24
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
     9c2:	21 e0       	ldi	r18, 0x01	; 1
     9c4:	51 10       	cpse	r5, r1
     9c6:	01 c0       	rjmp	.+2      	; 0x9ca <HID_Device_ProcessControlRequest+0x16c>
     9c8:	20 e0       	ldi	r18, 0x00	; 0
     9ca:	30 e0       	ldi	r19, 0x00	; 0
     9cc:	85 01       	movw	r16, r10
     9ce:	02 1b       	sub	r16, r18
     9d0:	13 0b       	sbc	r17, r19
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
     9d2:	28 0d       	add	r18, r8
     9d4:	39 1d       	adc	r19, r9
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
     9d6:	4f ef       	ldi	r20, 0xFF	; 255
     9d8:	44 0d       	add	r20, r4

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
     9da:	65 2d       	mov	r22, r5
     9dc:	c6 01       	movw	r24, r12
     9de:	31 dd       	rcall	.-1438   	; 0x442 <CALLBACK_HID_Device_ProcessHIDReport>
     9e0:	0f b6       	in	r0, 0x3f	; 63
     9e2:	f8 94       	cli
     9e4:	7e be       	out	0x3e, r7	; 62
     9e6:	0f be       	out	0x3f, r0	; 63
     9e8:	6d be       	out	0x3d, r6	; 61
     9ea:	63 c0       	rjmp	.+198    	; 0xab2 <HID_Device_ProcessControlRequest+0x254>
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     9ec:	80 91 58 02 	lds	r24, 0x0258
     9f0:	81 3a       	cpi	r24, 0xA1	; 161
     9f2:	09 f0       	breq	.+2      	; 0x9f6 <HID_Device_ProcessControlRequest+0x198>
     9f4:	5e c0       	rjmp	.+188    	; 0xab2 <HID_Device_ProcessControlRequest+0x254>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     9f6:	e8 ee       	ldi	r30, 0xE8	; 232
     9f8:	f0 e0       	ldi	r31, 0x00	; 0
     9fa:	80 81       	ld	r24, Z
     9fc:	87 7f       	andi	r24, 0xF7	; 247
     9fe:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     a00:	80 81       	ld	r24, Z
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
     a02:	80 ff       	sbrs	r24, 0
     a04:	fd cf       	rjmp	.-6      	; 0xa00 <HID_Device_ProcessControlRequest+0x1a2>
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
     a06:	f6 01       	movw	r30, r12
     a08:	81 85       	ldd	r24, Z+9	; 0x09
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     a0a:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     a0e:	e8 ee       	ldi	r30, 0xE8	; 232
     a10:	f0 e0       	ldi	r31, 0x00	; 0
     a12:	80 81       	ld	r24, Z
     a14:	8e 77       	andi	r24, 0x7E	; 126
     a16:	80 83       	st	Z, r24
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     a18:	ab d3       	rcall	.+1878   	; 0x1170 <Endpoint_ClearStatusStage>
     a1a:	4b c0       	rjmp	.+150    	; 0xab2 <HID_Device_ProcessControlRequest+0x254>
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     a1c:	80 91 58 02 	lds	r24, 0x0258
     a20:	81 32       	cpi	r24, 0x21	; 33
     a22:	09 f0       	breq	.+2      	; 0xa26 <HID_Device_ProcessControlRequest+0x1c8>
     a24:	46 c0       	rjmp	.+140    	; 0xab2 <HID_Device_ProcessControlRequest+0x254>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     a26:	e8 ee       	ldi	r30, 0xE8	; 232
     a28:	f0 e0       	ldi	r31, 0x00	; 0
     a2a:	80 81       	ld	r24, Z
     a2c:	87 7f       	andi	r24, 0xF7	; 247
     a2e:	80 83       	st	Z, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     a30:	9f d3       	rcall	.+1854   	; 0x1170 <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
     a32:	90 91 5a 02 	lds	r25, 0x025A
     a36:	81 e0       	ldi	r24, 0x01	; 1
     a38:	91 11       	cpse	r25, r1
     a3a:	01 c0       	rjmp	.+2      	; 0xa3e <HID_Device_ProcessControlRequest+0x1e0>
     a3c:	80 e0       	ldi	r24, 0x00	; 0
     a3e:	f6 01       	movw	r30, r12
     a40:	81 87       	std	Z+9, r24	; 0x09
     a42:	37 c0       	rjmp	.+110    	; 0xab2 <HID_Device_ProcessControlRequest+0x254>
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     a44:	80 91 58 02 	lds	r24, 0x0258
     a48:	81 32       	cpi	r24, 0x21	; 33
     a4a:	99 f5       	brne	.+102    	; 0xab2 <HID_Device_ProcessControlRequest+0x254>
     a4c:	e8 ee       	ldi	r30, 0xE8	; 232
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	80 81       	ld	r24, Z
     a52:	87 7f       	andi	r24, 0xF7	; 247
     a54:	80 83       	st	Z, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     a56:	8c d3       	rcall	.+1816   	; 0x1170 <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
     a58:	80 91 5a 02 	lds	r24, 0x025A
     a5c:	90 91 5b 02 	lds	r25, 0x025B
     a60:	88 27       	eor	r24, r24
     a62:	00 24       	eor	r0, r0
     a64:	88 0f       	add	r24, r24
     a66:	99 1f       	adc	r25, r25
     a68:	00 1c       	adc	r0, r0
     a6a:	88 0f       	add	r24, r24
     a6c:	99 1f       	adc	r25, r25
     a6e:	00 1c       	adc	r0, r0
     a70:	89 2f       	mov	r24, r25
     a72:	90 2d       	mov	r25, r0
     a74:	f6 01       	movw	r30, r12
     a76:	95 87       	std	Z+13, r25	; 0x0d
     a78:	84 87       	std	Z+12, r24	; 0x0c
     a7a:	1b c0       	rjmp	.+54     	; 0xab2 <HID_Device_ProcessControlRequest+0x254>
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     a7c:	80 91 58 02 	lds	r24, 0x0258
     a80:	81 3a       	cpi	r24, 0xA1	; 161
     a82:	b9 f4       	brne	.+46     	; 0xab2 <HID_Device_ProcessControlRequest+0x254>
     a84:	e8 ee       	ldi	r30, 0xE8	; 232
     a86:	f0 e0       	ldi	r31, 0x00	; 0
     a88:	80 81       	ld	r24, Z
     a8a:	87 7f       	andi	r24, 0xF7	; 247
     a8c:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     a8e:	80 81       	ld	r24, Z
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
     a90:	80 ff       	sbrs	r24, 0
     a92:	fd cf       	rjmp	.-6      	; 0xa8e <HID_Device_ProcessControlRequest+0x230>
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
     a94:	f6 01       	movw	r30, r12
     a96:	84 85       	ldd	r24, Z+12	; 0x0c
     a98:	95 85       	ldd	r25, Z+13	; 0x0d
     a9a:	96 95       	lsr	r25
     a9c:	87 95       	ror	r24
     a9e:	96 95       	lsr	r25
     aa0:	87 95       	ror	r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     aa2:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     aa6:	e8 ee       	ldi	r30, 0xE8	; 232
     aa8:	f0 e0       	ldi	r31, 0x00	; 0
     aaa:	80 81       	ld	r24, Z
     aac:	8e 77       	andi	r24, 0x7E	; 126
     aae:	80 83       	st	Z, r24
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     ab0:	5f d3       	rcall	.+1726   	; 0x1170 <Endpoint_ClearStatusStage>
			}

			break;
	}
}
     ab2:	0f b6       	in	r0, 0x3f	; 63
     ab4:	f8 94       	cli
     ab6:	fe be       	out	0x3e, r15	; 62
     ab8:	0f be       	out	0x3f, r0	; 63
     aba:	ed be       	out	0x3d, r14	; 61
     abc:	0f 90       	pop	r0
     abe:	0f 90       	pop	r0
     ac0:	0f 90       	pop	r0
     ac2:	df 91       	pop	r29
     ac4:	cf 91       	pop	r28
     ac6:	1f 91       	pop	r17
     ac8:	0f 91       	pop	r16
     aca:	ff 90       	pop	r15
     acc:	ef 90       	pop	r14
     ace:	df 90       	pop	r13
     ad0:	cf 90       	pop	r12
     ad2:	bf 90       	pop	r11
     ad4:	af 90       	pop	r10
     ad6:	9f 90       	pop	r9
     ad8:	8f 90       	pop	r8
     ada:	7f 90       	pop	r7
     adc:	6f 90       	pop	r6
     ade:	5f 90       	pop	r5
     ae0:	4f 90       	pop	r4
     ae2:	3f 90       	pop	r3
     ae4:	08 95       	ret

00000ae6 <HID_Device_ConfigureEndpoints>:

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
     ae6:	fc 01       	movw	r30, r24
     ae8:	39 96       	adiw	r30, 0x09	; 9
     aea:	27 e0       	ldi	r18, 0x07	; 7
     aec:	df 01       	movw	r26, r30
     aee:	1d 92       	st	X+, r1
     af0:	2a 95       	dec	r18
     af2:	e9 f7       	brne	.-6      	; 0xaee <HID_Device_ConfigureEndpoints+0x8>
	HIDInterfaceInfo->State.UsingReportProtocol = true;
     af4:	21 e0       	ldi	r18, 0x01	; 1
     af6:	fc 01       	movw	r30, r24
     af8:	21 87       	std	Z+9, r18	; 0x09
	HIDInterfaceInfo->State.IdleCount           = 500;
     afa:	24 ef       	ldi	r18, 0xF4	; 244
     afc:	31 e0       	ldi	r19, 0x01	; 1
     afe:	35 87       	std	Z+13, r19	; 0x0d
     b00:	24 87       	std	Z+12, r18	; 0x0c

	HIDInterfaceInfo->Config.ReportINEndpoint.Type = EP_TYPE_INTERRUPT;
     b02:	23 e0       	ldi	r18, 0x03	; 3
     b04:	24 83       	std	Z+4, r18	; 0x04

	if (!(Endpoint_ConfigureEndpointTable(&HIDInterfaceInfo->Config.ReportINEndpoint, 1)))
     b06:	61 e0       	ldi	r22, 0x01	; 1
     b08:	01 96       	adiw	r24, 0x01	; 1
     b0a:	d5 c2       	rjmp	.+1450   	; 0x10b6 <Endpoint_ConfigureEndpointTable>
	  return false;

	return true;
}
     b0c:	08 95       	ret

00000b0e <HID_Device_USBTask>:

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
     b0e:	5f 92       	push	r5
     b10:	6f 92       	push	r6
     b12:	7f 92       	push	r7
     b14:	8f 92       	push	r8
     b16:	9f 92       	push	r9
     b18:	af 92       	push	r10
     b1a:	bf 92       	push	r11
     b1c:	cf 92       	push	r12
     b1e:	df 92       	push	r13
     b20:	ef 92       	push	r14
     b22:	ff 92       	push	r15
     b24:	0f 93       	push	r16
     b26:	1f 93       	push	r17
     b28:	cf 93       	push	r28
     b2a:	df 93       	push	r29
     b2c:	00 d0       	rcall	.+0      	; 0xb2e <HID_Device_USBTask+0x20>
     b2e:	1f 92       	push	r1
     b30:	cd b7       	in	r28, 0x3d	; 61
     b32:	de b7       	in	r29, 0x3e	; 62
     b34:	7c 01       	movw	r14, r24
			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
	}
}
     b36:	cd b6       	in	r12, 0x3d	; 61
     b38:	de b6       	in	r13, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
     b3a:	80 91 57 02 	lds	r24, 0x0257
     b3e:	84 30       	cpi	r24, 0x04	; 4
     b40:	09 f0       	breq	.+2      	; 0xb44 <HID_Device_USBTask+0x36>
     b42:	8a c0       	rjmp	.+276    	; 0xc58 <HID_Device_USBTask+0x14a>
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     b44:	80 91 e4 00 	lds	r24, 0x00E4
     b48:	90 91 e5 00 	lds	r25, 0x00E5
	  return;

	if (HIDInterfaceInfo->State.PrevFrameNum == USB_Device_GetFrameNumber())
     b4c:	f7 01       	movw	r30, r14
     b4e:	22 85       	ldd	r18, Z+10	; 0x0a
     b50:	33 85       	ldd	r19, Z+11	; 0x0b
     b52:	28 17       	cp	r18, r24
     b54:	39 07       	cpc	r19, r25
     b56:	09 f4       	brne	.+2      	; 0xb5a <HID_Device_USBTask+0x4c>
     b58:	7f c0       	rjmp	.+254    	; 0xc58 <HID_Device_USBTask+0x14a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     b5a:	81 81       	ldd	r24, Z+1	; 0x01
     b5c:	8f 70       	andi	r24, 0x0F	; 15
     b5e:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     b62:	80 91 e8 00 	lds	r24, 0x00E8
		#endif
	}

	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

	if (Endpoint_IsReadWriteAllowed())
     b66:	85 ff       	sbrs	r24, 5
     b68:	77 c0       	rjmp	.+238    	; 0xc58 <HID_Device_USBTask+0x14a>
     b6a:	8d b6       	in	r8, 0x3d	; 61
     b6c:	9e b6       	in	r9, 0x3e	; 62
	{
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
     b6e:	40 85       	ldd	r20, Z+8	; 0x08
     b70:	50 e0       	ldi	r21, 0x00	; 0
     b72:	8d b7       	in	r24, 0x3d	; 61
     b74:	9e b7       	in	r25, 0x3e	; 62
     b76:	84 1b       	sub	r24, r20
     b78:	95 0b       	sbc	r25, r21
     b7a:	0f b6       	in	r0, 0x3f	; 63
     b7c:	f8 94       	cli
     b7e:	9e bf       	out	0x3e, r25	; 62
     b80:	0f be       	out	0x3f, r0	; 63
     b82:	8d bf       	out	0x3d, r24	; 61
     b84:	ed b7       	in	r30, 0x3d	; 61
     b86:	fe b7       	in	r31, 0x3e	; 62
     b88:	31 96       	adiw	r30, 0x01	; 1
     b8a:	5f 01       	movw	r10, r30
		uint8_t  ReportID     = 0;
     b8c:	1b 82       	std	Y+3, r1	; 0x03
		uint16_t ReportINSize = 0;
     b8e:	1a 82       	std	Y+2, r1	; 0x02
     b90:	19 82       	std	Y+1, r1	; 0x01

		memset(ReportINData, 0, sizeof(ReportINData));
     b92:	60 e0       	ldi	r22, 0x00	; 0
     b94:	70 e0       	ldi	r23, 0x00	; 0
     b96:	cf 01       	movw	r24, r30
     b98:	d1 d5       	rcall	.+2978   	; 0x173c <memset>

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
     b9a:	8e 01       	movw	r16, r28
     b9c:	0f 5f       	subi	r16, 0xFF	; 255
     b9e:	1f 4f       	sbci	r17, 0xFF	; 255
     ba0:	95 01       	movw	r18, r10
     ba2:	40 e0       	ldi	r20, 0x00	; 0
     ba4:	be 01       	movw	r22, r28
     ba6:	6d 5f       	subi	r22, 0xFD	; 253
     ba8:	7f 4f       	sbci	r23, 0xFF	; 255
     baa:	c7 01       	movw	r24, r14
     bac:	b6 db       	rcall	.-2196   	; 0x31a <CALLBACK_HID_Device_CreateHIDReport>
     bae:	68 2e       	mov	r6, r24
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
     bb0:	f7 01       	movw	r30, r14
     bb2:	24 85       	ldd	r18, Z+12	; 0x0c
     bb4:	35 85       	ldd	r19, Z+13	; 0x0d
     bb6:	23 2b       	or	r18, r19
     bb8:	41 f0       	breq	.+16     	; 0xbca <HID_Device_USBTask+0xbc>
     bba:	21 e0       	ldi	r18, 0x01	; 1
     bbc:	86 85       	ldd	r24, Z+14	; 0x0e
     bbe:	97 85       	ldd	r25, Z+15	; 0x0f
     bc0:	89 2b       	or	r24, r25
     bc2:	09 f0       	breq	.+2      	; 0xbc6 <HID_Device_USBTask+0xb8>
     bc4:	20 e0       	ldi	r18, 0x00	; 0
     bc6:	52 2e       	mov	r5, r18
     bc8:	01 c0       	rjmp	.+2      	; 0xbcc <HID_Device_USBTask+0xbe>
     bca:	51 2c       	mov	r5, r1

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
     bcc:	f7 01       	movw	r30, r14
     bce:	06 81       	ldd	r16, Z+6	; 0x06
     bd0:	17 81       	ldd	r17, Z+7	; 0x07
     bd2:	01 15       	cp	r16, r1
     bd4:	11 05       	cpc	r17, r1
     bd6:	89 f0       	breq	.+34     	; 0xbfa <HID_Device_USBTask+0xec>
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
     bd8:	49 81       	ldd	r20, Y+1	; 0x01
     bda:	5a 81       	ldd	r21, Y+2	; 0x02
     bdc:	b8 01       	movw	r22, r16
     bde:	c5 01       	movw	r24, r10
     be0:	97 d5       	rcall	.+2862   	; 0x1710 <memcmp>
     be2:	77 24       	eor	r7, r7
     be4:	73 94       	inc	r7
     be6:	89 2b       	or	r24, r25
     be8:	09 f4       	brne	.+2      	; 0xbec <HID_Device_USBTask+0xde>
     bea:	71 2c       	mov	r7, r1
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
     bec:	f7 01       	movw	r30, r14
     bee:	40 85       	ldd	r20, Z+8	; 0x08
     bf0:	50 e0       	ldi	r21, 0x00	; 0
     bf2:	b5 01       	movw	r22, r10
     bf4:	c8 01       	movw	r24, r16
     bf6:	99 d5       	rcall	.+2866   	; 0x172a <memcpy>
     bf8:	01 c0       	rjmp	.+2      	; 0xbfc <HID_Device_USBTask+0xee>

		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
     bfa:	71 2c       	mov	r7, r1
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
     bfc:	29 81       	ldd	r18, Y+1	; 0x01
     bfe:	3a 81       	ldd	r19, Y+2	; 0x02
     c00:	23 2b       	or	r18, r19
     c02:	f1 f0       	breq	.+60     	; 0xc40 <HID_Device_USBTask+0x132>
     c04:	61 10       	cpse	r6, r1
     c06:	04 c0       	rjmp	.+8      	; 0xc10 <HID_Device_USBTask+0x102>
     c08:	71 10       	cpse	r7, r1
     c0a:	02 c0       	rjmp	.+4      	; 0xc10 <HID_Device_USBTask+0x102>
     c0c:	50 fe       	sbrs	r5, 0
     c0e:	18 c0       	rjmp	.+48     	; 0xc40 <HID_Device_USBTask+0x132>
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
     c10:	f7 01       	movw	r30, r14
     c12:	84 85       	ldd	r24, Z+12	; 0x0c
     c14:	95 85       	ldd	r25, Z+13	; 0x0d
     c16:	97 87       	std	Z+15, r25	; 0x0f
     c18:	86 87       	std	Z+14, r24	; 0x0e
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     c1a:	81 81       	ldd	r24, Z+1	; 0x01
     c1c:	8f 70       	andi	r24, 0x0F	; 15
     c1e:	80 93 e9 00 	sts	0x00E9, r24

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

			if (ReportID)
     c22:	8b 81       	ldd	r24, Y+3	; 0x03
     c24:	81 11       	cpse	r24, r1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     c26:	80 93 f1 00 	sts	0x00F1, r24
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
     c2a:	69 81       	ldd	r22, Y+1	; 0x01
     c2c:	7a 81       	ldd	r23, Y+2	; 0x02
     c2e:	40 e0       	ldi	r20, 0x00	; 0
     c30:	50 e0       	ldi	r21, 0x00	; 0
     c32:	c5 01       	movw	r24, r10
     c34:	29 d0       	rcall	.+82     	; 0xc88 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     c36:	e8 ee       	ldi	r30, 0xE8	; 232
     c38:	f0 e0       	ldi	r31, 0x00	; 0
     c3a:	80 81       	ld	r24, Z
     c3c:	8e 77       	andi	r24, 0x7E	; 126
     c3e:	80 83       	st	Z, r24
     c40:	80 91 e4 00 	lds	r24, 0x00E4
     c44:	90 91 e5 00 	lds	r25, 0x00E5

			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
     c48:	f7 01       	movw	r30, r14
     c4a:	93 87       	std	Z+11, r25	; 0x0b
     c4c:	82 87       	std	Z+10, r24	; 0x0a
     c4e:	0f b6       	in	r0, 0x3f	; 63
     c50:	f8 94       	cli
     c52:	9e be       	out	0x3e, r9	; 62
     c54:	0f be       	out	0x3f, r0	; 63
     c56:	8d be       	out	0x3d, r8	; 61
	}
}
     c58:	0f b6       	in	r0, 0x3f	; 63
     c5a:	f8 94       	cli
     c5c:	de be       	out	0x3e, r13	; 62
     c5e:	0f be       	out	0x3f, r0	; 63
     c60:	cd be       	out	0x3d, r12	; 61
     c62:	0f 90       	pop	r0
     c64:	0f 90       	pop	r0
     c66:	0f 90       	pop	r0
     c68:	df 91       	pop	r29
     c6a:	cf 91       	pop	r28
     c6c:	1f 91       	pop	r17
     c6e:	0f 91       	pop	r16
     c70:	ff 90       	pop	r15
     c72:	ef 90       	pop	r14
     c74:	df 90       	pop	r13
     c76:	cf 90       	pop	r12
     c78:	bf 90       	pop	r11
     c7a:	af 90       	pop	r10
     c7c:	9f 90       	pop	r9
     c7e:	8f 90       	pop	r8
     c80:	7f 90       	pop	r7
     c82:	6f 90       	pop	r6
     c84:	5f 90       	pop	r5
     c86:	08 95       	ret

00000c88 <Endpoint_Write_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     c88:	8f 92       	push	r8
     c8a:	9f 92       	push	r9
     c8c:	af 92       	push	r10
     c8e:	bf 92       	push	r11
     c90:	cf 92       	push	r12
     c92:	df 92       	push	r13
     c94:	ef 92       	push	r14
     c96:	ff 92       	push	r15
     c98:	0f 93       	push	r16
     c9a:	1f 93       	push	r17
     c9c:	cf 93       	push	r28
     c9e:	df 93       	push	r29
     ca0:	7c 01       	movw	r14, r24
     ca2:	eb 01       	movw	r28, r22
     ca4:	5a 01       	movw	r10, r20
     ca6:	88 d2       	rcall	.+1296   	; 0x11b8 <Endpoint_WaitUntilReady>
     ca8:	81 11       	cpse	r24, r1
     caa:	3e c0       	rjmp	.+124    	; 0xd28 <Endpoint_Write_Stream_LE+0xa0>
     cac:	a1 14       	cp	r10, r1
     cae:	b1 04       	cpc	r11, r1
     cb0:	39 f0       	breq	.+14     	; 0xcc0 <Endpoint_Write_Stream_LE+0x38>
     cb2:	f5 01       	movw	r30, r10
     cb4:	80 81       	ld	r24, Z
     cb6:	91 81       	ldd	r25, Z+1	; 0x01
     cb8:	c8 1b       	sub	r28, r24
     cba:	d9 0b       	sbc	r29, r25
     cbc:	e8 0e       	add	r14, r24
     cbe:	f9 1e       	adc	r15, r25
     cc0:	20 97       	sbiw	r28, 0x00	; 0
     cc2:	79 f1       	breq	.+94     	; 0xd22 <Endpoint_Write_Stream_LE+0x9a>
     cc4:	00 e0       	ldi	r16, 0x00	; 0
     cc6:	10 e0       	ldi	r17, 0x00	; 0
     cc8:	0f 2e       	mov	r0, r31
     cca:	f8 ee       	ldi	r31, 0xE8	; 232
     ccc:	8f 2e       	mov	r8, r31
     cce:	91 2c       	mov	r9, r1
     cd0:	f0 2d       	mov	r31, r0
     cd2:	0f 2e       	mov	r0, r31
     cd4:	f1 ef       	ldi	r31, 0xF1	; 241
     cd6:	cf 2e       	mov	r12, r31
     cd8:	d1 2c       	mov	r13, r1
     cda:	f0 2d       	mov	r31, r0
     cdc:	f4 01       	movw	r30, r8
     cde:	80 81       	ld	r24, Z
     ce0:	85 fd       	sbrc	r24, 5
     ce2:	14 c0       	rjmp	.+40     	; 0xd0c <Endpoint_Write_Stream_LE+0x84>
     ce4:	80 81       	ld	r24, Z
     ce6:	8e 77       	andi	r24, 0x7E	; 126
     ce8:	80 83       	st	Z, r24
     cea:	f1 d4       	rcall	.+2530   	; 0x16ce <USB_USBTask>
     cec:	a1 14       	cp	r10, r1
     cee:	b1 04       	cpc	r11, r1
     cf0:	49 f0       	breq	.+18     	; 0xd04 <Endpoint_Write_Stream_LE+0x7c>
     cf2:	f5 01       	movw	r30, r10
     cf4:	80 81       	ld	r24, Z
     cf6:	91 81       	ldd	r25, Z+1	; 0x01
     cf8:	08 0f       	add	r16, r24
     cfa:	19 1f       	adc	r17, r25
     cfc:	11 83       	std	Z+1, r17	; 0x01
     cfe:	00 83       	st	Z, r16
     d00:	85 e0       	ldi	r24, 0x05	; 5
     d02:	12 c0       	rjmp	.+36     	; 0xd28 <Endpoint_Write_Stream_LE+0xa0>
     d04:	59 d2       	rcall	.+1202   	; 0x11b8 <Endpoint_WaitUntilReady>
     d06:	88 23       	and	r24, r24
     d08:	49 f0       	breq	.+18     	; 0xd1c <Endpoint_Write_Stream_LE+0x94>
     d0a:	0e c0       	rjmp	.+28     	; 0xd28 <Endpoint_Write_Stream_LE+0xa0>
     d0c:	f7 01       	movw	r30, r14
     d0e:	81 91       	ld	r24, Z+
     d10:	7f 01       	movw	r14, r30
     d12:	f6 01       	movw	r30, r12
     d14:	80 83       	st	Z, r24
     d16:	21 97       	sbiw	r28, 0x01	; 1
     d18:	0f 5f       	subi	r16, 0xFF	; 255
     d1a:	1f 4f       	sbci	r17, 0xFF	; 255
     d1c:	20 97       	sbiw	r28, 0x00	; 0
     d1e:	f1 f6       	brne	.-68     	; 0xcdc <Endpoint_Write_Stream_LE+0x54>
     d20:	02 c0       	rjmp	.+4      	; 0xd26 <Endpoint_Write_Stream_LE+0x9e>
     d22:	80 e0       	ldi	r24, 0x00	; 0
     d24:	01 c0       	rjmp	.+2      	; 0xd28 <Endpoint_Write_Stream_LE+0xa0>
     d26:	80 e0       	ldi	r24, 0x00	; 0
     d28:	df 91       	pop	r29
     d2a:	cf 91       	pop	r28
     d2c:	1f 91       	pop	r17
     d2e:	0f 91       	pop	r16
     d30:	ff 90       	pop	r15
     d32:	ef 90       	pop	r14
     d34:	df 90       	pop	r13
     d36:	cf 90       	pop	r12
     d38:	bf 90       	pop	r11
     d3a:	af 90       	pop	r10
     d3c:	9f 90       	pop	r9
     d3e:	8f 90       	pop	r8
     d40:	08 95       	ret

00000d42 <Endpoint_Write_Control_Stream_LE>:
     d42:	0f 93       	push	r16
     d44:	1f 93       	push	r17
     d46:	cf 93       	push	r28
     d48:	df 93       	push	r29
     d4a:	20 91 5e 02 	lds	r18, 0x025E
     d4e:	30 91 5f 02 	lds	r19, 0x025F
     d52:	26 17       	cp	r18, r22
     d54:	37 07       	cpc	r19, r23
     d56:	58 f0       	brcs	.+22     	; 0xd6e <Endpoint_Write_Control_Stream_LE+0x2c>
     d58:	61 15       	cp	r22, r1
     d5a:	71 05       	cpc	r23, r1
     d5c:	39 f4       	brne	.+14     	; 0xd6c <Endpoint_Write_Control_Stream_LE+0x2a>
     d5e:	e8 ee       	ldi	r30, 0xE8	; 232
     d60:	f0 e0       	ldi	r31, 0x00	; 0
     d62:	20 81       	ld	r18, Z
     d64:	2e 77       	andi	r18, 0x7E	; 126
     d66:	20 83       	st	Z, r18
     d68:	9b 01       	movw	r18, r22
     d6a:	01 c0       	rjmp	.+2      	; 0xd6e <Endpoint_Write_Control_Stream_LE+0x2c>
     d6c:	9b 01       	movw	r18, r22
     d6e:	a0 e0       	ldi	r26, 0x00	; 0
     d70:	e8 ee       	ldi	r30, 0xE8	; 232
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	62 ef       	ldi	r22, 0xF2	; 242
     d76:	70 e0       	ldi	r23, 0x00	; 0
     d78:	c1 ef       	ldi	r28, 0xF1	; 241
     d7a:	d0 e0       	ldi	r29, 0x00	; 0
     d7c:	11 e0       	ldi	r17, 0x01	; 1
     d7e:	00 e0       	ldi	r16, 0x00	; 0
     d80:	35 c0       	rjmp	.+106    	; 0xdec <Endpoint_Write_Control_Stream_LE+0xaa>
     d82:	40 91 57 02 	lds	r20, 0x0257
     d86:	44 23       	and	r20, r20
     d88:	09 f4       	brne	.+2      	; 0xd8c <Endpoint_Write_Control_Stream_LE+0x4a>
     d8a:	41 c0       	rjmp	.+130    	; 0xe0e <Endpoint_Write_Control_Stream_LE+0xcc>
     d8c:	45 30       	cpi	r20, 0x05	; 5
     d8e:	09 f4       	brne	.+2      	; 0xd92 <Endpoint_Write_Control_Stream_LE+0x50>
     d90:	40 c0       	rjmp	.+128    	; 0xe12 <Endpoint_Write_Control_Stream_LE+0xd0>
     d92:	40 81       	ld	r20, Z
     d94:	43 fd       	sbrc	r20, 3
     d96:	3f c0       	rjmp	.+126    	; 0xe16 <Endpoint_Write_Control_Stream_LE+0xd4>
     d98:	40 81       	ld	r20, Z
     d9a:	42 ff       	sbrs	r20, 2
     d9c:	03 c0       	rjmp	.+6      	; 0xda4 <Endpoint_Write_Control_Stream_LE+0x62>
     d9e:	e8 ee       	ldi	r30, 0xE8	; 232
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	30 c0       	rjmp	.+96     	; 0xe04 <Endpoint_Write_Control_Stream_LE+0xc2>
     da4:	40 81       	ld	r20, Z
     da6:	40 ff       	sbrs	r20, 0
     da8:	21 c0       	rjmp	.+66     	; 0xdec <Endpoint_Write_Control_Stream_LE+0xaa>
     daa:	db 01       	movw	r26, r22
     dac:	4c 91       	ld	r20, X
     dae:	50 e0       	ldi	r21, 0x00	; 0
     db0:	21 15       	cp	r18, r1
     db2:	31 05       	cpc	r19, r1
     db4:	99 f0       	breq	.+38     	; 0xddc <Endpoint_Write_Control_Stream_LE+0x9a>
     db6:	48 30       	cpi	r20, 0x08	; 8
     db8:	51 05       	cpc	r21, r1
     dba:	80 f4       	brcc	.+32     	; 0xddc <Endpoint_Write_Control_Stream_LE+0x9a>
     dbc:	a8 2f       	mov	r26, r24
     dbe:	b9 2f       	mov	r27, r25
     dc0:	8d 91       	ld	r24, X+
     dc2:	88 83       	st	Y, r24
     dc4:	8a 2f       	mov	r24, r26
     dc6:	9b 2f       	mov	r25, r27
     dc8:	21 50       	subi	r18, 0x01	; 1
     dca:	31 09       	sbc	r19, r1
     dcc:	4f 5f       	subi	r20, 0xFF	; 255
     dce:	5f 4f       	sbci	r21, 0xFF	; 255
     dd0:	21 15       	cp	r18, r1
     dd2:	31 05       	cpc	r19, r1
     dd4:	19 f0       	breq	.+6      	; 0xddc <Endpoint_Write_Control_Stream_LE+0x9a>
     dd6:	48 30       	cpi	r20, 0x08	; 8
     dd8:	51 05       	cpc	r21, r1
     dda:	91 f7       	brne	.-28     	; 0xdc0 <Endpoint_Write_Control_Stream_LE+0x7e>
     ddc:	a1 2f       	mov	r26, r17
     dde:	48 30       	cpi	r20, 0x08	; 8
     de0:	51 05       	cpc	r21, r1
     de2:	09 f0       	breq	.+2      	; 0xde6 <Endpoint_Write_Control_Stream_LE+0xa4>
     de4:	a0 2f       	mov	r26, r16
     de6:	40 81       	ld	r20, Z
     de8:	4e 77       	andi	r20, 0x7E	; 126
     dea:	40 83       	st	Z, r20
     dec:	21 15       	cp	r18, r1
     dee:	31 05       	cpc	r19, r1
     df0:	41 f6       	brne	.-112    	; 0xd82 <Endpoint_Write_Control_Stream_LE+0x40>
     df2:	a1 11       	cpse	r26, r1
     df4:	c6 cf       	rjmp	.-116    	; 0xd82 <Endpoint_Write_Control_Stream_LE+0x40>
     df6:	d3 cf       	rjmp	.-90     	; 0xd9e <Endpoint_Write_Control_Stream_LE+0x5c>
     df8:	80 91 57 02 	lds	r24, 0x0257
     dfc:	88 23       	and	r24, r24
     dfe:	69 f0       	breq	.+26     	; 0xe1a <Endpoint_Write_Control_Stream_LE+0xd8>
     e00:	85 30       	cpi	r24, 0x05	; 5
     e02:	69 f0       	breq	.+26     	; 0xe1e <Endpoint_Write_Control_Stream_LE+0xdc>
     e04:	80 81       	ld	r24, Z
     e06:	82 ff       	sbrs	r24, 2
     e08:	f7 cf       	rjmp	.-18     	; 0xdf8 <Endpoint_Write_Control_Stream_LE+0xb6>
     e0a:	80 e0       	ldi	r24, 0x00	; 0
     e0c:	09 c0       	rjmp	.+18     	; 0xe20 <Endpoint_Write_Control_Stream_LE+0xde>
     e0e:	82 e0       	ldi	r24, 0x02	; 2
     e10:	07 c0       	rjmp	.+14     	; 0xe20 <Endpoint_Write_Control_Stream_LE+0xde>
     e12:	83 e0       	ldi	r24, 0x03	; 3
     e14:	05 c0       	rjmp	.+10     	; 0xe20 <Endpoint_Write_Control_Stream_LE+0xde>
     e16:	81 e0       	ldi	r24, 0x01	; 1
     e18:	03 c0       	rjmp	.+6      	; 0xe20 <Endpoint_Write_Control_Stream_LE+0xde>
     e1a:	82 e0       	ldi	r24, 0x02	; 2
     e1c:	01 c0       	rjmp	.+2      	; 0xe20 <Endpoint_Write_Control_Stream_LE+0xde>
     e1e:	83 e0       	ldi	r24, 0x03	; 3
     e20:	df 91       	pop	r29
     e22:	cf 91       	pop	r28
     e24:	1f 91       	pop	r17
     e26:	0f 91       	pop	r16
     e28:	08 95       	ret

00000e2a <Endpoint_Read_Control_Stream_LE>:
     e2a:	0f 93       	push	r16
     e2c:	1f 93       	push	r17
     e2e:	cf 93       	push	r28
     e30:	df 93       	push	r29
     e32:	61 15       	cp	r22, r1
     e34:	71 05       	cpc	r23, r1
     e36:	29 f4       	brne	.+10     	; 0xe42 <Endpoint_Read_Control_Stream_LE+0x18>
     e38:	e8 ee       	ldi	r30, 0xE8	; 232
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	20 81       	ld	r18, Z
     e3e:	2b 77       	andi	r18, 0x7B	; 123
     e40:	20 83       	st	Z, r18
     e42:	e8 ee       	ldi	r30, 0xE8	; 232
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	02 ef       	ldi	r16, 0xF2	; 242
     e48:	10 e0       	ldi	r17, 0x00	; 0
     e4a:	21 ef       	ldi	r18, 0xF1	; 241
     e4c:	30 e0       	ldi	r19, 0x00	; 0
     e4e:	1e c0       	rjmp	.+60     	; 0xe8c <Endpoint_Read_Control_Stream_LE+0x62>
     e50:	40 91 57 02 	lds	r20, 0x0257
     e54:	44 23       	and	r20, r20
     e56:	c1 f1       	breq	.+112    	; 0xec8 <Endpoint_Read_Control_Stream_LE+0x9e>
     e58:	45 30       	cpi	r20, 0x05	; 5
     e5a:	c1 f1       	breq	.+112    	; 0xecc <Endpoint_Read_Control_Stream_LE+0xa2>
     e5c:	40 81       	ld	r20, Z
     e5e:	43 fd       	sbrc	r20, 3
     e60:	37 c0       	rjmp	.+110    	; 0xed0 <Endpoint_Read_Control_Stream_LE+0xa6>
     e62:	40 81       	ld	r20, Z
     e64:	42 ff       	sbrs	r20, 2
     e66:	f4 cf       	rjmp	.-24     	; 0xe50 <Endpoint_Read_Control_Stream_LE+0x26>
     e68:	3f c0       	rjmp	.+126    	; 0xee8 <Endpoint_Read_Control_Stream_LE+0xbe>
     e6a:	e9 01       	movw	r28, r18
     e6c:	88 81       	ld	r24, Y
     e6e:	8d 93       	st	X+, r24
     e70:	8a 2f       	mov	r24, r26
     e72:	9b 2f       	mov	r25, r27
     e74:	61 50       	subi	r22, 0x01	; 1
     e76:	71 09       	sbc	r23, r1
     e78:	61 15       	cp	r22, r1
     e7a:	71 05       	cpc	r23, r1
     e7c:	21 f0       	breq	.+8      	; 0xe86 <Endpoint_Read_Control_Stream_LE+0x5c>
     e7e:	e8 01       	movw	r28, r16
     e80:	48 81       	ld	r20, Y
     e82:	41 11       	cpse	r20, r1
     e84:	f2 cf       	rjmp	.-28     	; 0xe6a <Endpoint_Read_Control_Stream_LE+0x40>
     e86:	40 81       	ld	r20, Z
     e88:	4b 77       	andi	r20, 0x7B	; 123
     e8a:	40 83       	st	Z, r20
     e8c:	61 15       	cp	r22, r1
     e8e:	71 05       	cpc	r23, r1
     e90:	19 f4       	brne	.+6      	; 0xe98 <Endpoint_Read_Control_Stream_LE+0x6e>
     e92:	e8 ee       	ldi	r30, 0xE8	; 232
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	13 c0       	rjmp	.+38     	; 0xebe <Endpoint_Read_Control_Stream_LE+0x94>
     e98:	40 91 57 02 	lds	r20, 0x0257
     e9c:	44 23       	and	r20, r20
     e9e:	d1 f0       	breq	.+52     	; 0xed4 <Endpoint_Read_Control_Stream_LE+0xaa>
     ea0:	45 30       	cpi	r20, 0x05	; 5
     ea2:	d1 f0       	breq	.+52     	; 0xed8 <Endpoint_Read_Control_Stream_LE+0xae>
     ea4:	40 81       	ld	r20, Z
     ea6:	43 fd       	sbrc	r20, 3
     ea8:	19 c0       	rjmp	.+50     	; 0xedc <Endpoint_Read_Control_Stream_LE+0xb2>
     eaa:	40 81       	ld	r20, Z
     eac:	42 fd       	sbrc	r20, 2
     eae:	1c c0       	rjmp	.+56     	; 0xee8 <Endpoint_Read_Control_Stream_LE+0xbe>
     eb0:	cf cf       	rjmp	.-98     	; 0xe50 <Endpoint_Read_Control_Stream_LE+0x26>
     eb2:	80 91 57 02 	lds	r24, 0x0257
     eb6:	88 23       	and	r24, r24
     eb8:	99 f0       	breq	.+38     	; 0xee0 <Endpoint_Read_Control_Stream_LE+0xb6>
     eba:	85 30       	cpi	r24, 0x05	; 5
     ebc:	99 f0       	breq	.+38     	; 0xee4 <Endpoint_Read_Control_Stream_LE+0xba>
     ebe:	80 81       	ld	r24, Z
     ec0:	80 ff       	sbrs	r24, 0
     ec2:	f7 cf       	rjmp	.-18     	; 0xeb2 <Endpoint_Read_Control_Stream_LE+0x88>
     ec4:	80 e0       	ldi	r24, 0x00	; 0
     ec6:	17 c0       	rjmp	.+46     	; 0xef6 <Endpoint_Read_Control_Stream_LE+0xcc>
     ec8:	82 e0       	ldi	r24, 0x02	; 2
     eca:	15 c0       	rjmp	.+42     	; 0xef6 <Endpoint_Read_Control_Stream_LE+0xcc>
     ecc:	83 e0       	ldi	r24, 0x03	; 3
     ece:	13 c0       	rjmp	.+38     	; 0xef6 <Endpoint_Read_Control_Stream_LE+0xcc>
     ed0:	81 e0       	ldi	r24, 0x01	; 1
     ed2:	11 c0       	rjmp	.+34     	; 0xef6 <Endpoint_Read_Control_Stream_LE+0xcc>
     ed4:	82 e0       	ldi	r24, 0x02	; 2
     ed6:	0f c0       	rjmp	.+30     	; 0xef6 <Endpoint_Read_Control_Stream_LE+0xcc>
     ed8:	83 e0       	ldi	r24, 0x03	; 3
     eda:	0d c0       	rjmp	.+26     	; 0xef6 <Endpoint_Read_Control_Stream_LE+0xcc>
     edc:	81 e0       	ldi	r24, 0x01	; 1
     ede:	0b c0       	rjmp	.+22     	; 0xef6 <Endpoint_Read_Control_Stream_LE+0xcc>
     ee0:	82 e0       	ldi	r24, 0x02	; 2
     ee2:	09 c0       	rjmp	.+18     	; 0xef6 <Endpoint_Read_Control_Stream_LE+0xcc>
     ee4:	83 e0       	ldi	r24, 0x03	; 3
     ee6:	07 c0       	rjmp	.+14     	; 0xef6 <Endpoint_Read_Control_Stream_LE+0xcc>
     ee8:	d8 01       	movw	r26, r16
     eea:	4c 91       	ld	r20, X
     eec:	44 23       	and	r20, r20
     eee:	59 f2       	breq	.-106    	; 0xe86 <Endpoint_Read_Control_Stream_LE+0x5c>
     ef0:	a8 2f       	mov	r26, r24
     ef2:	b9 2f       	mov	r27, r25
     ef4:	ba cf       	rjmp	.-140    	; 0xe6a <Endpoint_Read_Control_Stream_LE+0x40>
     ef6:	df 91       	pop	r29
     ef8:	cf 91       	pop	r28
     efa:	1f 91       	pop	r17
     efc:	0f 91       	pop	r16
     efe:	08 95       	ret

00000f00 <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
     f00:	ef 92       	push	r14
     f02:	ff 92       	push	r15
     f04:	1f 93       	push	r17
     f06:	cf 93       	push	r28
     f08:	df 93       	push	r29
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     f0a:	20 91 5e 02 	lds	r18, 0x025E
     f0e:	30 91 5f 02 	lds	r19, 0x025F
     f12:	26 17       	cp	r18, r22
     f14:	37 07       	cpc	r19, r23
     f16:	58 f0       	brcs	.+22     	; 0xf2e <Endpoint_Write_Control_PStream_LE+0x2e>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     f18:	61 15       	cp	r22, r1
     f1a:	71 05       	cpc	r23, r1
     f1c:	39 f4       	brne	.+14     	; 0xf2c <Endpoint_Write_Control_PStream_LE+0x2c>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     f1e:	e8 ee       	ldi	r30, 0xE8	; 232
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	20 81       	ld	r18, Z
     f24:	2e 77       	andi	r18, 0x7E	; 126
     f26:	20 83       	st	Z, r18
     f28:	9b 01       	movw	r18, r22
     f2a:	01 c0       	rjmp	.+2      	; 0xf2e <Endpoint_Write_Control_PStream_LE+0x2e>
     f2c:	9b 01       	movw	r18, r22
     f2e:	e8 2f       	mov	r30, r24
     f30:	f9 2f       	mov	r31, r25
     f32:	60 e0       	ldi	r22, 0x00	; 0
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     f34:	a8 ee       	ldi	r26, 0xE8	; 232
     f36:	b0 e0       	ldi	r27, 0x00	; 0
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     f38:	42 ef       	ldi	r20, 0xF2	; 242
     f3a:	50 e0       	ldi	r21, 0x00	; 0
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     f3c:	0f 2e       	mov	r0, r31
     f3e:	f1 ef       	ldi	r31, 0xF1	; 241
     f40:	ef 2e       	mov	r14, r31
     f42:	f1 2c       	mov	r15, r1
     f44:	f0 2d       	mov	r31, r0
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     f46:	71 e0       	ldi	r23, 0x01	; 1
     f48:	10 e0       	ldi	r17, 0x00	; 0
     f4a:	31 c0       	rjmp	.+98     	; 0xfae <Endpoint_Write_Control_PStream_LE+0xae>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     f4c:	80 91 57 02 	lds	r24, 0x0257

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     f50:	88 23       	and	r24, r24
     f52:	09 f4       	brne	.+2      	; 0xf56 <Endpoint_Write_Control_PStream_LE+0x56>
     f54:	3d c0       	rjmp	.+122    	; 0xfd0 <Endpoint_Write_Control_PStream_LE+0xd0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     f56:	85 30       	cpi	r24, 0x05	; 5
     f58:	09 f4       	brne	.+2      	; 0xf5c <Endpoint_Write_Control_PStream_LE+0x5c>
     f5a:	3c c0       	rjmp	.+120    	; 0xfd4 <Endpoint_Write_Control_PStream_LE+0xd4>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     f5c:	8c 91       	ld	r24, X
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     f5e:	83 fd       	sbrc	r24, 3
     f60:	3b c0       	rjmp	.+118    	; 0xfd8 <Endpoint_Write_Control_PStream_LE+0xd8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     f62:	8c 91       	ld	r24, X
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     f64:	82 ff       	sbrs	r24, 2
     f66:	03 c0       	rjmp	.+6      	; 0xf6e <Endpoint_Write_Control_PStream_LE+0x6e>
     f68:	e8 ee       	ldi	r30, 0xE8	; 232
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	2c c0       	rjmp	.+88     	; 0xfc6 <Endpoint_Write_Control_PStream_LE+0xc6>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     f6e:	8c 91       	ld	r24, X
		  break;

		if (Endpoint_IsINReady())
     f70:	80 ff       	sbrs	r24, 0
     f72:	1d c0       	rjmp	.+58     	; 0xfae <Endpoint_Write_Control_PStream_LE+0xae>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     f74:	ea 01       	movw	r28, r20
     f76:	88 81       	ld	r24, Y
     f78:	90 e0       	ldi	r25, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     f7a:	21 15       	cp	r18, r1
     f7c:	31 05       	cpc	r19, r1
     f7e:	81 f0       	breq	.+32     	; 0xfa0 <Endpoint_Write_Control_PStream_LE+0xa0>
     f80:	88 30       	cpi	r24, 0x08	; 8
     f82:	91 05       	cpc	r25, r1
     f84:	68 f4       	brcc	.+26     	; 0xfa0 <Endpoint_Write_Control_PStream_LE+0xa0>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     f86:	64 91       	lpm	r22, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     f88:	e7 01       	movw	r28, r14
     f8a:	68 83       	st	Y, r22
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     f8c:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     f8e:	21 50       	subi	r18, 0x01	; 1
     f90:	31 09       	sbc	r19, r1
				BytesInEndpoint++;
     f92:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     f94:	21 15       	cp	r18, r1
     f96:	31 05       	cpc	r19, r1
     f98:	19 f0       	breq	.+6      	; 0xfa0 <Endpoint_Write_Control_PStream_LE+0xa0>
     f9a:	88 30       	cpi	r24, 0x08	; 8
     f9c:	91 05       	cpc	r25, r1
     f9e:	99 f7       	brne	.-26     	; 0xf86 <Endpoint_Write_Control_PStream_LE+0x86>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     fa0:	67 2f       	mov	r22, r23
     fa2:	08 97       	sbiw	r24, 0x08	; 8
     fa4:	09 f0       	breq	.+2      	; 0xfa8 <Endpoint_Write_Control_PStream_LE+0xa8>
     fa6:	61 2f       	mov	r22, r17
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     fa8:	8c 91       	ld	r24, X
     faa:	8e 77       	andi	r24, 0x7E	; 126
     fac:	8c 93       	st	X, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     fae:	21 15       	cp	r18, r1
     fb0:	31 05       	cpc	r19, r1
     fb2:	61 f6       	brne	.-104    	; 0xf4c <Endpoint_Write_Control_PStream_LE+0x4c>
     fb4:	61 11       	cpse	r22, r1
     fb6:	ca cf       	rjmp	.-108    	; 0xf4c <Endpoint_Write_Control_PStream_LE+0x4c>
     fb8:	d7 cf       	rjmp	.-82     	; 0xf68 <Endpoint_Write_Control_PStream_LE+0x68>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     fba:	80 91 57 02 	lds	r24, 0x0257

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     fbe:	88 23       	and	r24, r24
     fc0:	69 f0       	breq	.+26     	; 0xfdc <Endpoint_Write_Control_PStream_LE+0xdc>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     fc2:	85 30       	cpi	r24, 0x05	; 5
     fc4:	69 f0       	breq	.+26     	; 0xfe0 <Endpoint_Write_Control_PStream_LE+0xe0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     fc6:	80 81       	ld	r24, Z
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     fc8:	82 ff       	sbrs	r24, 2
     fca:	f7 cf       	rjmp	.-18     	; 0xfba <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     fcc:	80 e0       	ldi	r24, 0x00	; 0
     fce:	09 c0       	rjmp	.+18     	; 0xfe2 <Endpoint_Write_Control_PStream_LE+0xe2>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     fd0:	82 e0       	ldi	r24, 0x02	; 2
     fd2:	07 c0       	rjmp	.+14     	; 0xfe2 <Endpoint_Write_Control_PStream_LE+0xe2>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     fd4:	83 e0       	ldi	r24, 0x03	; 3
     fd6:	05 c0       	rjmp	.+10     	; 0xfe2 <Endpoint_Write_Control_PStream_LE+0xe2>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	03 c0       	rjmp	.+6      	; 0xfe2 <Endpoint_Write_Control_PStream_LE+0xe2>
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     fdc:	82 e0       	ldi	r24, 0x02	; 2
     fde:	01 c0       	rjmp	.+2      	; 0xfe2 <Endpoint_Write_Control_PStream_LE+0xe2>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     fe0:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     fe2:	df 91       	pop	r29
     fe4:	cf 91       	pop	r28
     fe6:	1f 91       	pop	r17
     fe8:	ff 90       	pop	r15
     fea:	ef 90       	pop	r14
     fec:	08 95       	ret

00000fee <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
     fee:	8f 92       	push	r8
     ff0:	9f 92       	push	r9
     ff2:	bf 92       	push	r11
     ff4:	cf 92       	push	r12
     ff6:	df 92       	push	r13
     ff8:	ef 92       	push	r14
     ffa:	ff 92       	push	r15
     ffc:	0f 93       	push	r16
     ffe:	1f 93       	push	r17
    1000:	cf 93       	push	r28
    1002:	df 93       	push	r29
    1004:	85 30       	cpi	r24, 0x05	; 5
    1006:	70 f1       	brcs	.+92     	; 0x1064 <Endpoint_ConfigureEndpoint_Prv+0x76>
    1008:	26 c0       	rjmp	.+76     	; 0x1056 <Endpoint_ConfigureEndpoint_Prv+0x68>
    100a:	59 2f       	mov	r21, r25
    100c:	5f 70       	andi	r21, 0x0F	; 15
    100e:	e8 01       	movw	r28, r16
    1010:	58 83       	st	Y, r21
    1012:	89 17       	cp	r24, r25
    1014:	31 f0       	breq	.+12     	; 0x1022 <Endpoint_ConfigureEndpoint_Prv+0x34>
    1016:	e9 01       	movw	r28, r18
    1018:	d8 80       	ld	r13, Y
    101a:	50 81       	ld	r21, Z
    101c:	e4 01       	movw	r28, r8
    101e:	78 81       	ld	r23, Y
    1020:	03 c0       	rjmp	.+6      	; 0x1028 <Endpoint_ConfigureEndpoint_Prv+0x3a>
    1022:	5b 2d       	mov	r21, r11
    1024:	d6 2e       	mov	r13, r22
    1026:	7c 2d       	mov	r23, r12
    1028:	51 ff       	sbrs	r21, 1
    102a:	12 c0       	rjmp	.+36     	; 0x1050 <Endpoint_ConfigureEndpoint_Prv+0x62>
    102c:	4c 91       	ld	r20, X
    102e:	4e 7f       	andi	r20, 0xFE	; 254
    1030:	4c 93       	st	X, r20
    1032:	40 81       	ld	r20, Z
    1034:	4d 7f       	andi	r20, 0xFD	; 253
    1036:	40 83       	st	Z, r20
    1038:	4c 91       	ld	r20, X
    103a:	41 60       	ori	r20, 0x01	; 1
    103c:	4c 93       	st	X, r20
    103e:	e9 01       	movw	r28, r18
    1040:	d8 82       	st	Y, r13
    1042:	50 83       	st	Z, r21
    1044:	e4 01       	movw	r28, r8
    1046:	78 83       	st	Y, r23
    1048:	e7 01       	movw	r28, r14
    104a:	58 81       	ld	r21, Y
    104c:	55 23       	and	r21, r21
    104e:	44 f4       	brge	.+16     	; 0x1060 <Endpoint_ConfigureEndpoint_Prv+0x72>
    1050:	9f 5f       	subi	r25, 0xFF	; 255
    1052:	95 30       	cpi	r25, 0x05	; 5
    1054:	d1 f6       	brne	.-76     	; 0x100a <Endpoint_ConfigureEndpoint_Prv+0x1c>
    1056:	8f 70       	andi	r24, 0x0F	; 15
    1058:	80 93 e9 00 	sts	0x00E9, r24
    105c:	81 e0       	ldi	r24, 0x01	; 1
    105e:	1f c0       	rjmp	.+62     	; 0x109e <Endpoint_ConfigureEndpoint_Prv+0xb0>
    1060:	80 e0       	ldi	r24, 0x00	; 0
    1062:	1d c0       	rjmp	.+58     	; 0x109e <Endpoint_ConfigureEndpoint_Prv+0xb0>
    1064:	98 2f       	mov	r25, r24
    1066:	9f 70       	andi	r25, 0x0F	; 15
    1068:	90 93 e9 00 	sts	0x00E9, r25
    106c:	98 2f       	mov	r25, r24
    106e:	54 2f       	mov	r21, r20
    1070:	d6 2e       	mov	r13, r22
    1072:	70 e0       	ldi	r23, 0x00	; 0
    1074:	ab ee       	ldi	r26, 0xEB	; 235
    1076:	b0 e0       	ldi	r27, 0x00	; 0
    1078:	ed ee       	ldi	r30, 0xED	; 237
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	2c ee       	ldi	r18, 0xEC	; 236
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	0f 2e       	mov	r0, r31
    1082:	f0 ef       	ldi	r31, 0xF0	; 240
    1084:	8f 2e       	mov	r8, r31
    1086:	91 2c       	mov	r9, r1
    1088:	f0 2d       	mov	r31, r0
    108a:	0f 2e       	mov	r0, r31
    108c:	fe ee       	ldi	r31, 0xEE	; 238
    108e:	ef 2e       	mov	r14, r31
    1090:	f1 2c       	mov	r15, r1
    1092:	f0 2d       	mov	r31, r0
    1094:	09 ee       	ldi	r16, 0xE9	; 233
    1096:	10 e0       	ldi	r17, 0x00	; 0
    1098:	b4 2e       	mov	r11, r20
    109a:	c1 2c       	mov	r12, r1
    109c:	c5 cf       	rjmp	.-118    	; 0x1028 <Endpoint_ConfigureEndpoint_Prv+0x3a>
    109e:	df 91       	pop	r29
    10a0:	cf 91       	pop	r28
    10a2:	1f 91       	pop	r17
    10a4:	0f 91       	pop	r16
    10a6:	ff 90       	pop	r15
    10a8:	ef 90       	pop	r14
    10aa:	df 90       	pop	r13
    10ac:	cf 90       	pop	r12
    10ae:	bf 90       	pop	r11
    10b0:	9f 90       	pop	r9
    10b2:	8f 90       	pop	r8
    10b4:	08 95       	ret

000010b6 <Endpoint_ConfigureEndpointTable>:
    10b6:	bf 92       	push	r11
    10b8:	cf 92       	push	r12
    10ba:	df 92       	push	r13
    10bc:	ef 92       	push	r14
    10be:	ff 92       	push	r15
    10c0:	0f 93       	push	r16
    10c2:	1f 93       	push	r17
    10c4:	cf 93       	push	r28
    10c6:	df 93       	push	r29
    10c8:	06 2f       	mov	r16, r22
    10ca:	66 23       	and	r22, r22
    10cc:	09 f4       	brne	.+2      	; 0x10d0 <Endpoint_ConfigureEndpointTable+0x1a>
    10ce:	41 c0       	rjmp	.+130    	; 0x1152 <Endpoint_ConfigureEndpointTable+0x9c>
    10d0:	c8 2f       	mov	r28, r24
    10d2:	d9 2f       	mov	r29, r25
    10d4:	10 e0       	ldi	r17, 0x00	; 0
    10d6:	f1 2c       	mov	r15, r1
    10d8:	68 94       	set
    10da:	dd 24       	eor	r13, r13
    10dc:	d3 f8       	bld	r13, 3
    10de:	e1 2c       	mov	r14, r1
    10e0:	68 94       	set
    10e2:	bb 24       	eor	r11, r11
    10e4:	b1 f8       	bld	r11, 1
    10e6:	0f 2e       	mov	r0, r31
    10e8:	f6 e0       	ldi	r31, 0x06	; 6
    10ea:	cf 2e       	mov	r12, r31
    10ec:	f0 2d       	mov	r31, r0
    10ee:	58 81       	ld	r21, Y
    10f0:	55 23       	and	r21, r21
    10f2:	51 f1       	breq	.+84     	; 0x1148 <Endpoint_ConfigureEndpointTable+0x92>
    10f4:	9c 81       	ldd	r25, Y+4	; 0x04
    10f6:	e9 81       	ldd	r30, Y+1	; 0x01
    10f8:	fa 81       	ldd	r31, Y+2	; 0x02
    10fa:	7b 81       	ldd	r23, Y+3	; 0x03
    10fc:	85 2f       	mov	r24, r21
    10fe:	8f 70       	andi	r24, 0x0F	; 15
    1100:	85 30       	cpi	r24, 0x05	; 5
    1102:	48 f5       	brcc	.+82     	; 0x1156 <Endpoint_ConfigureEndpointTable+0xa0>
    1104:	92 30       	cpi	r25, 0x02	; 2
    1106:	10 f0       	brcs	.+4      	; 0x110c <Endpoint_ConfigureEndpointTable+0x56>
    1108:	4c 2d       	mov	r20, r12
    110a:	01 c0       	rjmp	.+2      	; 0x110e <Endpoint_ConfigureEndpointTable+0x58>
    110c:	4b 2d       	mov	r20, r11
    110e:	e9 30       	cpi	r30, 0x09	; 9
    1110:	f1 05       	cpc	r31, r1
    1112:	50 f0       	brcs	.+20     	; 0x1128 <Endpoint_ConfigureEndpointTable+0x72>
    1114:	2d 2d       	mov	r18, r13
    1116:	3e 2d       	mov	r19, r14
    1118:	9f 2d       	mov	r25, r15
    111a:	9f 5f       	subi	r25, 0xFF	; 255
    111c:	22 0f       	add	r18, r18
    111e:	33 1f       	adc	r19, r19
    1120:	2e 17       	cp	r18, r30
    1122:	3f 07       	cpc	r19, r31
    1124:	d0 f3       	brcs	.-12     	; 0x111a <Endpoint_ConfigureEndpointTable+0x64>
    1126:	01 c0       	rjmp	.+2      	; 0x112a <Endpoint_ConfigureEndpointTable+0x74>
    1128:	9f 2d       	mov	r25, r15
    112a:	92 95       	swap	r25
    112c:	90 7f       	andi	r25, 0xF0	; 240
    112e:	49 2b       	or	r20, r25
    1130:	55 1f       	adc	r21, r21
    1132:	55 27       	eor	r21, r21
    1134:	55 1f       	adc	r21, r21
    1136:	72 95       	swap	r23
    1138:	77 0f       	add	r23, r23
    113a:	77 0f       	add	r23, r23
    113c:	70 7c       	andi	r23, 0xC0	; 192
    113e:	67 2f       	mov	r22, r23
    1140:	65 2b       	or	r22, r21
    1142:	55 df       	rcall	.-342    	; 0xfee <Endpoint_ConfigureEndpoint_Prv>
    1144:	88 23       	and	r24, r24
    1146:	51 f0       	breq	.+20     	; 0x115c <Endpoint_ConfigureEndpointTable+0xa6>
    1148:	1f 5f       	subi	r17, 0xFF	; 255
    114a:	25 96       	adiw	r28, 0x05	; 5
    114c:	10 13       	cpse	r17, r16
    114e:	cf cf       	rjmp	.-98     	; 0x10ee <Endpoint_ConfigureEndpointTable+0x38>
    1150:	04 c0       	rjmp	.+8      	; 0x115a <Endpoint_ConfigureEndpointTable+0xa4>
    1152:	81 e0       	ldi	r24, 0x01	; 1
    1154:	03 c0       	rjmp	.+6      	; 0x115c <Endpoint_ConfigureEndpointTable+0xa6>
    1156:	80 e0       	ldi	r24, 0x00	; 0
    1158:	01 c0       	rjmp	.+2      	; 0x115c <Endpoint_ConfigureEndpointTable+0xa6>
    115a:	81 e0       	ldi	r24, 0x01	; 1
    115c:	df 91       	pop	r29
    115e:	cf 91       	pop	r28
    1160:	1f 91       	pop	r17
    1162:	0f 91       	pop	r16
    1164:	ff 90       	pop	r15
    1166:	ef 90       	pop	r14
    1168:	df 90       	pop	r13
    116a:	cf 90       	pop	r12
    116c:	bf 90       	pop	r11
    116e:	08 95       	ret

00001170 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    1170:	80 91 58 02 	lds	r24, 0x0258
    1174:	88 23       	and	r24, r24
    1176:	1c f0       	brlt	.+6      	; 0x117e <Endpoint_ClearStatusStage+0xe>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1178:	e8 ee       	ldi	r30, 0xE8	; 232
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	14 c0       	rjmp	.+40     	; 0x11a6 <Endpoint_ClearStatusStage+0x36>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    117e:	e8 ee       	ldi	r30, 0xE8	; 232
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	04 c0       	rjmp	.+8      	; 0x118c <Endpoint_ClearStatusStage+0x1c>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1184:	80 91 57 02 	lds	r24, 0x0257
    1188:	88 23       	and	r24, r24
    118a:	a9 f0       	breq	.+42     	; 0x11b6 <Endpoint_ClearStatusStage+0x46>
    118c:	80 81       	ld	r24, Z

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    118e:	82 ff       	sbrs	r24, 2
    1190:	f9 cf       	rjmp	.-14     	; 0x1184 <Endpoint_ClearStatusStage+0x14>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1192:	e8 ee       	ldi	r30, 0xE8	; 232
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	80 81       	ld	r24, Z
    1198:	8b 77       	andi	r24, 0x7B	; 123
    119a:	80 83       	st	Z, r24
    119c:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    119e:	80 91 57 02 	lds	r24, 0x0257
    11a2:	88 23       	and	r24, r24
    11a4:	41 f0       	breq	.+16     	; 0x11b6 <Endpoint_ClearStatusStage+0x46>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    11a6:	80 81       	ld	r24, Z

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    11a8:	80 ff       	sbrs	r24, 0
    11aa:	f9 cf       	rjmp	.-14     	; 0x119e <Endpoint_ClearStatusStage+0x2e>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    11ac:	e8 ee       	ldi	r30, 0xE8	; 232
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	80 81       	ld	r24, Z
    11b2:	8e 77       	andi	r24, 0x7E	; 126
    11b4:	80 83       	st	Z, r24
    11b6:	08 95       	ret

000011b8 <Endpoint_WaitUntilReady>:
	}
}

#if !defined(CONTROL_ONLY_DEVICE)
uint8_t Endpoint_WaitUntilReady(void)
{
    11b8:	0f 93       	push	r16
    11ba:	1f 93       	push	r17
    11bc:	cf 93       	push	r28
    11be:	df 93       	push	r29
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    11c0:	20 91 e4 00 	lds	r18, 0x00E4
    11c4:	30 91 e5 00 	lds	r19, 0x00E5
    11c8:	65 e6       	ldi	r22, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    11ca:	ac ee       	ldi	r26, 0xEC	; 236
    11cc:	b0 e0       	ldi	r27, 0x00	; 0
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    11ce:	e8 ee       	ldi	r30, 0xE8	; 232
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    11d2:	0b ee       	ldi	r16, 0xEB	; 235
    11d4:	10 e0       	ldi	r17, 0x00	; 0
    11d6:	44 ee       	ldi	r20, 0xE4	; 228
    11d8:	50 e0       	ldi	r21, 0x00	; 0
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    11da:	8c 91       	ld	r24, X
    11dc:	80 fd       	sbrc	r24, 0
    11de:	21 c0       	rjmp	.+66     	; 0x1222 <Endpoint_WaitUntilReady+0x6a>
    11e0:	24 c0       	rjmp	.+72     	; 0x122a <Endpoint_WaitUntilReady+0x72>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    11e2:	80 91 57 02 	lds	r24, 0x0257

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    11e6:	88 23       	and	r24, r24
    11e8:	81 f0       	breq	.+32     	; 0x120a <Endpoint_WaitUntilReady+0x52>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    11ea:	85 30       	cpi	r24, 0x05	; 5
    11ec:	81 f0       	breq	.+32     	; 0x120e <Endpoint_WaitUntilReady+0x56>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    11ee:	e8 01       	movw	r28, r16
    11f0:	88 81       	ld	r24, Y
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    11f2:	85 fd       	sbrc	r24, 5
    11f4:	0e c0       	rjmp	.+28     	; 0x1212 <Endpoint_WaitUntilReady+0x5a>
    11f6:	ea 01       	movw	r28, r20
    11f8:	88 81       	ld	r24, Y
    11fa:	99 81       	ldd	r25, Y+1	; 0x01
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    11fc:	28 17       	cp	r18, r24
    11fe:	39 07       	cpc	r19, r25
    1200:	61 f3       	breq	.-40     	; 0x11da <Endpoint_WaitUntilReady+0x22>
    1202:	61 50       	subi	r22, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1204:	41 f0       	breq	.+16     	; 0x1216 <Endpoint_WaitUntilReady+0x5e>
    1206:	9c 01       	movw	r18, r24
    1208:	e8 cf       	rjmp	.-48     	; 0x11da <Endpoint_WaitUntilReady+0x22>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    120a:	82 e0       	ldi	r24, 0x02	; 2
    120c:	12 c0       	rjmp	.+36     	; 0x1232 <Endpoint_WaitUntilReady+0x7a>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    120e:	83 e0       	ldi	r24, 0x03	; 3
    1210:	10 c0       	rjmp	.+32     	; 0x1232 <Endpoint_WaitUntilReady+0x7a>
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    1212:	81 e0       	ldi	r24, 0x01	; 1
    1214:	0e c0       	rjmp	.+28     	; 0x1232 <Endpoint_WaitUntilReady+0x7a>
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
    1216:	84 e0       	ldi	r24, 0x04	; 4
    1218:	0c c0       	rjmp	.+24     	; 0x1232 <Endpoint_WaitUntilReady+0x7a>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    121a:	80 e0       	ldi	r24, 0x00	; 0
    121c:	0a c0       	rjmp	.+20     	; 0x1232 <Endpoint_WaitUntilReady+0x7a>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
    121e:	80 e0       	ldi	r24, 0x00	; 0
    1220:	08 c0       	rjmp	.+16     	; 0x1232 <Endpoint_WaitUntilReady+0x7a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1222:	80 81       	ld	r24, Z

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    1224:	80 ff       	sbrs	r24, 0
    1226:	dd cf       	rjmp	.-70     	; 0x11e2 <Endpoint_WaitUntilReady+0x2a>
    1228:	f8 cf       	rjmp	.-16     	; 0x121a <Endpoint_WaitUntilReady+0x62>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    122a:	80 81       	ld	r24, Z
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    122c:	82 ff       	sbrs	r24, 2
    122e:	d9 cf       	rjmp	.-78     	; 0x11e2 <Endpoint_WaitUntilReady+0x2a>
    1230:	f6 cf       	rjmp	.-20     	; 0x121e <Endpoint_WaitUntilReady+0x66>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    1232:	df 91       	pop	r29
    1234:	cf 91       	pop	r28
    1236:	1f 91       	pop	r17
    1238:	0f 91       	pop	r16
    123a:	08 95       	ret

0000123c <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    123c:	3c d0       	rcall	.+120    	; 0x12b6 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    123e:	3e d0       	rcall	.+124    	; 0x12bc <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    1240:	e8 ed       	ldi	r30, 0xD8	; 216
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	80 81       	ld	r24, Z
    1246:	8f 77       	andi	r24, 0x7F	; 127
    1248:	80 83       	st	Z, r24
				USBCON |=  (1 << USBE);
    124a:	80 81       	ld	r24, Z
    124c:	80 68       	ori	r24, 0x80	; 128
    124e:	80 83       	st	Z, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1250:	80 81       	ld	r24, Z
    1252:	8f 7d       	andi	r24, 0xDF	; 223
    1254:	80 83       	st	Z, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1256:	84 e0       	ldi	r24, 0x04	; 4
    1258:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    125a:	86 e0       	ldi	r24, 0x06	; 6
    125c:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    125e:	09 b4       	in	r0, 0x29	; 41
    1260:	00 fe       	sbrs	r0, 0
    1262:	fd cf       	rjmp	.-6      	; 0x125e <USB_ResetInterface+0x22>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    1264:	10 92 57 02 	sts	0x0257, r1
	USB_Device_ConfigurationNumber  = 0;
    1268:	10 92 53 02 	sts	0x0253, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    126c:	10 92 55 02 	sts	0x0255, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    1270:	10 92 54 02 	sts	0x0254, r1
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1274:	42 e0       	ldi	r20, 0x02	; 2
    1276:	60 e0       	ldi	r22, 0x00	; 0
    1278:	80 e0       	ldi	r24, 0x00	; 0
    127a:	b9 de       	rcall	.-654    	; 0xfee <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    127c:	e1 ee       	ldi	r30, 0xE1	; 225
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	80 81       	ld	r24, Z
    1282:	8e 7f       	andi	r24, 0xFE	; 254
    1284:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1286:	e2 ee       	ldi	r30, 0xE2	; 226
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	80 81       	ld	r24, Z
    128c:	81 60       	ori	r24, 0x01	; 1
    128e:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    1290:	80 81       	ld	r24, Z
    1292:	88 60       	ori	r24, 0x08	; 8
    1294:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1296:	e0 ee       	ldi	r30, 0xE0	; 224
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	80 81       	ld	r24, Z
    129c:	8e 7f       	andi	r24, 0xFE	; 254
    129e:	80 83       	st	Z, r24
    12a0:	08 95       	ret

000012a2 <USB_Init>:
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
			#else
				REGCR  &= ~(1 << REGDIS);
    12a2:	e3 e6       	ldi	r30, 0x63	; 99
    12a4:	f0 e0       	ldi	r31, 0x00	; 0
    12a6:	80 81       	ld	r24, Z
    12a8:	8e 7f       	andi	r24, 0xFE	; 254
    12aa:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    12ac:	81 e0       	ldi	r24, 0x01	; 1
    12ae:	80 93 56 02 	sts	0x0256, r24

	USB_ResetInterface();
    12b2:	c4 cf       	rjmp	.-120    	; 0x123c <USB_ResetInterface>
    12b4:	08 95       	ret

000012b6 <USB_INT_DisableAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    12b6:	10 92 e2 00 	sts	0x00E2, r1
    12ba:	08 95       	ret

000012bc <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    12bc:	10 92 e1 00 	sts	0x00E1, r1
    12c0:	08 95       	ret

000012c2 <__vector_11>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    12c2:	1f 92       	push	r1
    12c4:	0f 92       	push	r0
    12c6:	0f b6       	in	r0, 0x3f	; 63
    12c8:	0f 92       	push	r0
    12ca:	11 24       	eor	r1, r1
    12cc:	2f 93       	push	r18
    12ce:	3f 93       	push	r19
    12d0:	4f 93       	push	r20
    12d2:	5f 93       	push	r21
    12d4:	6f 93       	push	r22
    12d6:	7f 93       	push	r23
    12d8:	8f 93       	push	r24
    12da:	9f 93       	push	r25
    12dc:	af 93       	push	r26
    12de:	bf 93       	push	r27
    12e0:	ef 93       	push	r30
    12e2:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    12e4:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    12e8:	82 ff       	sbrs	r24, 2
    12ea:	0a c0       	rjmp	.+20     	; 0x1300 <__vector_11+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    12ec:	80 91 e2 00 	lds	r24, 0x00E2
    12f0:	82 ff       	sbrs	r24, 2
    12f2:	06 c0       	rjmp	.+12     	; 0x1300 <__vector_11+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    12f4:	e1 ee       	ldi	r30, 0xE1	; 225
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	80 81       	ld	r24, Z
    12fa:	8b 7f       	andi	r24, 0xFB	; 251
    12fc:	80 83       	st	Z, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    12fe:	01 d8       	rcall	.-4094   	; 0x302 <EVENT_USB_Device_StartOfFrame>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    1300:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    1304:	80 ff       	sbrs	r24, 0
    1306:	16 c0       	rjmp	.+44     	; 0x1334 <__vector_11+0x72>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    1308:	80 91 e2 00 	lds	r24, 0x00E2
    130c:	80 ff       	sbrs	r24, 0
    130e:	12 c0       	rjmp	.+36     	; 0x1334 <__vector_11+0x72>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1310:	e2 ee       	ldi	r30, 0xE2	; 226
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	80 81       	ld	r24, Z
    1316:	8e 7f       	andi	r24, 0xFE	; 254
    1318:	80 83       	st	Z, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    131a:	80 81       	ld	r24, Z
    131c:	80 61       	ori	r24, 0x10	; 16
    131e:	80 83       	st	Z, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    1320:	e8 ed       	ldi	r30, 0xD8	; 216
    1322:	f0 e0       	ldi	r31, 0x00	; 0
    1324:	80 81       	ld	r24, Z
    1326:	80 62       	ori	r24, 0x20	; 32
    1328:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    132a:	19 bc       	out	0x29, r1	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
    132c:	10 92 57 02 	sts	0x0257, r1
		EVENT_USB_Device_Disconnect();
    1330:	0e 94 6d 01 	call	0x2da	; 0x2da <EVENT_USB_Device_Disconnect>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    1334:	80 91 e1 00 	lds	r24, 0x00E1
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    1338:	84 ff       	sbrs	r24, 4
    133a:	30 c0       	rjmp	.+96     	; 0x139c <__vector_11+0xda>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    133c:	80 91 e2 00 	lds	r24, 0x00E2
    1340:	84 ff       	sbrs	r24, 4
    1342:	2c c0       	rjmp	.+88     	; 0x139c <__vector_11+0xda>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1344:	84 e0       	ldi	r24, 0x04	; 4
    1346:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1348:	86 e0       	ldi	r24, 0x06	; 6
    134a:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    134c:	09 b4       	in	r0, 0x29	; 41
    134e:	00 fe       	sbrs	r0, 0
    1350:	fd cf       	rjmp	.-6      	; 0x134c <__vector_11+0x8a>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1352:	e8 ed       	ldi	r30, 0xD8	; 216
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	80 81       	ld	r24, Z
    1358:	8f 7d       	andi	r24, 0xDF	; 223
    135a:	80 83       	st	Z, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    135c:	e1 ee       	ldi	r30, 0xE1	; 225
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	80 81       	ld	r24, Z
    1362:	8f 7e       	andi	r24, 0xEF	; 239
    1364:	80 83       	st	Z, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    1366:	e2 ee       	ldi	r30, 0xE2	; 226
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	80 81       	ld	r24, Z
    136c:	8f 7e       	andi	r24, 0xEF	; 239
    136e:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1370:	80 81       	ld	r24, Z
    1372:	81 60       	ori	r24, 0x01	; 1
    1374:	80 83       	st	Z, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    1376:	80 91 53 02 	lds	r24, 0x0253
    137a:	88 23       	and	r24, r24
    137c:	21 f0       	breq	.+8      	; 0x1386 <__vector_11+0xc4>
		  USB_DeviceState = DEVICE_STATE_Configured;
    137e:	84 e0       	ldi	r24, 0x04	; 4
    1380:	80 93 57 02 	sts	0x0257, r24
    1384:	09 c0       	rjmp	.+18     	; 0x1398 <__vector_11+0xd6>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1386:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    138a:	88 23       	and	r24, r24
    138c:	14 f4       	brge	.+4      	; 0x1392 <__vector_11+0xd0>
    138e:	83 e0       	ldi	r24, 0x03	; 3
    1390:	01 c0       	rjmp	.+2      	; 0x1394 <__vector_11+0xd2>
    1392:	81 e0       	ldi	r24, 0x01	; 1
    1394:	80 93 57 02 	sts	0x0257, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
    1398:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <EVENT_USB_Device_Connect>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    139c:	80 91 e1 00 	lds	r24, 0x00E1
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    13a0:	83 ff       	sbrs	r24, 3
    13a2:	1e c0       	rjmp	.+60     	; 0x13e0 <__vector_11+0x11e>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    13a4:	80 91 e2 00 	lds	r24, 0x00E2
    13a8:	83 ff       	sbrs	r24, 3
    13aa:	1a c0       	rjmp	.+52     	; 0x13e0 <__vector_11+0x11e>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    13ac:	e1 ee       	ldi	r30, 0xE1	; 225
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	80 81       	ld	r24, Z
    13b2:	87 7f       	andi	r24, 0xF7	; 247
    13b4:	80 83       	st	Z, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    13b6:	82 e0       	ldi	r24, 0x02	; 2
    13b8:	80 93 57 02 	sts	0x0257, r24
		USB_Device_ConfigurationNumber = 0;
    13bc:	10 92 53 02 	sts	0x0253, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    13c0:	80 81       	ld	r24, Z
    13c2:	8e 7f       	andi	r24, 0xFE	; 254
    13c4:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    13c6:	e2 ee       	ldi	r30, 0xE2	; 226
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	80 81       	ld	r24, Z
    13cc:	8e 7f       	andi	r24, 0xFE	; 254
    13ce:	80 83       	st	Z, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    13d0:	80 81       	ld	r24, Z
    13d2:	80 61       	ori	r24, 0x10	; 16
    13d4:	80 83       	st	Z, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    13d6:	42 e0       	ldi	r20, 0x02	; 2
    13d8:	60 e0       	ldi	r22, 0x00	; 0
    13da:	80 e0       	ldi	r24, 0x00	; 0
    13dc:	08 de       	rcall	.-1008   	; 0xfee <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    13de:	76 d1       	rcall	.+748    	; 0x16cc <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    13e0:	ff 91       	pop	r31
    13e2:	ef 91       	pop	r30
    13e4:	bf 91       	pop	r27
    13e6:	af 91       	pop	r26
    13e8:	9f 91       	pop	r25
    13ea:	8f 91       	pop	r24
    13ec:	7f 91       	pop	r23
    13ee:	6f 91       	pop	r22
    13f0:	5f 91       	pop	r21
    13f2:	4f 91       	pop	r20
    13f4:	3f 91       	pop	r19
    13f6:	2f 91       	pop	r18
    13f8:	0f 90       	pop	r0
    13fa:	0f be       	out	0x3f, r0	; 63
    13fc:	0f 90       	pop	r0
    13fe:	1f 90       	pop	r1
    1400:	18 95       	reti

00001402 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1402:	0f 93       	push	r16
    1404:	1f 93       	push	r17
    1406:	cf 93       	push	r28
    1408:	df 93       	push	r29
    140a:	cd b7       	in	r28, 0x3d	; 61
    140c:	de b7       	in	r29, 0x3e	; 62
    140e:	aa 97       	sbiw	r28, 0x2a	; 42
    1410:	0f b6       	in	r0, 0x3f	; 63
    1412:	f8 94       	cli
    1414:	de bf       	out	0x3e, r29	; 62
    1416:	0f be       	out	0x3f, r0	; 63
    1418:	cd bf       	out	0x3d, r28	; 61
    141a:	e8 e5       	ldi	r30, 0x58	; 88
    141c:	f2 e0       	ldi	r31, 0x02	; 2
    141e:	80 e6       	ldi	r24, 0x60	; 96
    1420:	92 e0       	ldi	r25, 0x02	; 2
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1422:	a1 ef       	ldi	r26, 0xF1	; 241
    1424:	b0 e0       	ldi	r27, 0x00	; 0
    1426:	2c 91       	ld	r18, X
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1428:	21 93       	st	Z+, r18
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    142a:	e8 17       	cp	r30, r24
    142c:	f9 07       	cpc	r31, r25
    142e:	d9 f7       	brne	.-10     	; 0x1426 <USB_Device_ProcessControlRequest+0x24>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    1430:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1434:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    1438:	83 ff       	sbrs	r24, 3
    143a:	23 c1       	rjmp	.+582    	; 0x1682 <USB_Device_ProcessControlRequest+0x280>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    143c:	30 91 58 02 	lds	r19, 0x0258

		switch (USB_ControlRequest.bRequest)
    1440:	20 91 59 02 	lds	r18, 0x0259
    1444:	82 2f       	mov	r24, r18
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	8a 30       	cpi	r24, 0x0A	; 10
    144a:	91 05       	cpc	r25, r1
    144c:	08 f0       	brcs	.+2      	; 0x1450 <USB_Device_ProcessControlRequest+0x4e>
    144e:	19 c1       	rjmp	.+562    	; 0x1682 <USB_Device_ProcessControlRequest+0x280>
    1450:	fc 01       	movw	r30, r24
    1452:	e6 5c       	subi	r30, 0xC6	; 198
    1454:	ff 4f       	sbci	r31, 0xFF	; 255
    1456:	56 c1       	rjmp	.+684    	; 0x1704 <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1458:	30 38       	cpi	r19, 0x80	; 128
    145a:	21 f0       	breq	.+8      	; 0x1464 <USB_Device_ProcessControlRequest+0x62>
    145c:	32 38       	cpi	r19, 0x82	; 130
    145e:	09 f0       	breq	.+2      	; 0x1462 <USB_Device_ProcessControlRequest+0x60>
    1460:	10 c1       	rjmp	.+544    	; 0x1682 <USB_Device_ProcessControlRequest+0x280>
    1462:	08 c0       	rjmp	.+16     	; 0x1474 <USB_Device_ProcessControlRequest+0x72>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    1464:	80 91 54 02 	lds	r24, 0x0254
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    1468:	90 91 55 02 	lds	r25, 0x0255
    146c:	99 23       	and	r25, r25
    146e:	71 f0       	breq	.+28     	; 0x148c <USB_Device_ProcessControlRequest+0x8a>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    1470:	82 60       	ori	r24, 0x02	; 2
    1472:	0c c0       	rjmp	.+24     	; 0x148c <USB_Device_ProcessControlRequest+0x8a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1474:	80 91 5c 02 	lds	r24, 0x025C
    1478:	8f 70       	andi	r24, 0x0F	; 15
    147a:	e9 ee       	ldi	r30, 0xE9	; 233
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1480:	80 91 eb 00 	lds	r24, 0x00EB
    1484:	85 fb       	bst	r24, 5
    1486:	88 27       	eor	r24, r24
    1488:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    148a:	10 82       	st	Z, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    148c:	e8 ee       	ldi	r30, 0xE8	; 232
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	90 81       	ld	r25, Z
    1492:	97 7f       	andi	r25, 0xF7	; 247
    1494:	90 83       	st	Z, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    1496:	a1 ef       	ldi	r26, 0xF1	; 241
    1498:	b0 e0       	ldi	r27, 0x00	; 0
    149a:	8c 93       	st	X, r24
				UEDATX = (Data >> 8);
    149c:	1c 92       	st	X, r1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    149e:	80 81       	ld	r24, Z
    14a0:	8e 77       	andi	r24, 0x7E	; 126
    14a2:	80 83       	st	Z, r24
	Endpoint_ClearSETUP();

	Endpoint_Write_16_LE(CurrentStatus);
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    14a4:	65 de       	rcall	.-822    	; 0x1170 <Endpoint_ClearStatusStage>
    14a6:	ed c0       	rjmp	.+474    	; 0x1682 <USB_Device_ProcessControlRequest+0x280>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    14a8:	33 23       	and	r19, r19
    14aa:	09 f4       	brne	.+2      	; 0x14ae <USB_Device_ProcessControlRequest+0xac>
    14ac:	f9 c0       	rjmp	.+498    	; 0x16a0 <USB_Device_ProcessControlRequest+0x29e>
    14ae:	32 30       	cpi	r19, 0x02	; 2
    14b0:	09 f0       	breq	.+2      	; 0x14b4 <USB_Device_ProcessControlRequest+0xb2>
    14b2:	e7 c0       	rjmp	.+462    	; 0x1682 <USB_Device_ProcessControlRequest+0x280>
    14b4:	fa c0       	rjmp	.+500    	; 0x16aa <USB_Device_ProcessControlRequest+0x2a8>
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    14b6:	81 e0       	ldi	r24, 0x01	; 1
    14b8:	23 30       	cpi	r18, 0x03	; 3
    14ba:	09 f0       	breq	.+2      	; 0x14be <USB_Device_ProcessControlRequest+0xbc>
    14bc:	80 e0       	ldi	r24, 0x00	; 0
    14be:	80 93 55 02 	sts	0x0255, r24
    14c2:	28 c0       	rjmp	.+80     	; 0x1514 <USB_Device_ProcessControlRequest+0x112>
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    14c4:	20 91 5c 02 	lds	r18, 0x025C
    14c8:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    14ca:	09 f4       	brne	.+2      	; 0x14ce <USB_Device_ProcessControlRequest+0xcc>
    14cc:	da c0       	rjmp	.+436    	; 0x1682 <USB_Device_ProcessControlRequest+0x280>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    14ce:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    14d2:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    14d6:	80 ff       	sbrs	r24, 0
    14d8:	1d c0       	rjmp	.+58     	; 0x1514 <USB_Device_ProcessControlRequest+0x112>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    14da:	80 91 59 02 	lds	r24, 0x0259
    14de:	83 30       	cpi	r24, 0x03	; 3
    14e0:	31 f4       	brne	.+12     	; 0x14ee <USB_Device_ProcessControlRequest+0xec>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    14e2:	eb ee       	ldi	r30, 0xEB	; 235
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	80 81       	ld	r24, Z
    14e8:	80 62       	ori	r24, 0x20	; 32
    14ea:	80 83       	st	Z, r24
    14ec:	13 c0       	rjmp	.+38     	; 0x1514 <USB_Device_ProcessControlRequest+0x112>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    14ee:	eb ee       	ldi	r30, 0xEB	; 235
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	80 81       	ld	r24, Z
    14f4:	80 61       	ori	r24, 0x10	; 16
    14f6:	80 83       	st	Z, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    14f8:	81 e0       	ldi	r24, 0x01	; 1
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	02 c0       	rjmp	.+4      	; 0x1502 <USB_Device_ProcessControlRequest+0x100>
    14fe:	88 0f       	add	r24, r24
    1500:	99 1f       	adc	r25, r25
    1502:	2a 95       	dec	r18
    1504:	e2 f7       	brpl	.-8      	; 0x14fe <USB_Device_ProcessControlRequest+0xfc>
    1506:	aa ee       	ldi	r26, 0xEA	; 234
    1508:	b0 e0       	ldi	r27, 0x00	; 0
    150a:	8c 93       	st	X, r24
				UERST = 0;
    150c:	1c 92       	st	X, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    150e:	80 81       	ld	r24, Z
    1510:	88 60       	ori	r24, 0x08	; 8
    1512:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1514:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1518:	e8 ee       	ldi	r30, 0xE8	; 232
    151a:	f0 e0       	ldi	r31, 0x00	; 0
    151c:	80 81       	ld	r24, Z
    151e:	87 7f       	andi	r24, 0xF7	; 247
    1520:	80 83       	st	Z, r24

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1522:	26 de       	rcall	.-948    	; 0x1170 <Endpoint_ClearStatusStage>
    1524:	ae c0       	rjmp	.+348    	; 0x1682 <USB_Device_ProcessControlRequest+0x280>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1526:	31 11       	cpse	r19, r1
    1528:	ac c0       	rjmp	.+344    	; 0x1682 <USB_Device_ProcessControlRequest+0x280>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    152a:	10 91 5a 02 	lds	r17, 0x025A
    152e:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    1530:	e3 ee       	ldi	r30, 0xE3	; 227
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	80 81       	ld	r24, Z
    1536:	80 78       	andi	r24, 0x80	; 128
    1538:	81 2b       	or	r24, r17
    153a:	80 83       	st	Z, r24
    153c:	e8 ee       	ldi	r30, 0xE8	; 232
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	80 81       	ld	r24, Z
    1542:	87 7f       	andi	r24, 0xF7	; 247
    1544:	80 83       	st	Z, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1546:	14 de       	rcall	.-984    	; 0x1170 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1548:	e8 ee       	ldi	r30, 0xE8	; 232
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	80 81       	ld	r24, Z

	while (!(Endpoint_IsINReady()));
    154e:	80 ff       	sbrs	r24, 0
    1550:	fd cf       	rjmp	.-6      	; 0x154c <USB_Device_ProcessControlRequest+0x14a>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;
				
				UDADDR |= (1 << ADDEN);
    1552:	e3 ee       	ldi	r30, 0xE3	; 227
    1554:	f0 e0       	ldi	r31, 0x00	; 0
    1556:	80 81       	ld	r24, Z
    1558:	80 68       	ori	r24, 0x80	; 128
    155a:	80 83       	st	Z, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    155c:	11 23       	and	r17, r17
    155e:	11 f0       	breq	.+4      	; 0x1564 <USB_Device_ProcessControlRequest+0x162>
    1560:	83 e0       	ldi	r24, 0x03	; 3
    1562:	01 c0       	rjmp	.+2      	; 0x1566 <USB_Device_ProcessControlRequest+0x164>
    1564:	82 e0       	ldi	r24, 0x02	; 2
    1566:	80 93 57 02 	sts	0x0257, r24
    156a:	8b c0       	rjmp	.+278    	; 0x1682 <USB_Device_ProcessControlRequest+0x280>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    156c:	30 58       	subi	r19, 0x80	; 128
    156e:	32 30       	cpi	r19, 0x02	; 2
    1570:	08 f0       	brcs	.+2      	; 0x1574 <USB_Device_ProcessControlRequest+0x172>
    1572:	87 c0       	rjmp	.+270    	; 0x1682 <USB_Device_ProcessControlRequest+0x280>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    1574:	80 91 5a 02 	lds	r24, 0x025A
    1578:	90 91 5b 02 	lds	r25, 0x025B
    157c:	8c 3d       	cpi	r24, 0xDC	; 220
    157e:	23 e0       	ldi	r18, 0x03	; 3
    1580:	92 07       	cpc	r25, r18
    1582:	99 f5       	brne	.+102    	; 0x15ea <USB_Device_ProcessControlRequest+0x1e8>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    1584:	83 e0       	ldi	r24, 0x03	; 3
    1586:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    1588:	8a e2       	ldi	r24, 0x2A	; 42
    158a:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    158c:	5f b7       	in	r21, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    158e:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    1590:	de 01       	movw	r26, r28
    1592:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1594:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    1596:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    1598:	41 e2       	ldi	r20, 0x21	; 33
    159a:	e3 2f       	mov	r30, r19
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	40 93 57 00 	sts	0x0057, r20
    15a2:	84 91       	lpm	r24, Z

					if (SerialCharNum & 0x01)
    15a4:	20 ff       	sbrs	r18, 0
    15a6:	03 c0       	rjmp	.+6      	; 0x15ae <USB_Device_ProcessControlRequest+0x1ac>
					{
						SerialByte >>= 4;
    15a8:	82 95       	swap	r24
    15aa:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
    15ac:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    15ae:	8f 70       	andi	r24, 0x0F	; 15

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    15b0:	8a 30       	cpi	r24, 0x0A	; 10
    15b2:	18 f0       	brcs	.+6      	; 0x15ba <USB_Device_ProcessControlRequest+0x1b8>
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	c7 96       	adiw	r24, 0x37	; 55
    15b8:	02 c0       	rjmp	.+4      	; 0x15be <USB_Device_ProcessControlRequest+0x1bc>
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	c0 96       	adiw	r24, 0x30	; 48
    15be:	8d 93       	st	X+, r24
    15c0:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    15c2:	2f 5f       	subi	r18, 0xFF	; 255
    15c4:	24 31       	cpi	r18, 0x14	; 20
    15c6:	49 f7       	brne	.-46     	; 0x159a <USB_Device_ProcessControlRequest+0x198>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    15c8:	5f bf       	out	0x3f, r21	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    15ca:	08 ee       	ldi	r16, 0xE8	; 232
    15cc:	10 e0       	ldi	r17, 0x00	; 0
    15ce:	f8 01       	movw	r30, r16
    15d0:	80 81       	ld	r24, Z
    15d2:	87 7f       	andi	r24, 0xF7	; 247
    15d4:	80 83       	st	Z, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    15d6:	6a e2       	ldi	r22, 0x2A	; 42
    15d8:	70 e0       	ldi	r23, 0x00	; 0
    15da:	ce 01       	movw	r24, r28
    15dc:	01 96       	adiw	r24, 0x01	; 1
    15de:	b1 db       	rcall	.-2206   	; 0xd42 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    15e0:	f8 01       	movw	r30, r16
    15e2:	80 81       	ld	r24, Z
    15e4:	8b 77       	andi	r24, 0x7B	; 123
    15e6:	80 83       	st	Z, r24
    15e8:	4c c0       	rjmp	.+152    	; 0x1682 <USB_Device_ProcessControlRequest+0x280>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    15ea:	ae 01       	movw	r20, r28
    15ec:	4f 5f       	subi	r20, 0xFF	; 255
    15ee:	5f 4f       	sbci	r21, 0xFF	; 255
    15f0:	60 91 5c 02 	lds	r22, 0x025C
    15f4:	0e 94 de 00 	call	0x1bc	; 0x1bc <CALLBACK_USB_GetDescriptor>
    15f8:	00 97       	sbiw	r24, 0x00	; 0
    15fa:	09 f4       	brne	.+2      	; 0x15fe <USB_Device_ProcessControlRequest+0x1fc>
    15fc:	42 c0       	rjmp	.+132    	; 0x1682 <USB_Device_ProcessControlRequest+0x280>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    15fe:	08 ee       	ldi	r16, 0xE8	; 232
    1600:	10 e0       	ldi	r17, 0x00	; 0
    1602:	f8 01       	movw	r30, r16
    1604:	20 81       	ld	r18, Z
    1606:	27 7f       	andi	r18, 0xF7	; 247
    1608:	20 83       	st	Z, r18
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    160a:	bc 01       	movw	r22, r24
    160c:	89 81       	ldd	r24, Y+1	; 0x01
    160e:	9a 81       	ldd	r25, Y+2	; 0x02
    1610:	77 dc       	rcall	.-1810   	; 0xf00 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1612:	f8 01       	movw	r30, r16
    1614:	80 81       	ld	r24, Z
    1616:	8b 77       	andi	r24, 0x7B	; 123
    1618:	80 83       	st	Z, r24
    161a:	33 c0       	rjmp	.+102    	; 0x1682 <USB_Device_ProcessControlRequest+0x280>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    161c:	30 38       	cpi	r19, 0x80	; 128
    161e:	89 f5       	brne	.+98     	; 0x1682 <USB_Device_ProcessControlRequest+0x280>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1620:	e8 ee       	ldi	r30, 0xE8	; 232
    1622:	f0 e0       	ldi	r31, 0x00	; 0
    1624:	80 81       	ld	r24, Z
    1626:	87 7f       	andi	r24, 0xF7	; 247
    1628:	80 83       	st	Z, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    162a:	80 91 53 02 	lds	r24, 0x0253
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    162e:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1632:	80 81       	ld	r24, Z
    1634:	8e 77       	andi	r24, 0x7E	; 126
    1636:	80 83       	st	Z, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    1638:	9b dd       	rcall	.-1226   	; 0x1170 <Endpoint_ClearStatusStage>
    163a:	23 c0       	rjmp	.+70     	; 0x1682 <USB_Device_ProcessControlRequest+0x280>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    163c:	31 11       	cpse	r19, r1
    163e:	21 c0       	rjmp	.+66     	; 0x1682 <USB_Device_ProcessControlRequest+0x280>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    1640:	80 91 5a 02 	lds	r24, 0x025A
    1644:	82 30       	cpi	r24, 0x02	; 2
    1646:	e8 f4       	brcc	.+58     	; 0x1682 <USB_Device_ProcessControlRequest+0x280>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1648:	e8 ee       	ldi	r30, 0xE8	; 232
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	80 81       	ld	r24, Z
    164e:	87 7f       	andi	r24, 0xF7	; 247
    1650:	80 83       	st	Z, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    1652:	80 91 5a 02 	lds	r24, 0x025A
    1656:	80 93 53 02 	sts	0x0253, r24

	Endpoint_ClearStatusStage();
    165a:	8a dd       	rcall	.-1260   	; 0x1170 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    165c:	80 91 53 02 	lds	r24, 0x0253
    1660:	88 23       	and	r24, r24
    1662:	21 f0       	breq	.+8      	; 0x166c <USB_Device_ProcessControlRequest+0x26a>
	  USB_DeviceState = DEVICE_STATE_Configured;
    1664:	84 e0       	ldi	r24, 0x04	; 4
    1666:	80 93 57 02 	sts	0x0257, r24
    166a:	09 c0       	rjmp	.+18     	; 0x167e <USB_Device_ProcessControlRequest+0x27c>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    166c:	80 91 e3 00 	lds	r24, 0x00E3
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1670:	88 23       	and	r24, r24
    1672:	14 f4       	brge	.+4      	; 0x1678 <USB_Device_ProcessControlRequest+0x276>
    1674:	84 e0       	ldi	r24, 0x04	; 4
    1676:	01 c0       	rjmp	.+2      	; 0x167a <USB_Device_ProcessControlRequest+0x278>
    1678:	81 e0       	ldi	r24, 0x01	; 1
    167a:	80 93 57 02 	sts	0x0257, r24

	EVENT_USB_Device_ConfigurationChanged();
    167e:	0e 94 6e 01 	call	0x2dc	; 0x2dc <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1682:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    1686:	83 ff       	sbrs	r24, 3
    1688:	16 c0       	rjmp	.+44     	; 0x16b6 <USB_Device_ProcessControlRequest+0x2b4>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    168a:	e8 ee       	ldi	r30, 0xE8	; 232
    168c:	f0 e0       	ldi	r31, 0x00	; 0
    168e:	80 81       	ld	r24, Z
    1690:	87 7f       	andi	r24, 0xF7	; 247
    1692:	80 83       	st	Z, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1694:	eb ee       	ldi	r30, 0xEB	; 235
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	80 81       	ld	r24, Z
    169a:	80 62       	ori	r24, 0x20	; 32
    169c:	80 83       	st	Z, r24
    169e:	0b c0       	rjmp	.+22     	; 0x16b6 <USB_Device_ProcessControlRequest+0x2b4>
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    16a0:	80 91 5a 02 	lds	r24, 0x025A
    16a4:	81 30       	cpi	r24, 0x01	; 1
    16a6:	69 f7       	brne	.-38     	; 0x1682 <USB_Device_ProcessControlRequest+0x280>
    16a8:	06 cf       	rjmp	.-500    	; 0x14b6 <USB_Device_ProcessControlRequest+0xb4>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    16aa:	80 91 5a 02 	lds	r24, 0x025A
    16ae:	88 23       	and	r24, r24
    16b0:	09 f4       	brne	.+2      	; 0x16b4 <USB_Device_ProcessControlRequest+0x2b2>
    16b2:	08 cf       	rjmp	.-496    	; 0x14c4 <USB_Device_ProcessControlRequest+0xc2>
    16b4:	2f cf       	rjmp	.-418    	; 0x1514 <USB_Device_ProcessControlRequest+0x112>
	if (Endpoint_IsSETUPReceived())
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    16b6:	aa 96       	adiw	r28, 0x2a	; 42
    16b8:	0f b6       	in	r0, 0x3f	; 63
    16ba:	f8 94       	cli
    16bc:	de bf       	out	0x3e, r29	; 62
    16be:	0f be       	out	0x3f, r0	; 63
    16c0:	cd bf       	out	0x3d, r28	; 61
    16c2:	df 91       	pop	r29
    16c4:	cf 91       	pop	r28
    16c6:	1f 91       	pop	r17
    16c8:	0f 91       	pop	r16
    16ca:	08 95       	ret

000016cc <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    16cc:	08 95       	ret

000016ce <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    16ce:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    16d0:	80 91 57 02 	lds	r24, 0x0257
    16d4:	88 23       	and	r24, r24
    16d6:	a1 f0       	breq	.+40     	; 0x1700 <USB_USBTask+0x32>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    16d8:	c0 91 e9 00 	lds	r28, 0x00E9
    16dc:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    16de:	80 91 ec 00 	lds	r24, 0x00EC
    16e2:	80 ff       	sbrs	r24, 0
    16e4:	02 c0       	rjmp	.+4      	; 0x16ea <USB_USBTask+0x1c>
    16e6:	80 e8       	ldi	r24, 0x80	; 128
    16e8:	01 c0       	rjmp	.+2      	; 0x16ec <USB_USBTask+0x1e>
    16ea:	80 e0       	ldi	r24, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    16ec:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    16ee:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    16f2:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    16f6:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    16f8:	84 de       	rcall	.-760    	; 0x1402 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    16fa:	cf 70       	andi	r28, 0x0F	; 15
    16fc:	c0 93 e9 00 	sts	0x00E9, r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    1700:	cf 91       	pop	r28
    1702:	08 95       	ret

00001704 <__tablejump2__>:
    1704:	ee 0f       	add	r30, r30
    1706:	ff 1f       	adc	r31, r31

00001708 <__tablejump__>:
    1708:	05 90       	lpm	r0, Z+
    170a:	f4 91       	lpm	r31, Z
    170c:	e0 2d       	mov	r30, r0
    170e:	09 94       	ijmp

00001710 <memcmp>:
    1710:	fb 01       	movw	r30, r22
    1712:	dc 01       	movw	r26, r24
    1714:	04 c0       	rjmp	.+8      	; 0x171e <memcmp+0xe>
    1716:	8d 91       	ld	r24, X+
    1718:	01 90       	ld	r0, Z+
    171a:	80 19       	sub	r24, r0
    171c:	21 f4       	brne	.+8      	; 0x1726 <memcmp+0x16>
    171e:	41 50       	subi	r20, 0x01	; 1
    1720:	50 40       	sbci	r21, 0x00	; 0
    1722:	c8 f7       	brcc	.-14     	; 0x1716 <memcmp+0x6>
    1724:	88 1b       	sub	r24, r24
    1726:	99 0b       	sbc	r25, r25
    1728:	08 95       	ret

0000172a <memcpy>:
    172a:	fb 01       	movw	r30, r22
    172c:	dc 01       	movw	r26, r24
    172e:	02 c0       	rjmp	.+4      	; 0x1734 <memcpy+0xa>
    1730:	01 90       	ld	r0, Z+
    1732:	0d 92       	st	X+, r0
    1734:	41 50       	subi	r20, 0x01	; 1
    1736:	50 40       	sbci	r21, 0x00	; 0
    1738:	d8 f7       	brcc	.-10     	; 0x1730 <memcpy+0x6>
    173a:	08 95       	ret

0000173c <memset>:
    173c:	dc 01       	movw	r26, r24
    173e:	01 c0       	rjmp	.+2      	; 0x1742 <memset+0x6>
    1740:	6d 93       	st	X+, r22
    1742:	41 50       	subi	r20, 0x01	; 1
    1744:	50 40       	sbci	r21, 0x00	; 0
    1746:	e0 f7       	brcc	.-8      	; 0x1740 <memset+0x4>
    1748:	08 95       	ret

0000174a <strcmp>:
    174a:	fb 01       	movw	r30, r22
    174c:	dc 01       	movw	r26, r24
    174e:	8d 91       	ld	r24, X+
    1750:	01 90       	ld	r0, Z+
    1752:	80 19       	sub	r24, r0
    1754:	01 10       	cpse	r0, r1
    1756:	d9 f3       	breq	.-10     	; 0x174e <strcmp+0x4>
    1758:	99 0b       	sbc	r25, r25
    175a:	08 95       	ret

0000175c <fread>:
    175c:	a0 e0       	ldi	r26, 0x00	; 0
    175e:	b0 e0       	ldi	r27, 0x00	; 0
    1760:	e3 eb       	ldi	r30, 0xB3	; 179
    1762:	fb e0       	ldi	r31, 0x0B	; 11
    1764:	6c c0       	rjmp	.+216    	; 0x183e <__prologue_saves__+0xc>
    1766:	6b 01       	movw	r12, r22
    1768:	4a 01       	movw	r8, r20
    176a:	79 01       	movw	r14, r18
    176c:	f9 01       	movw	r30, r18
    176e:	23 81       	ldd	r18, Z+3	; 0x03
    1770:	20 ff       	sbrs	r18, 0
    1772:	19 c0       	rjmp	.+50     	; 0x17a6 <fread+0x4a>
    1774:	c0 e0       	ldi	r28, 0x00	; 0
    1776:	d0 e0       	ldi	r29, 0x00	; 0
    1778:	c8 15       	cp	r28, r8
    177a:	d9 05       	cpc	r29, r9
    177c:	b9 f0       	breq	.+46     	; 0x17ac <fread+0x50>
    177e:	8c 01       	movw	r16, r24
    1780:	5c 01       	movw	r10, r24
    1782:	ac 0c       	add	r10, r12
    1784:	bd 1c       	adc	r11, r13
    1786:	c8 01       	movw	r24, r16
    1788:	0a 15       	cp	r16, r10
    178a:	1b 05       	cpc	r17, r11
    178c:	51 f0       	breq	.+20     	; 0x17a2 <fread+0x46>
    178e:	c7 01       	movw	r24, r14
    1790:	12 d0       	rcall	.+36     	; 0x17b6 <fgetc>
    1792:	8f 3f       	cpi	r24, 0xFF	; 255
    1794:	ff ef       	ldi	r31, 0xFF	; 255
    1796:	9f 07       	cpc	r25, r31
    1798:	49 f0       	breq	.+18     	; 0x17ac <fread+0x50>
    179a:	f8 01       	movw	r30, r16
    179c:	81 93       	st	Z+, r24
    179e:	8f 01       	movw	r16, r30
    17a0:	f2 cf       	rjmp	.-28     	; 0x1786 <fread+0x2a>
    17a2:	21 96       	adiw	r28, 0x01	; 1
    17a4:	e9 cf       	rjmp	.-46     	; 0x1778 <fread+0x1c>
    17a6:	80 e0       	ldi	r24, 0x00	; 0
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	01 c0       	rjmp	.+2      	; 0x17ae <fread+0x52>
    17ac:	ce 01       	movw	r24, r28
    17ae:	cd b7       	in	r28, 0x3d	; 61
    17b0:	de b7       	in	r29, 0x3e	; 62
    17b2:	ec e0       	ldi	r30, 0x0C	; 12
    17b4:	60 c0       	rjmp	.+192    	; 0x1876 <__epilogue_restores__+0xc>

000017b6 <fgetc>:
    17b6:	cf 93       	push	r28
    17b8:	df 93       	push	r29
    17ba:	ec 01       	movw	r28, r24
    17bc:	2b 81       	ldd	r18, Y+3	; 0x03
    17be:	20 ff       	sbrs	r18, 0
    17c0:	33 c0       	rjmp	.+102    	; 0x1828 <fgetc+0x72>
    17c2:	26 ff       	sbrs	r18, 6
    17c4:	0a c0       	rjmp	.+20     	; 0x17da <fgetc+0x24>
    17c6:	2f 7b       	andi	r18, 0xBF	; 191
    17c8:	2b 83       	std	Y+3, r18	; 0x03
    17ca:	8e 81       	ldd	r24, Y+6	; 0x06
    17cc:	9f 81       	ldd	r25, Y+7	; 0x07
    17ce:	01 96       	adiw	r24, 0x01	; 1
    17d0:	9f 83       	std	Y+7, r25	; 0x07
    17d2:	8e 83       	std	Y+6, r24	; 0x06
    17d4:	8a 81       	ldd	r24, Y+2	; 0x02
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	29 c0       	rjmp	.+82     	; 0x182c <fgetc+0x76>
    17da:	22 ff       	sbrs	r18, 2
    17dc:	0f c0       	rjmp	.+30     	; 0x17fc <fgetc+0x46>
    17de:	e8 81       	ld	r30, Y
    17e0:	f9 81       	ldd	r31, Y+1	; 0x01
    17e2:	80 81       	ld	r24, Z
    17e4:	99 27       	eor	r25, r25
    17e6:	87 fd       	sbrc	r24, 7
    17e8:	90 95       	com	r25
    17ea:	00 97       	sbiw	r24, 0x00	; 0
    17ec:	19 f4       	brne	.+6      	; 0x17f4 <fgetc+0x3e>
    17ee:	20 62       	ori	r18, 0x20	; 32
    17f0:	2b 83       	std	Y+3, r18	; 0x03
    17f2:	1a c0       	rjmp	.+52     	; 0x1828 <fgetc+0x72>
    17f4:	31 96       	adiw	r30, 0x01	; 1
    17f6:	f9 83       	std	Y+1, r31	; 0x01
    17f8:	e8 83       	st	Y, r30
    17fa:	0e c0       	rjmp	.+28     	; 0x1818 <fgetc+0x62>
    17fc:	ea 85       	ldd	r30, Y+10	; 0x0a
    17fe:	fb 85       	ldd	r31, Y+11	; 0x0b
    1800:	09 95       	icall
    1802:	97 ff       	sbrs	r25, 7
    1804:	09 c0       	rjmp	.+18     	; 0x1818 <fgetc+0x62>
    1806:	2b 81       	ldd	r18, Y+3	; 0x03
    1808:	01 96       	adiw	r24, 0x01	; 1
    180a:	11 f4       	brne	.+4      	; 0x1810 <fgetc+0x5a>
    180c:	80 e1       	ldi	r24, 0x10	; 16
    180e:	01 c0       	rjmp	.+2      	; 0x1812 <fgetc+0x5c>
    1810:	80 e2       	ldi	r24, 0x20	; 32
    1812:	82 2b       	or	r24, r18
    1814:	8b 83       	std	Y+3, r24	; 0x03
    1816:	08 c0       	rjmp	.+16     	; 0x1828 <fgetc+0x72>
    1818:	2e 81       	ldd	r18, Y+6	; 0x06
    181a:	3f 81       	ldd	r19, Y+7	; 0x07
    181c:	2f 5f       	subi	r18, 0xFF	; 255
    181e:	3f 4f       	sbci	r19, 0xFF	; 255
    1820:	3f 83       	std	Y+7, r19	; 0x07
    1822:	2e 83       	std	Y+6, r18	; 0x06
    1824:	99 27       	eor	r25, r25
    1826:	02 c0       	rjmp	.+4      	; 0x182c <fgetc+0x76>
    1828:	8f ef       	ldi	r24, 0xFF	; 255
    182a:	9f ef       	ldi	r25, 0xFF	; 255
    182c:	df 91       	pop	r29
    182e:	cf 91       	pop	r28
    1830:	08 95       	ret

00001832 <__prologue_saves__>:
    1832:	2f 92       	push	r2
    1834:	3f 92       	push	r3
    1836:	4f 92       	push	r4
    1838:	5f 92       	push	r5
    183a:	6f 92       	push	r6
    183c:	7f 92       	push	r7
    183e:	8f 92       	push	r8
    1840:	9f 92       	push	r9
    1842:	af 92       	push	r10
    1844:	bf 92       	push	r11
    1846:	cf 92       	push	r12
    1848:	df 92       	push	r13
    184a:	ef 92       	push	r14
    184c:	ff 92       	push	r15
    184e:	0f 93       	push	r16
    1850:	1f 93       	push	r17
    1852:	cf 93       	push	r28
    1854:	df 93       	push	r29
    1856:	cd b7       	in	r28, 0x3d	; 61
    1858:	de b7       	in	r29, 0x3e	; 62
    185a:	ca 1b       	sub	r28, r26
    185c:	db 0b       	sbc	r29, r27
    185e:	0f b6       	in	r0, 0x3f	; 63
    1860:	f8 94       	cli
    1862:	de bf       	out	0x3e, r29	; 62
    1864:	0f be       	out	0x3f, r0	; 63
    1866:	cd bf       	out	0x3d, r28	; 61
    1868:	09 94       	ijmp

0000186a <__epilogue_restores__>:
    186a:	2a 88       	ldd	r2, Y+18	; 0x12
    186c:	39 88       	ldd	r3, Y+17	; 0x11
    186e:	48 88       	ldd	r4, Y+16	; 0x10
    1870:	5f 84       	ldd	r5, Y+15	; 0x0f
    1872:	6e 84       	ldd	r6, Y+14	; 0x0e
    1874:	7d 84       	ldd	r7, Y+13	; 0x0d
    1876:	8c 84       	ldd	r8, Y+12	; 0x0c
    1878:	9b 84       	ldd	r9, Y+11	; 0x0b
    187a:	aa 84       	ldd	r10, Y+10	; 0x0a
    187c:	b9 84       	ldd	r11, Y+9	; 0x09
    187e:	c8 84       	ldd	r12, Y+8	; 0x08
    1880:	df 80       	ldd	r13, Y+7	; 0x07
    1882:	ee 80       	ldd	r14, Y+6	; 0x06
    1884:	fd 80       	ldd	r15, Y+5	; 0x05
    1886:	0c 81       	ldd	r16, Y+4	; 0x04
    1888:	1b 81       	ldd	r17, Y+3	; 0x03
    188a:	aa 81       	ldd	r26, Y+2	; 0x02
    188c:	b9 81       	ldd	r27, Y+1	; 0x01
    188e:	ce 0f       	add	r28, r30
    1890:	d1 1d       	adc	r29, r1
    1892:	0f b6       	in	r0, 0x3f	; 63
    1894:	f8 94       	cli
    1896:	de bf       	out	0x3e, r29	; 62
    1898:	0f be       	out	0x3f, r0	; 63
    189a:	cd bf       	out	0x3d, r28	; 61
    189c:	ed 01       	movw	r28, r26
    189e:	08 95       	ret

000018a0 <_exit>:
    18a0:	f8 94       	cli

000018a2 <__stop_program>:
    18a2:	ff cf       	rjmp	.-2      	; 0x18a2 <__stop_program>
