
CLASS_JOYSTICK1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002c  00800100  00001798  0000182c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001798  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000011f  0080012c  0080012c  00001858  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001858  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000720  00000000  00000000  00001888  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000b307  00000000  00000000  00001fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002dde  00000000  00000000  0000d2af  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00014eca  00000000  00000000  0001008d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000128c  00000000  00000000  00024f58  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00017994  00000000  00000000  000261e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00007a70  00000000  00000000  0003db78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001158  00000000  00000000  000455e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000a73e  00000000  00000000  00046740  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	c0 c0       	rjmp	.+384    	; 0x182 <__ctors_end>
       2:	00 00       	nop
       4:	da c0       	rjmp	.+436    	; 0x1ba <__bad_interrupt>
       6:	00 00       	nop
       8:	d8 c0       	rjmp	.+432    	; 0x1ba <__bad_interrupt>
       a:	00 00       	nop
       c:	d6 c0       	rjmp	.+428    	; 0x1ba <__bad_interrupt>
       e:	00 00       	nop
      10:	d4 c0       	rjmp	.+424    	; 0x1ba <__bad_interrupt>
      12:	00 00       	nop
      14:	d2 c0       	rjmp	.+420    	; 0x1ba <__bad_interrupt>
      16:	00 00       	nop
      18:	d0 c0       	rjmp	.+416    	; 0x1ba <__bad_interrupt>
      1a:	00 00       	nop
      1c:	ce c0       	rjmp	.+412    	; 0x1ba <__bad_interrupt>
      1e:	00 00       	nop
      20:	cc c0       	rjmp	.+408    	; 0x1ba <__bad_interrupt>
      22:	00 00       	nop
      24:	ca c0       	rjmp	.+404    	; 0x1ba <__bad_interrupt>
      26:	00 00       	nop
      28:	c8 c0       	rjmp	.+400    	; 0x1ba <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0c 94 85 09 	jmp	0x130a	; 0x130a <__vector_11>
      30:	c4 c0       	rjmp	.+392    	; 0x1ba <__bad_interrupt>
      32:	00 00       	nop
      34:	c2 c0       	rjmp	.+388    	; 0x1ba <__bad_interrupt>
      36:	00 00       	nop
      38:	c0 c0       	rjmp	.+384    	; 0x1ba <__bad_interrupt>
      3a:	00 00       	nop
      3c:	be c0       	rjmp	.+380    	; 0x1ba <__bad_interrupt>
      3e:	00 00       	nop
      40:	bc c0       	rjmp	.+376    	; 0x1ba <__bad_interrupt>
      42:	00 00       	nop
      44:	ba c0       	rjmp	.+372    	; 0x1ba <__bad_interrupt>
      46:	00 00       	nop
      48:	b8 c0       	rjmp	.+368    	; 0x1ba <__bad_interrupt>
      4a:	00 00       	nop
      4c:	b6 c0       	rjmp	.+364    	; 0x1ba <__bad_interrupt>
      4e:	00 00       	nop
      50:	b4 c0       	rjmp	.+360    	; 0x1ba <__bad_interrupt>
      52:	00 00       	nop
      54:	b2 c0       	rjmp	.+356    	; 0x1ba <__bad_interrupt>
      56:	00 00       	nop
      58:	b0 c0       	rjmp	.+352    	; 0x1ba <__bad_interrupt>
      5a:	00 00       	nop
      5c:	86 c2       	rjmp	.+1292   	; 0x56a <__vector_23>
      5e:	00 00       	nop
      60:	ac c0       	rjmp	.+344    	; 0x1ba <__bad_interrupt>
      62:	00 00       	nop
      64:	aa c0       	rjmp	.+340    	; 0x1ba <__bad_interrupt>
      66:	00 00       	nop
      68:	a8 c0       	rjmp	.+336    	; 0x1ba <__bad_interrupt>
      6a:	00 00       	nop
      6c:	a6 c0       	rjmp	.+332    	; 0x1ba <__bad_interrupt>
      6e:	00 00       	nop
      70:	a4 c0       	rjmp	.+328    	; 0x1ba <__bad_interrupt>
      72:	00 00       	nop
      74:	51 0a       	sbc	r5, r17
      76:	79 0a       	sbc	r7, r25
      78:	66 0b       	sbc	r22, r22
      7a:	79 0a       	sbc	r7, r25
      7c:	66 0b       	sbc	r22, r22
      7e:	b8 0a       	sbc	r11, r24
      80:	db 0a       	sbc	r13, r27
      82:	66 0b       	sbc	r22, r22
      84:	33 0b       	sbc	r19, r19
      86:	43 0b       	sbc	r20, r19

00000088 <ProductString>:
      88:	26 03 4a 00 6f 00 79 00 73 00 74 00 69 00 63 00     &.J.o.y.s.t.i.c.
      98:	6b 00 20 00 2b 00 20 00 53 00 65 00 72 00 69 00     k. .+. .S.e.r.i.
      a8:	61 00 6c 00 00 00                                   a.l...

000000ae <ManufacturerString>:
      ae:	22 03 46 00 72 00 61 00 6e 00 63 00 69 00 73 00     ".F.r.a.n.c.i.s.
      be:	20 00 50 00 61 00 70 00 69 00 6e 00 65 00 61 00      .P.a.p.i.n.e.a.
      ce:	75 00 00 00                                         u...

000000d2 <LanguageString>:
      d2:	04 03 09 04                                         ....

000000d6 <ConfigurationDescriptor>:
      d6:	09 02 5f 00 03 01 00 c0 32 08 0b 00 02 02 02 01     .._.....2.......
      e6:	00 09 04 00 00 01 02 02 01 00 05 24 00 10 01 04     ...........$....
      f6:	24 02 06 05 24 06 00 01 07 05 83 03 08 00 ff 09     $...$...........
     106:	04 01 00 02 0a 00 00 00 07 05 02 02 10 00 05 07     ................
     116:	05 81 02 10 00 05 09 04 02 00 01 03 00 00 00 09     ................
     126:	21 11 01 00 01 22 3a 00 07 05 81 03 08 00 05        !....":........

00000135 <DeviceDescriptor>:
     135:	12 01 10 01 ef 02 01 08 eb 03 43 20 01 00 01 02     ..........C ....
     145:	dc 01                                               ..

00000147 <JoystickReport>:
     147:	05 01 09 04 a1 01 09 01 a1 00 09 30 09 31 09 32     ...........0.1.2
     157:	16 9c ff 26 64 00 36 ff ff 46 01 00 95 03 75 08     ...&d.6..F....u.
     167:	81 02 c0 05 09 19 01 29 08 15 00 25 01 75 01 95     .......)...%.u..
     177:	08 81 02 75 00 95 01 81 01 c0 00                    ...u.......

00000182 <__ctors_end>:
     182:	11 24       	eor	r1, r1
     184:	1f be       	out	0x3f, r1	; 63
     186:	cf ef       	ldi	r28, 0xFF	; 255
     188:	d2 e0       	ldi	r29, 0x02	; 2
     18a:	de bf       	out	0x3e, r29	; 62
     18c:	cd bf       	out	0x3d, r28	; 61

0000018e <__do_copy_data>:
     18e:	11 e0       	ldi	r17, 0x01	; 1
     190:	a0 e0       	ldi	r26, 0x00	; 0
     192:	b1 e0       	ldi	r27, 0x01	; 1
     194:	e8 e9       	ldi	r30, 0x98	; 152
     196:	f7 e1       	ldi	r31, 0x17	; 23
     198:	02 c0       	rjmp	.+4      	; 0x19e <__do_copy_data+0x10>
     19a:	05 90       	lpm	r0, Z+
     19c:	0d 92       	st	X+, r0
     19e:	ac 32       	cpi	r26, 0x2C	; 44
     1a0:	b1 07       	cpc	r27, r17
     1a2:	d9 f7       	brne	.-10     	; 0x19a <__do_copy_data+0xc>

000001a4 <__do_clear_bss>:
     1a4:	22 e0       	ldi	r18, 0x02	; 2
     1a6:	ac e2       	ldi	r26, 0x2C	; 44
     1a8:	b1 e0       	ldi	r27, 0x01	; 1
     1aa:	01 c0       	rjmp	.+2      	; 0x1ae <.do_clear_bss_start>

000001ac <.do_clear_bss_loop>:
     1ac:	1d 92       	st	X+, r1

000001ae <.do_clear_bss_start>:
     1ae:	ab 34       	cpi	r26, 0x4B	; 75
     1b0:	b2 07       	cpc	r27, r18
     1b2:	e1 f7       	brne	.-8      	; 0x1ac <.do_clear_bss_loop>
     1b4:	16 d1       	rcall	.+556    	; 0x3e2 <main>
     1b6:	0c 94 ca 0b 	jmp	0x1794	; 0x1794 <_exit>

000001ba <__bad_interrupt>:
     1ba:	22 cf       	rjmp	.-444    	; 0x0 <__vectors>

000001bc <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
     1bc:	29 2f       	mov	r18, r25
     1be:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     1c0:	23 30       	cpi	r18, 0x03	; 3
     1c2:	31 05       	cpc	r19, r1
     1c4:	c9 f0       	breq	.+50     	; 0x1f8 <CALLBACK_USB_GetDescriptor+0x3c>
     1c6:	44 f4       	brge	.+16     	; 0x1d8 <CALLBACK_USB_GetDescriptor+0x1c>
     1c8:	21 30       	cpi	r18, 0x01	; 1
     1ca:	31 05       	cpc	r19, r1
     1cc:	09 f4       	brne	.+2      	; 0x1d0 <CALLBACK_USB_GetDescriptor+0x14>
     1ce:	39 c0       	rjmp	.+114    	; 0x242 <CALLBACK_USB_GetDescriptor+0x86>
     1d0:	22 30       	cpi	r18, 0x02	; 2
     1d2:	31 05       	cpc	r19, r1
     1d4:	61 f0       	breq	.+24     	; 0x1ee <CALLBACK_USB_GetDescriptor+0x32>
     1d6:	06 c0       	rjmp	.+12     	; 0x1e4 <CALLBACK_USB_GetDescriptor+0x28>
     1d8:	21 32       	cpi	r18, 0x21	; 33
     1da:	31 05       	cpc	r19, r1
     1dc:	41 f1       	breq	.+80     	; 0x22e <CALLBACK_USB_GetDescriptor+0x72>
     1de:	22 32       	cpi	r18, 0x22	; 34
     1e0:	31 05       	cpc	r19, r1
     1e2:	51 f1       	breq	.+84     	; 0x238 <CALLBACK_USB_GetDescriptor+0x7c>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     1e4:	80 e0       	ldi	r24, 0x00	; 0
     1e6:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     1e8:	20 e0       	ldi	r18, 0x00	; 0
     1ea:	30 e0       	ldi	r19, 0x00	; 0
     1ec:	33 c0       	rjmp	.+102    	; 0x254 <CALLBACK_USB_GetDescriptor+0x98>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     1ee:	8f e5       	ldi	r24, 0x5F	; 95
     1f0:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     1f2:	26 ed       	ldi	r18, 0xD6	; 214
     1f4:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     1f6:	2e c0       	rjmp	.+92     	; 0x254 <CALLBACK_USB_GetDescriptor+0x98>
     1f8:	99 27       	eor	r25, r25
		case DTYPE_String:
			switch (DescriptorNumber)
     1fa:	81 30       	cpi	r24, 0x01	; 1
     1fc:	91 05       	cpc	r25, r1
     1fe:	59 f0       	breq	.+22     	; 0x216 <CALLBACK_USB_GetDescriptor+0x5a>
     200:	82 30       	cpi	r24, 0x02	; 2
     202:	91 05       	cpc	r25, r1
     204:	71 f0       	breq	.+28     	; 0x222 <CALLBACK_USB_GetDescriptor+0x66>
     206:	89 2b       	or	r24, r25
     208:	09 f5       	brne	.+66     	; 0x24c <CALLBACK_USB_GetDescriptor+0x90>
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     20a:	e2 ed       	ldi	r30, 0xD2	; 210
     20c:	f0 e0       	ldi	r31, 0x00	; 0
     20e:	84 91       	lpm	r24, Z
     210:	90 e0       	ldi	r25, 0x00	; 0
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case STRING_ID_Language:
					Address = &LanguageString;
     212:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
     214:	1f c0       	rjmp	.+62     	; 0x254 <CALLBACK_USB_GetDescriptor+0x98>
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     216:	ee ea       	ldi	r30, 0xAE	; 174
     218:	f0 e0       	ldi	r31, 0x00	; 0
     21a:	84 91       	lpm	r24, Z
     21c:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
     21e:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
     220:	19 c0       	rjmp	.+50     	; 0x254 <CALLBACK_USB_GetDescriptor+0x98>
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     222:	e8 e8       	ldi	r30, 0x88	; 136
     224:	f0 e0       	ldi	r31, 0x00	; 0
     226:	84 91       	lpm	r24, Z
     228:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
     22a:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
     22c:	13 c0       	rjmp	.+38     	; 0x254 <CALLBACK_USB_GetDescriptor+0x98>
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_JoystickHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
     22e:	89 e0       	ldi	r24, 0x09	; 9
     230:	90 e0       	ldi	r25, 0x00	; 0
					break;
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_JoystickHID;
     232:	25 e2       	ldi	r18, 0x25	; 37
     234:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
     236:	0e c0       	rjmp	.+28     	; 0x254 <CALLBACK_USB_GetDescriptor+0x98>
		case HID_DTYPE_Report:
			Address = &JoystickReport;
			Size    = sizeof(JoystickReport);
     238:	8a e3       	ldi	r24, 0x3A	; 58
     23a:	90 e0       	ldi	r25, 0x00	; 0
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_JoystickHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case HID_DTYPE_Report:
			Address = &JoystickReport;
     23c:	27 e4       	ldi	r18, 0x47	; 71
     23e:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(JoystickReport);
			break;
     240:	09 c0       	rjmp	.+18     	; 0x254 <CALLBACK_USB_GetDescriptor+0x98>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     242:	82 e1       	ldi	r24, 0x12	; 18
     244:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     246:	25 e3       	ldi	r18, 0x35	; 53
     248:	31 e0       	ldi	r19, 0x01	; 1
     24a:	04 c0       	rjmp	.+8      	; 0x254 <CALLBACK_USB_GetDescriptor+0x98>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     24c:	80 e0       	ldi	r24, 0x00	; 0
     24e:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     250:	20 e0       	ldi	r18, 0x00	; 0
     252:	30 e0       	ldi	r19, 0x00	; 0
			Address = &JoystickReport;
			Size    = sizeof(JoystickReport);
			break;
	}

	*DescriptorAddress = Address;
     254:	fa 01       	movw	r30, r20
     256:	31 83       	std	Z+1, r19	; 0x01
     258:	20 83       	st	Z, r18
	return Size;
}
     25a:	08 95       	ret

0000025c <SetupHardware>:
	}
}

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
     25c:	cf 93       	push	r28
     25e:	df 93       	push	r29
    /* Disable watchdog if enabled by bootloader/fuses */
    MCUSR &= ~(1 << WDRF);
     260:	84 b7       	in	r24, 0x34	; 52
     262:	87 7f       	andi	r24, 0xF7	; 247
     264:	84 bf       	out	0x34, r24	; 52
    wdt_disable();
     266:	88 e1       	ldi	r24, 0x18	; 24
     268:	0f b6       	in	r0, 0x3f	; 63
     26a:	f8 94       	cli
     26c:	80 93 60 00 	sts	0x0060, r24
     270:	10 92 60 00 	sts	0x0060, r1
     274:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     276:	8f ec       	ldi	r24, 0xCF	; 207
     278:	90 e0       	ldi	r25, 0x00	; 0
     27a:	90 93 cd 00 	sts	0x00CD, r25
     27e:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     282:	86 e0       	ldi	r24, 0x06	; 6
     284:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     288:	82 e0       	ldi	r24, 0x02	; 2
     28a:	80 93 c8 00 	sts	0x00C8, r24
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     28e:	c9 ec       	ldi	r28, 0xC9	; 201
     290:	d0 e0       	ldi	r29, 0x00	; 0
     292:	88 e1       	ldi	r24, 0x18	; 24
     294:	88 83       	st	Y, r24

				DDRD  |= (1 << 3);
     296:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     298:	5a 9a       	sbi	0x0b, 2	; 11

    /* Hardware Initialization */
    Serial_Init(9600, true);
    LEDs_Init();
    USB_Init();
     29a:	0e 94 75 09 	call	0x12ea	; 0x12ea <USB_Init>

	//! Serial Port Default INIT
    UCSR1B = ((1 << RXCIE1) | (1 << TXEN1) | (1 << RXEN1));
     29e:	88 e9       	ldi	r24, 0x98	; 152
     2a0:	88 83       	st	Y, r24
}
     2a2:	df 91       	pop	r29
     2a4:	cf 91       	pop	r28
     2a6:	08 95       	ret

000002a8 <EVENT_USB_Device_Connect>:

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
     2a8:	08 95       	ret

000002aa <EVENT_USB_Device_Disconnect>:
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
     2aa:	08 95       	ret

000002ac <EVENT_USB_Device_ConfigurationChanged>:
void EVENT_USB_Device_ConfigurationChanged(void)
{
	
	bool config_success = true;
	
	config_success &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
     2ac:	80 e0       	ldi	r24, 0x00	; 0
     2ae:	91 e0       	ldi	r25, 0x01	; 1
     2b0:	95 d1       	rcall	.+810    	; 0x5dc <CDC_Device_ConfigureEndpoints>
	config_success &= HID_Device_ConfigureEndpoints(&Joystick_HID_Interface);
     2b2:	8b e1       	ldi	r24, 0x1B	; 27
     2b4:	91 e0       	ldi	r25, 0x01	; 1
     2b6:	3b d4       	rcall	.+2166   	; 0xb2e <HID_Device_ConfigureEndpoints>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
     2b8:	e2 ee       	ldi	r30, 0xE2	; 226
     2ba:	f0 e0       	ldi	r31, 0x00	; 0
     2bc:	80 81       	ld	r24, Z
     2be:	84 60       	ori	r24, 0x04	; 4
     2c0:	80 83       	st	Z, r24
     2c2:	08 95       	ret

000002c4 <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
     2c4:	80 e0       	ldi	r24, 0x00	; 0
     2c6:	91 e0       	ldi	r25, 0x01	; 1
     2c8:	4f d2       	rcall	.+1182   	; 0x768 <CDC_Device_ProcessControlRequest>
	HID_Device_ProcessControlRequest(&Joystick_HID_Interface);
     2ca:	8b e1       	ldi	r24, 0x1B	; 27
     2cc:	91 e0       	ldi	r25, 0x01	; 1
     2ce:	eb c2       	rjmp	.+1494   	; 0x8a6 <HID_Device_ProcessControlRequest>
     2d0:	08 95       	ret

000002d2 <EVENT_USB_Device_StartOfFrame>:
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
     2d2:	80 91 29 01 	lds	r24, 0x0129
     2d6:	90 91 2a 01 	lds	r25, 0x012A
     2da:	00 97       	sbiw	r24, 0x00	; 0
     2dc:	29 f0       	breq	.+10     	; 0x2e8 <EVENT_USB_Device_StartOfFrame+0x16>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
     2de:	01 97       	sbiw	r24, 0x01	; 1
     2e0:	90 93 2a 01 	sts	0x012A, r25
     2e4:	80 93 29 01 	sts	0x0129, r24
     2e8:	08 95       	ret

000002ea <CALLBACK_HID_Device_ProcessHIDReport>:
void CALLBACK_HID_Device_ProcessHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                          const uint8_t ReportID,
                                          const uint8_t ReportType,
                                          const void* ReportData,
                                          const uint16_t ReportSize)
{
     2ea:	08 95       	ret

000002ec <RINGBUFF_Check_Packet_Type>:
}

//! Custom check function
bool RINGBUFF_Check_Packet_Type(uint8_t type){
	
	if(USARTtoUSB_Buffer.Out[0] == type){
     2ec:	e0 91 3b 02 	lds	r30, 0x023B
     2f0:	f0 91 3c 02 	lds	r31, 0x023C
     2f4:	91 e0       	ldi	r25, 0x01	; 1
     2f6:	20 81       	ld	r18, Z
     2f8:	28 13       	cpse	r18, r24
     2fa:	90 e0       	ldi	r25, 0x00	; 0
		return true;
	}
	return false;
}
     2fc:	89 2f       	mov	r24, r25
     2fe:	08 95       	ret

00000300 <CDC_Device_Serial_Task>:
{
	// Unused (but mandatory for the HID class driver) in this demo, since there are no Host->Device reports
}

//! Custom Task Engine
void CDC_Device_Serial_Task(USB_ClassInfo_CDC_Device_t* ptr){
     300:	af 92       	push	r10
     302:	bf 92       	push	r11
     304:	cf 92       	push	r12
     306:	df 92       	push	r13
     308:	ef 92       	push	r14
     30a:	ff 92       	push	r15
     30c:	0f 93       	push	r16
     30e:	1f 93       	push	r17
     310:	cf 93       	push	r28
     312:	df 93       	push	r29
     314:	ec 01       	movw	r28, r24
	//! We check if there is a serial string that needs to be written
	//! The data format should be the following:
	//!		- HEADER 
	//!		- LENGTH
	//!		- DATA*
	if(RINGBUFF_Check_Packet_Type(SERIAL_DATA_HEADER)){
     316:	8b e2       	ldi	r24, 0x2B	; 43
     318:	e9 df       	rcall	.-46     	; 0x2ec <RINGBUFF_Check_Packet_Type>
     31a:	88 23       	and	r24, r24
     31c:	09 f4       	brne	.+2      	; 0x320 <CDC_Device_Serial_Task+0x20>
     31e:	56 c0       	rjmp	.+172    	; 0x3cc <CDC_Device_Serial_Task+0xcc>
		 *
		 *  \return Next data element stored in the buffer
		 */
		static inline RingBuff_Data_t RingBuffer_Remove(RingBuff_t* const Buffer)
		{
			RingBuff_Data_t Data = *Buffer->Out;
     320:	eb e3       	ldi	r30, 0x3B	; 59
     322:	f2 e0       	ldi	r31, 0x02	; 2
			
			if (++Buffer->Out == &Buffer->Buffer[BUFFER_SIZE])
     324:	80 81       	ld	r24, Z
     326:	91 81       	ldd	r25, Z+1	; 0x01
     328:	01 96       	adiw	r24, 0x01	; 1
     32a:	91 83       	std	Z+1, r25	; 0x01
     32c:	80 83       	st	Z, r24
     32e:	89 53       	subi	r24, 0x39	; 57
     330:	92 40       	sbci	r25, 0x02	; 2
     332:	31 f4       	brne	.+12     	; 0x340 <CDC_Device_Serial_Task+0x40>
			  Buffer->Out = Buffer->Buffer;
     334:	8a e3       	ldi	r24, 0x3A	; 58
     336:	91 e0       	ldi	r25, 0x01	; 1
     338:	90 93 3c 02 	sts	0x023C, r25
     33c:	80 93 3b 02 	sts	0x023B, r24

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     340:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     342:	f8 94       	cli
			{
				Buffer->Count--;
     344:	ed e3       	ldi	r30, 0x3D	; 61
     346:	f2 e0       	ldi	r31, 0x02	; 2
     348:	90 81       	ld	r25, Z
     34a:	91 50       	subi	r25, 0x01	; 1
     34c:	90 83       	st	Z, r25
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     34e:	8f bf       	out	0x3f, r24	; 63
		 *
		 *  \return Next data element stored in the buffer
		 */
		static inline RingBuff_Data_t RingBuffer_Remove(RingBuff_t* const Buffer)
		{
			RingBuff_Data_t Data = *Buffer->Out;
     350:	ab e3       	ldi	r26, 0x3B	; 59
     352:	b2 e0       	ldi	r27, 0x02	; 2
     354:	ed 91       	ld	r30, X+
     356:	fc 91       	ld	r31, X
     358:	11 97       	sbiw	r26, 0x01	; 1
     35a:	b1 90       	ld	r11, Z+
			
			if (++Buffer->Out == &Buffer->Buffer[BUFFER_SIZE])
     35c:	ed 93       	st	X+, r30
     35e:	fc 93       	st	X, r31
     360:	e9 53       	subi	r30, 0x39	; 57
     362:	f2 40       	sbci	r31, 0x02	; 2
     364:	31 f4       	brne	.+12     	; 0x372 <CDC_Device_Serial_Task+0x72>
			  Buffer->Out = Buffer->Buffer;
     366:	8a e3       	ldi	r24, 0x3A	; 58
     368:	91 e0       	ldi	r25, 0x01	; 1
     36a:	90 93 3c 02 	sts	0x023C, r25
     36e:	80 93 3b 02 	sts	0x023B, r24

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     372:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     374:	f8 94       	cli
			{
				Buffer->Count--;
     376:	ed e3       	ldi	r30, 0x3D	; 61
     378:	f2 e0       	ldi	r31, 0x02	; 2
     37a:	90 81       	ld	r25, Z
     37c:	91 50       	subi	r25, 0x01	; 1
     37e:	90 83       	st	Z, r25
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     380:	8f bf       	out	0x3f, r24	; 63
		
		//! Remove the length of the data to send
		uint8_t length = RingBuffer_Remove(&USARTtoUSB_Buffer);
		
		//! We write the serial string
		for(register uint8_t i = 0; i < length; i ++){
     382:	bb 20       	and	r11, r11
     384:	19 f1       	breq	.+70     	; 0x3cc <CDC_Device_Serial_Task+0xcc>
     386:	a1 2c       	mov	r10, r1
		 *
		 *  \return Next data element stored in the buffer
		 */
		static inline RingBuff_Data_t RingBuffer_Remove(RingBuff_t* const Buffer)
		{
			RingBuff_Data_t Data = *Buffer->Out;
     388:	0b e3       	ldi	r16, 0x3B	; 59
     38a:	12 e0       	ldi	r17, 0x02	; 2
			
			if (++Buffer->Out == &Buffer->Buffer[BUFFER_SIZE])
			  Buffer->Out = Buffer->Buffer;
     38c:	0f 2e       	mov	r0, r31
     38e:	fa e3       	ldi	r31, 0x3A	; 58
     390:	cf 2e       	mov	r12, r31
     392:	f1 e0       	ldi	r31, 0x01	; 1
     394:	df 2e       	mov	r13, r31
     396:	f0 2d       	mov	r31, r0

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
			{
				Buffer->Count--;
     398:	7f 01       	movw	r14, r30
		 *
		 *  \return Next data element stored in the buffer
		 */
		static inline RingBuff_Data_t RingBuffer_Remove(RingBuff_t* const Buffer)
		{
			RingBuff_Data_t Data = *Buffer->Out;
     39a:	d8 01       	movw	r26, r16
     39c:	ed 91       	ld	r30, X+
     39e:	fc 91       	ld	r31, X
     3a0:	11 97       	sbiw	r26, 0x01	; 1
     3a2:	61 91       	ld	r22, Z+
			
			if (++Buffer->Out == &Buffer->Buffer[BUFFER_SIZE])
     3a4:	ed 93       	st	X+, r30
     3a6:	fc 93       	st	X, r31
     3a8:	e9 53       	subi	r30, 0x39	; 57
     3aa:	f2 40       	sbci	r31, 0x02	; 2
     3ac:	19 f4       	brne	.+6      	; 0x3b4 <CDC_Device_Serial_Task+0xb4>
			  Buffer->Out = Buffer->Buffer;
     3ae:	f8 01       	movw	r30, r16
     3b0:	d1 82       	std	Z+1, r13	; 0x01
     3b2:	c0 82       	st	Z, r12

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     3b4:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     3b6:	f8 94       	cli
			{
				Buffer->Count--;
     3b8:	d7 01       	movw	r26, r14
     3ba:	9c 91       	ld	r25, X
     3bc:	91 50       	subi	r25, 0x01	; 1
     3be:	9c 93       	st	X, r25
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     3c0:	8f bf       	out	0x3f, r24	; 63
			CDC_Device_SendByte(ptr, (uint8_t)RingBuffer_Remove(&USARTtoUSB_Buffer));
     3c2:	ce 01       	movw	r24, r28
     3c4:	2d d1       	rcall	.+602    	; 0x620 <CDC_Device_SendByte>
		
		//! Remove the length of the data to send
		uint8_t length = RingBuffer_Remove(&USARTtoUSB_Buffer);
		
		//! We write the serial string
		for(register uint8_t i = 0; i < length; i ++){
     3c6:	a3 94       	inc	r10
     3c8:	ab 10       	cpse	r10, r11
     3ca:	e7 cf       	rjmp	.-50     	; 0x39a <CDC_Device_Serial_Task+0x9a>
			CDC_Device_SendByte(ptr, (uint8_t)RingBuffer_Remove(&USARTtoUSB_Buffer));
		}
	}
}
     3cc:	df 91       	pop	r29
     3ce:	cf 91       	pop	r28
     3d0:	1f 91       	pop	r17
     3d2:	0f 91       	pop	r16
     3d4:	ff 90       	pop	r15
     3d6:	ef 90       	pop	r14
     3d8:	df 90       	pop	r13
     3da:	cf 90       	pop	r12
     3dc:	bf 90       	pop	r11
     3de:	af 90       	pop	r10
     3e0:	08 95       	ret

000003e2 <main>:
 */
int main(void)
{	
	
	//! Setup Hardware
	SetupHardware();
     3e2:	3c df       	rcall	.-392    	; 0x25c <SetupHardware>
		 *
		 *  \param[out] Buffer  Pointer to a ring buffer structure to initialize
		 */
		static inline void RingBuffer_InitBuffer(RingBuff_t* const Buffer)
		{
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     3e4:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     3e6:	f8 94       	cli
			{
				Buffer->In  = Buffer->Buffer;
     3e8:	8a e3       	ldi	r24, 0x3A	; 58
     3ea:	91 e0       	ldi	r25, 0x01	; 1
     3ec:	90 93 3a 02 	sts	0x023A, r25
     3f0:	80 93 39 02 	sts	0x0239, r24
				Buffer->Out = Buffer->Buffer;
     3f4:	90 93 3c 02 	sts	0x023C, r25
     3f8:	80 93 3b 02 	sts	0x023B, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     3fc:	2f bf       	out	0x3f, r18	; 63
	
	//! Init the buffer
    RingBuffer_InitBuffer(&USARTtoUSB_Buffer);

	//! Enable the interrupt globally
    sei();
     3fe:	78 94       	sei
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
     400:	c8 ec       	ldi	r28, 0xC8	; 200
     402:	d0 e0       	ldi	r29, 0x00	; 0
				UDR1 = DataByte;
     404:	0e ec       	ldi	r16, 0xCE	; 206
     406:	10 e0       	ldi	r17, 0x00	; 0

    for (;;) {
		
		//! We check to see if there is a byte in the host -> client buffer
		int16_t rx_byte = CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
     408:	80 e0       	ldi	r24, 0x00	; 0
     40a:	91 e0       	ldi	r25, 0x01	; 1
     40c:	75 d1       	rcall	.+746    	; 0x6f8 <CDC_Device_ReceiveByte>
		
		//! If this is real data, 
		if(!(rx_byte < 0)){
     40e:	99 23       	and	r25, r25
     410:	2c f0       	brlt	.+10     	; 0x41c <main+0x3a>
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
     412:	28 81       	ld	r18, Y
     414:	25 ff       	sbrs	r18, 5
     416:	fd cf       	rjmp	.-6      	; 0x412 <main+0x30>
				UDR1 = DataByte;
     418:	f8 01       	movw	r30, r16
     41a:	80 83       	st	Z, r24
			//! We send the byte to the ATMEGA328 uC
			Serial_SendByte(rx_byte);
		}
		
		//! CDC Device Serial Task
		CDC_Device_Serial_Task(&VirtualSerial_CDC_Interface);
     41c:	80 e0       	ldi	r24, 0x00	; 0
     41e:	91 e0       	ldi	r25, 0x01	; 1
     420:	6f df       	rcall	.-290    	; 0x300 <CDC_Device_Serial_Task>
		
		//! CDC Device USB Task
		CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
     422:	80 e0       	ldi	r24, 0x00	; 0
     424:	91 e0       	ldi	r25, 0x01	; 1
     426:	52 d1       	rcall	.+676    	; 0x6cc <CDC_Device_USBTask>
		
		//! HID Device Task
	    HID_Device_USBTask(&Joystick_HID_Interface);
     428:	8b e1       	ldi	r24, 0x1B	; 27
     42a:	91 e0       	ldi	r25, 0x01	; 1
     42c:	94 d3       	rcall	.+1832   	; 0xb56 <HID_Device_USBTask>
		
		//! USB Task
	    USB_USBTask();
     42e:	0e 94 8c 0b 	call	0x1718	; 0x1718 <USB_USBTask>
	}
     432:	ea cf       	rjmp	.-44     	; 0x408 <main+0x26>

00000434 <CALLBACK_HID_Device_CreateHIDReport>:
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                         uint8_t* const ReportID,
                                         const uint8_t ReportType,
                                         void* ReportData,
                                         uint16_t* const ReportSize)
{
     434:	af 92       	push	r10
     436:	bf 92       	push	r11
     438:	df 92       	push	r13
     43a:	ef 92       	push	r14
     43c:	ff 92       	push	r15
     43e:	0f 93       	push	r16
     440:	1f 93       	push	r17
     442:	cf 93       	push	r28
     444:	df 93       	push	r29
     446:	cd b7       	in	r28, 0x3d	; 61
     448:	de b7       	in	r29, 0x3e	; 62
     44a:	27 97       	sbiw	r28, 0x07	; 7
     44c:	0f b6       	in	r0, 0x3f	; 63
     44e:	f8 94       	cli
     450:	de bf       	out	0x3e, r29	; 62
     452:	0f be       	out	0x3f, r0	; 63
     454:	cd bf       	out	0x3d, r28	; 61
     456:	79 01       	movw	r14, r18
	int ind;
	
    USB_JoystickReport_Data_t *reportp = (USB_JoystickReport_Data_t*)ReportData;
	
	//! We check to see if we need to send a string first...
	if(RINGBUFF_Check_Packet_Type(SERIAL_DATA_HEADER)){
     458:	8b e2       	ldi	r24, 0x2B	; 43
     45a:	48 df       	rcall	.-368    	; 0x2ec <RINGBUFF_Check_Packet_Type>
     45c:	88 23       	and	r24, r24
     45e:	19 f0       	breq	.+6      	; 0x466 <CALLBACK_HID_Device_CreateHIDReport+0x32>
		CDC_Device_Serial_Task(&VirtualSerial_CDC_Interface);
     460:	80 e0       	ldi	r24, 0x00	; 0
     462:	91 e0       	ldi	r25, 0x01	; 1
     464:	4d df       	rcall	.-358    	; 0x300 <CDC_Device_Serial_Task>
		 */
		static inline RingBuff_Count_t RingBuffer_GetCount(RingBuff_t* const Buffer)
		{
			RingBuff_Count_t Count;
			
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     466:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     468:	f8 94       	cli
			{
				Count = Buffer->Count;
     46a:	80 91 3d 02 	lds	r24, 0x023D
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     46e:	9f bf       	out	0x3f, r25	; 63
	}
	
	RingBuff_Count_t BufferCount = RingBuffer_GetCount(&USARTtoUSB_Buffer);

	if (BufferCount >= 8) {
     470:	88 30       	cpi	r24, 0x08	; 8
     472:	08 f4       	brcc	.+2      	; 0x476 <CALLBACK_HID_Device_CreateHIDReport+0x42>
     474:	5c c0       	rjmp	.+184    	; 0x52e <CALLBACK_HID_Device_CreateHIDReport+0xfa>
		for (ind = 0; ind < sizeof(joyReport); ind ++) {
     476:	40 e0       	ldi	r20, 0x00	; 0
     478:	50 e0       	ldi	r21, 0x00	; 0
		CDC_Device_Serial_Task(&VirtualSerial_CDC_Interface);
	}
	
	RingBuff_Count_t BufferCount = RingBuffer_GetCount(&USARTtoUSB_Buffer);

	if (BufferCount >= 8) {
     47a:	80 e0       	ldi	r24, 0x00	; 0
     47c:	90 e0       	ldi	r25, 0x00	; 0
		 *
		 *  \return Next data element stored in the buffer
		 */
		static inline RingBuff_Data_t RingBuffer_Remove(RingBuff_t* const Buffer)
		{
			RingBuff_Data_t Data = *Buffer->Out;
     47e:	ab e3       	ldi	r26, 0x3B	; 59
     480:	b2 e0       	ldi	r27, 0x02	; 2
			
			if (++Buffer->Out == &Buffer->Buffer[BUFFER_SIZE])
			  Buffer->Out = Buffer->Buffer;
     482:	0f 2e       	mov	r0, r31
     484:	fa e3       	ldi	r31, 0x3A	; 58
     486:	af 2e       	mov	r10, r31
     488:	f1 e0       	ldi	r31, 0x01	; 1
     48a:	bf 2e       	mov	r11, r31
     48c:	f0 2d       	mov	r31, r0

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
			{
				Buffer->Count--;
     48e:	2d e3       	ldi	r18, 0x3D	; 61
     490:	32 e0       	ldi	r19, 0x02	; 2
		for (ind = 0; ind < sizeof(joyReport); ind ++) {
			((uint8_t *)&newReport)[ind] = RingBuffer_Remove(&USARTtoUSB_Buffer);
     492:	61 e0       	ldi	r22, 0x01	; 1
     494:	70 e0       	ldi	r23, 0x00	; 0
     496:	6c 0f       	add	r22, r28
     498:	7d 1f       	adc	r23, r29
     49a:	46 0f       	add	r20, r22
     49c:	57 1f       	adc	r21, r23
		 *
		 *  \return Next data element stored in the buffer
		 */
		static inline RingBuff_Data_t RingBuffer_Remove(RingBuff_t* const Buffer)
		{
			RingBuff_Data_t Data = *Buffer->Out;
     49e:	ed 91       	ld	r30, X+
     4a0:	fc 91       	ld	r31, X
     4a2:	11 97       	sbiw	r26, 0x01	; 1
     4a4:	d1 90       	ld	r13, Z+
			
			if (++Buffer->Out == &Buffer->Buffer[BUFFER_SIZE])
     4a6:	11 96       	adiw	r26, 0x01	; 1
     4a8:	fc 93       	st	X, r31
     4aa:	ee 93       	st	-X, r30
     4ac:	e9 53       	subi	r30, 0x39	; 57
     4ae:	f2 40       	sbci	r31, 0x02	; 2
     4b0:	19 f4       	brne	.+6      	; 0x4b8 <CALLBACK_HID_Device_CreateHIDReport+0x84>
			  Buffer->Out = Buffer->Buffer;
     4b2:	11 96       	adiw	r26, 0x01	; 1
     4b4:	bc 92       	st	X, r11
     4b6:	ae 92       	st	-X, r10

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     4b8:	6f b7       	in	r22, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     4ba:	f8 94       	cli
			{
				Buffer->Count--;
     4bc:	f9 01       	movw	r30, r18
     4be:	70 81       	ld	r23, Z
     4c0:	71 50       	subi	r23, 0x01	; 1
     4c2:	70 83       	st	Z, r23
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     4c4:	6f bf       	out	0x3f, r22	; 63
     4c6:	fa 01       	movw	r30, r20
     4c8:	d0 82       	st	Z, r13
	}
	
	RingBuff_Count_t BufferCount = RingBuffer_GetCount(&USARTtoUSB_Buffer);

	if (BufferCount >= 8) {
		for (ind = 0; ind < sizeof(joyReport); ind ++) {
     4ca:	01 96       	adiw	r24, 0x01	; 1
     4cc:	ac 01       	movw	r20, r24
     4ce:	87 30       	cpi	r24, 0x07	; 7
     4d0:	91 05       	cpc	r25, r1
     4d2:	f9 f6       	brne	.-66     	; 0x492 <CALLBACK_HID_Device_CreateHIDReport+0x5e>
			((uint8_t *)&newReport)[ind] = RingBuffer_Remove(&USARTtoUSB_Buffer);
		}

		joyReport.Button = newReport.Button;
     4d4:	8f 81       	ldd	r24, Y+7	; 0x07
     4d6:	80 93 39 01 	sts	0x0139, r24
		joyReport.X = newReport.X;
     4da:	89 81       	ldd	r24, Y+1	; 0x01
     4dc:	9a 81       	ldd	r25, Y+2	; 0x02
     4de:	90 93 34 01 	sts	0x0134, r25
     4e2:	80 93 33 01 	sts	0x0133, r24
		joyReport.Y = newReport.Y;
     4e6:	8b 81       	ldd	r24, Y+3	; 0x03
     4e8:	9c 81       	ldd	r25, Y+4	; 0x04
     4ea:	90 93 36 01 	sts	0x0136, r25
     4ee:	80 93 35 01 	sts	0x0135, r24
		joyReport.Z = newReport.Z;
     4f2:	8d 81       	ldd	r24, Y+5	; 0x05
     4f4:	9e 81       	ldd	r25, Y+6	; 0x06
     4f6:	90 93 38 01 	sts	0x0138, r25
     4fa:	80 93 37 01 	sts	0x0137, r24
		 *
		 *  \return Next data element stored in the buffer
		 */
		static inline RingBuff_Data_t RingBuffer_Remove(RingBuff_t* const Buffer)
		{
			RingBuff_Data_t Data = *Buffer->Out;
     4fe:	eb e3       	ldi	r30, 0x3B	; 59
     500:	f2 e0       	ldi	r31, 0x02	; 2
			
			if (++Buffer->Out == &Buffer->Buffer[BUFFER_SIZE])
     502:	80 81       	ld	r24, Z
     504:	91 81       	ldd	r25, Z+1	; 0x01
     506:	01 96       	adiw	r24, 0x01	; 1
     508:	91 83       	std	Z+1, r25	; 0x01
     50a:	80 83       	st	Z, r24
     50c:	89 53       	subi	r24, 0x39	; 57
     50e:	92 40       	sbci	r25, 0x02	; 2
     510:	31 f4       	brne	.+12     	; 0x51e <CALLBACK_HID_Device_CreateHIDReport+0xea>
			  Buffer->Out = Buffer->Buffer;
     512:	8a e3       	ldi	r24, 0x3A	; 58
     514:	91 e0       	ldi	r25, 0x01	; 1
     516:	90 93 3c 02 	sts	0x023C, r25
     51a:	80 93 3b 02 	sts	0x023B, r24

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     51e:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     520:	f8 94       	cli
			{
				Buffer->Count--;
     522:	ed e3       	ldi	r30, 0x3D	; 61
     524:	f2 e0       	ldi	r31, 0x02	; 2
     526:	90 81       	ld	r25, Z
     528:	91 50       	subi	r25, 0x01	; 1
     52a:	90 83       	st	Z, r25
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     52c:	8f bf       	out	0x3f, r24	; 63
		/* Remove spacer */
		RingBuffer_Remove(&USARTtoUSB_Buffer);
	}
	

    *reportp = joyReport;
     52e:	87 e0       	ldi	r24, 0x07	; 7
     530:	e3 e3       	ldi	r30, 0x33	; 51
     532:	f1 e0       	ldi	r31, 0x01	; 1
     534:	d7 01       	movw	r26, r14
     536:	01 90       	ld	r0, Z+
     538:	0d 92       	st	X+, r0
     53a:	8a 95       	dec	r24
     53c:	e1 f7       	brne	.-8      	; 0x536 <CALLBACK_HID_Device_CreateHIDReport+0x102>

    *ReportSize = sizeof(USB_JoystickReport_Data_t);
     53e:	87 e0       	ldi	r24, 0x07	; 7
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	f8 01       	movw	r30, r16
     544:	91 83       	std	Z+1, r25	; 0x01
     546:	80 83       	st	Z, r24
    return false;
}
     548:	80 e0       	ldi	r24, 0x00	; 0
     54a:	27 96       	adiw	r28, 0x07	; 7
     54c:	0f b6       	in	r0, 0x3f	; 63
     54e:	f8 94       	cli
     550:	de bf       	out	0x3e, r29	; 62
     552:	0f be       	out	0x3f, r0	; 63
     554:	cd bf       	out	0x3d, r28	; 61
     556:	df 91       	pop	r29
     558:	cf 91       	pop	r28
     55a:	1f 91       	pop	r17
     55c:	0f 91       	pop	r16
     55e:	ff 90       	pop	r15
     560:	ef 90       	pop	r14
     562:	df 90       	pop	r13
     564:	bf 90       	pop	r11
     566:	af 90       	pop	r10
     568:	08 95       	ret

0000056a <__vector_23>:

/** ISR to manage the reception of data from the serial port, placing received bytes into a circular buffer
 *  for later transmission to the host.
 */
ISR(USART1_RX_vect, ISR_BLOCK)
{
     56a:	1f 92       	push	r1
     56c:	0f 92       	push	r0
     56e:	0f b6       	in	r0, 0x3f	; 63
     570:	0f 92       	push	r0
     572:	11 24       	eor	r1, r1
     574:	2f 93       	push	r18
     576:	8f 93       	push	r24
     578:	9f 93       	push	r25
     57a:	af 93       	push	r26
     57c:	bf 93       	push	r27
     57e:	ef 93       	push	r30
     580:	ff 93       	push	r31
    uint8_t ReceivedByte = UDR1;
     582:	90 91 ce 00 	lds	r25, 0x00CE

    if ((USB_DeviceState == DEVICE_STATE_Configured)) {
     586:	80 91 42 02 	lds	r24, 0x0242
     58a:	84 30       	cpi	r24, 0x04	; 4
     58c:	d9 f4       	brne	.+54     	; 0x5c4 <__vector_23+0x5a>
		 *  \param[in]     Data    Data element to insert into the buffer
		 */
		static inline void RingBuffer_Insert(RingBuff_t* const Buffer,
		                                     const RingBuff_Data_t Data)
		{
			*Buffer->In = Data;
     58e:	e9 e3       	ldi	r30, 0x39	; 57
     590:	f2 e0       	ldi	r31, 0x02	; 2
     592:	a0 81       	ld	r26, Z
     594:	b1 81       	ldd	r27, Z+1	; 0x01
     596:	9c 93       	st	X, r25
			
			if (++Buffer->In == &Buffer->Buffer[BUFFER_SIZE])
     598:	80 81       	ld	r24, Z
     59a:	91 81       	ldd	r25, Z+1	; 0x01
     59c:	01 96       	adiw	r24, 0x01	; 1
     59e:	91 83       	std	Z+1, r25	; 0x01
     5a0:	80 83       	st	Z, r24
     5a2:	8e 17       	cp	r24, r30
     5a4:	9f 07       	cpc	r25, r31
     5a6:	31 f4       	brne	.+12     	; 0x5b4 <__vector_23+0x4a>
			  Buffer->In = Buffer->Buffer;
     5a8:	8a e3       	ldi	r24, 0x3A	; 58
     5aa:	91 e0       	ldi	r25, 0x01	; 1
     5ac:	90 93 3a 02 	sts	0x023A, r25
     5b0:	80 93 39 02 	sts	0x0239, r24

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     5b4:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     5b6:	f8 94       	cli
			{
				Buffer->Count++;
     5b8:	ed e3       	ldi	r30, 0x3D	; 61
     5ba:	f2 e0       	ldi	r31, 0x02	; 2
     5bc:	90 81       	ld	r25, Z
     5be:	9f 5f       	subi	r25, 0xFF	; 255
     5c0:	90 83       	st	Z, r25
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     5c2:	8f bf       	out	0x3f, r24	; 63
		RingBuffer_Insert(&USARTtoUSB_Buffer, ReceivedByte);
    }
     5c4:	ff 91       	pop	r31
     5c6:	ef 91       	pop	r30
     5c8:	bf 91       	pop	r27
     5ca:	af 91       	pop	r26
     5cc:	9f 91       	pop	r25
     5ce:	8f 91       	pop	r24
     5d0:	2f 91       	pop	r18
     5d2:	0f 90       	pop	r0
     5d4:	0f be       	out	0x3f, r0	; 63
     5d6:	0f 90       	pop	r0
     5d8:	1f 90       	pop	r1
     5da:	18 95       	reti

000005dc <CDC_Device_ConfigureEndpoints>:

void CDC_Device_CreateBlockingStream(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                                     FILE* const Stream)
{
	*Stream = (FILE)FDEV_SETUP_STREAM(CDC_Device_putchar, CDC_Device_getchar_Blocking, _FDEV_SETUP_RW);
	fdev_set_udata(Stream, CDCInterfaceInfo);
     5dc:	cf 93       	push	r28
     5de:	df 93       	push	r29
     5e0:	ec 01       	movw	r28, r24
     5e2:	fc 01       	movw	r30, r24
     5e4:	70 96       	adiw	r30, 0x10	; 16
     5e6:	8b e0       	ldi	r24, 0x0B	; 11
     5e8:	df 01       	movw	r26, r30
     5ea:	1d 92       	st	X+, r1
     5ec:	8a 95       	dec	r24
     5ee:	e9 f7       	brne	.-6      	; 0x5ea <CDC_Device_ConfigureEndpoints+0xe>
     5f0:	82 e0       	ldi	r24, 0x02	; 2
     5f2:	8c 83       	std	Y+4, r24	; 0x04
     5f4:	89 87       	std	Y+9, r24	; 0x09
     5f6:	83 e0       	ldi	r24, 0x03	; 3
     5f8:	8e 87       	std	Y+14, r24	; 0x0e
     5fa:	61 e0       	ldi	r22, 0x01	; 1
     5fc:	ce 01       	movw	r24, r28
     5fe:	01 96       	adiw	r24, 0x01	; 1
     600:	7e d5       	rcall	.+2812   	; 0x10fe <Endpoint_ConfigureEndpointTable>
     602:	88 23       	and	r24, r24
     604:	51 f0       	breq	.+20     	; 0x61a <CDC_Device_ConfigureEndpoints+0x3e>
     606:	61 e0       	ldi	r22, 0x01	; 1
     608:	ce 01       	movw	r24, r28
     60a:	06 96       	adiw	r24, 0x06	; 6
     60c:	78 d5       	rcall	.+2800   	; 0x10fe <Endpoint_ConfigureEndpointTable>
     60e:	88 23       	and	r24, r24
     610:	21 f0       	breq	.+8      	; 0x61a <CDC_Device_ConfigureEndpoints+0x3e>
     612:	61 e0       	ldi	r22, 0x01	; 1
     614:	ce 01       	movw	r24, r28
     616:	0b 96       	adiw	r24, 0x0b	; 11
     618:	72 d5       	rcall	.+2788   	; 0x10fe <Endpoint_ConfigureEndpointTable>
     61a:	df 91       	pop	r29
     61c:	cf 91       	pop	r28
     61e:	08 95       	ret

00000620 <CDC_Device_SendByte>:
     620:	cf 93       	push	r28
     622:	c6 2f       	mov	r28, r22
     624:	20 91 42 02 	lds	r18, 0x0242
     628:	24 30       	cpi	r18, 0x04	; 4
     62a:	e9 f4       	brne	.+58     	; 0x666 <CDC_Device_SendByte+0x46>
     62c:	fc 01       	movw	r30, r24
     62e:	44 89       	ldd	r20, Z+20	; 0x14
     630:	55 89       	ldd	r21, Z+21	; 0x15
     632:	66 89       	ldd	r22, Z+22	; 0x16
     634:	77 89       	ldd	r23, Z+23	; 0x17
     636:	45 2b       	or	r20, r21
     638:	46 2b       	or	r20, r22
     63a:	47 2b       	or	r20, r23
     63c:	b1 f0       	breq	.+44     	; 0x66a <CDC_Device_SendByte+0x4a>
     63e:	81 81       	ldd	r24, Z+1	; 0x01
     640:	8f 70       	andi	r24, 0x0F	; 15
     642:	80 93 e9 00 	sts	0x00E9, r24
     646:	80 91 e8 00 	lds	r24, 0x00E8
     64a:	85 fd       	sbrc	r24, 5
     64c:	08 c0       	rjmp	.+16     	; 0x65e <CDC_Device_SendByte+0x3e>
     64e:	e8 ee       	ldi	r30, 0xE8	; 232
     650:	f0 e0       	ldi	r31, 0x00	; 0
     652:	80 81       	ld	r24, Z
     654:	8e 77       	andi	r24, 0x7E	; 126
     656:	80 83       	st	Z, r24
     658:	d3 d5       	rcall	.+2982   	; 0x1200 <Endpoint_WaitUntilReady>
     65a:	81 11       	cpse	r24, r1
     65c:	07 c0       	rjmp	.+14     	; 0x66c <CDC_Device_SendByte+0x4c>
     65e:	c0 93 f1 00 	sts	0x00F1, r28
     662:	80 e0       	ldi	r24, 0x00	; 0
     664:	03 c0       	rjmp	.+6      	; 0x66c <CDC_Device_SendByte+0x4c>
     666:	82 e0       	ldi	r24, 0x02	; 2
     668:	01 c0       	rjmp	.+2      	; 0x66c <CDC_Device_SendByte+0x4c>
     66a:	82 e0       	ldi	r24, 0x02	; 2
     66c:	cf 91       	pop	r28
     66e:	08 95       	ret

00000670 <CDC_Device_Flush>:
     670:	20 91 42 02 	lds	r18, 0x0242
     674:	24 30       	cpi	r18, 0x04	; 4
     676:	11 f5       	brne	.+68     	; 0x6bc <CDC_Device_Flush+0x4c>
     678:	fc 01       	movw	r30, r24
     67a:	44 89       	ldd	r20, Z+20	; 0x14
     67c:	55 89       	ldd	r21, Z+21	; 0x15
     67e:	66 89       	ldd	r22, Z+22	; 0x16
     680:	77 89       	ldd	r23, Z+23	; 0x17
     682:	45 2b       	or	r20, r21
     684:	46 2b       	or	r20, r22
     686:	47 2b       	or	r20, r23
     688:	d9 f0       	breq	.+54     	; 0x6c0 <CDC_Device_Flush+0x50>
     68a:	81 81       	ldd	r24, Z+1	; 0x01
     68c:	8f 70       	andi	r24, 0x0F	; 15
     68e:	80 93 e9 00 	sts	0x00E9, r24
     692:	80 91 f2 00 	lds	r24, 0x00F2
     696:	88 23       	and	r24, r24
     698:	a9 f0       	breq	.+42     	; 0x6c4 <CDC_Device_Flush+0x54>
     69a:	e8 ee       	ldi	r30, 0xE8	; 232
     69c:	f0 e0       	ldi	r31, 0x00	; 0
     69e:	80 81       	ld	r24, Z
     6a0:	90 81       	ld	r25, Z
     6a2:	9e 77       	andi	r25, 0x7E	; 126
     6a4:	90 83       	st	Z, r25
     6a6:	85 fd       	sbrc	r24, 5
     6a8:	0f c0       	rjmp	.+30     	; 0x6c8 <CDC_Device_Flush+0x58>
     6aa:	aa d5       	rcall	.+2900   	; 0x1200 <Endpoint_WaitUntilReady>
     6ac:	81 11       	cpse	r24, r1
     6ae:	0d c0       	rjmp	.+26     	; 0x6ca <CDC_Device_Flush+0x5a>
     6b0:	e8 ee       	ldi	r30, 0xE8	; 232
     6b2:	f0 e0       	ldi	r31, 0x00	; 0
     6b4:	90 81       	ld	r25, Z
     6b6:	9e 77       	andi	r25, 0x7E	; 126
     6b8:	90 83       	st	Z, r25
     6ba:	08 95       	ret
     6bc:	82 e0       	ldi	r24, 0x02	; 2
     6be:	08 95       	ret
     6c0:	82 e0       	ldi	r24, 0x02	; 2
     6c2:	08 95       	ret
     6c4:	80 e0       	ldi	r24, 0x00	; 0
     6c6:	08 95       	ret
     6c8:	80 e0       	ldi	r24, 0x00	; 0
     6ca:	08 95       	ret

000006cc <CDC_Device_USBTask>:
     6cc:	20 91 42 02 	lds	r18, 0x0242
     6d0:	24 30       	cpi	r18, 0x04	; 4
     6d2:	89 f4       	brne	.+34     	; 0x6f6 <CDC_Device_USBTask+0x2a>
     6d4:	fc 01       	movw	r30, r24
     6d6:	44 89       	ldd	r20, Z+20	; 0x14
     6d8:	55 89       	ldd	r21, Z+21	; 0x15
     6da:	66 89       	ldd	r22, Z+22	; 0x16
     6dc:	77 89       	ldd	r23, Z+23	; 0x17
     6de:	45 2b       	or	r20, r21
     6e0:	46 2b       	or	r20, r22
     6e2:	47 2b       	or	r20, r23
     6e4:	41 f0       	breq	.+16     	; 0x6f6 <CDC_Device_USBTask+0x2a>
     6e6:	21 81       	ldd	r18, Z+1	; 0x01
     6e8:	2f 70       	andi	r18, 0x0F	; 15
     6ea:	20 93 e9 00 	sts	0x00E9, r18
     6ee:	20 91 e8 00 	lds	r18, 0x00E8
     6f2:	20 fd       	sbrc	r18, 0
     6f4:	bd cf       	rjmp	.-134    	; 0x670 <CDC_Device_Flush>
     6f6:	08 95       	ret

000006f8 <CDC_Device_ReceiveByte>:
     6f8:	20 91 42 02 	lds	r18, 0x0242
     6fc:	24 30       	cpi	r18, 0x04	; 4
     6fe:	39 f5       	brne	.+78     	; 0x74e <CDC_Device_ReceiveByte+0x56>
     700:	fc 01       	movw	r30, r24
     702:	44 89       	ldd	r20, Z+20	; 0x14
     704:	55 89       	ldd	r21, Z+21	; 0x15
     706:	66 89       	ldd	r22, Z+22	; 0x16
     708:	77 89       	ldd	r23, Z+23	; 0x17
     70a:	45 2b       	or	r20, r21
     70c:	46 2b       	or	r20, r22
     70e:	47 2b       	or	r20, r23
     710:	09 f1       	breq	.+66     	; 0x754 <CDC_Device_ReceiveByte+0x5c>
     712:	86 81       	ldd	r24, Z+6	; 0x06
     714:	8f 70       	andi	r24, 0x0F	; 15
     716:	80 93 e9 00 	sts	0x00E9, r24
     71a:	80 91 e8 00 	lds	r24, 0x00E8
     71e:	82 ff       	sbrs	r24, 2
     720:	1c c0       	rjmp	.+56     	; 0x75a <CDC_Device_ReceiveByte+0x62>
     722:	80 91 f2 00 	lds	r24, 0x00F2
     726:	88 23       	and	r24, r24
     728:	21 f0       	breq	.+8      	; 0x732 <CDC_Device_ReceiveByte+0x3a>
     72a:	20 91 f1 00 	lds	r18, 0x00F1
     72e:	30 e0       	ldi	r19, 0x00	; 0
     730:	02 c0       	rjmp	.+4      	; 0x736 <CDC_Device_ReceiveByte+0x3e>
     732:	2f ef       	ldi	r18, 0xFF	; 255
     734:	3f ef       	ldi	r19, 0xFF	; 255
     736:	80 91 f2 00 	lds	r24, 0x00F2
     73a:	81 11       	cpse	r24, r1
     73c:	11 c0       	rjmp	.+34     	; 0x760 <CDC_Device_ReceiveByte+0x68>
     73e:	e8 ee       	ldi	r30, 0xE8	; 232
     740:	f0 e0       	ldi	r31, 0x00	; 0
     742:	80 81       	ld	r24, Z
     744:	8b 77       	andi	r24, 0x7B	; 123
     746:	80 83       	st	Z, r24
     748:	82 2f       	mov	r24, r18
     74a:	93 2f       	mov	r25, r19
     74c:	08 95       	ret
     74e:	8f ef       	ldi	r24, 0xFF	; 255
     750:	9f ef       	ldi	r25, 0xFF	; 255
     752:	08 95       	ret
     754:	8f ef       	ldi	r24, 0xFF	; 255
     756:	9f ef       	ldi	r25, 0xFF	; 255
     758:	08 95       	ret
     75a:	8f ef       	ldi	r24, 0xFF	; 255
     75c:	9f ef       	ldi	r25, 0xFF	; 255
     75e:	08 95       	ret
     760:	82 2f       	mov	r24, r18
     762:	93 2f       	mov	r25, r19
     764:	08 95       	ret

00000766 <CDC_Device_Event_Stub>:
	return ReceivedByte;
}
#endif

void CDC_Device_Event_Stub(void)
{
     766:	08 95       	ret

00000768 <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     768:	cf 93       	push	r28
     76a:	df 93       	push	r29
     76c:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     76e:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
     772:	83 ff       	sbrs	r24, 3
     774:	95 c0       	rjmp	.+298    	; 0x8a0 <CDC_Device_ProcessControlRequest+0x138>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
     776:	88 81       	ld	r24, Y
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	20 91 47 02 	lds	r18, 0x0247
     77e:	30 91 48 02 	lds	r19, 0x0248
     782:	28 17       	cp	r18, r24
     784:	39 07       	cpc	r19, r25
     786:	09 f0       	breq	.+2      	; 0x78a <CDC_Device_ProcessControlRequest+0x22>
     788:	8b c0       	rjmp	.+278    	; 0x8a0 <CDC_Device_ProcessControlRequest+0x138>
	  return;

	switch (USB_ControlRequest.bRequest)
     78a:	80 91 44 02 	lds	r24, 0x0244
     78e:	81 32       	cpi	r24, 0x21	; 33
     790:	59 f0       	breq	.+22     	; 0x7a8 <CDC_Device_ProcessControlRequest+0x40>
     792:	18 f4       	brcc	.+6      	; 0x79a <CDC_Device_ProcessControlRequest+0x32>
     794:	80 32       	cpi	r24, 0x20	; 32
     796:	b9 f1       	breq	.+110    	; 0x806 <CDC_Device_ProcessControlRequest+0x9e>
     798:	83 c0       	rjmp	.+262    	; 0x8a0 <CDC_Device_ProcessControlRequest+0x138>
     79a:	82 32       	cpi	r24, 0x22	; 34
     79c:	09 f4       	brne	.+2      	; 0x7a0 <CDC_Device_ProcessControlRequest+0x38>
     79e:	5f c0       	rjmp	.+190    	; 0x85e <CDC_Device_ProcessControlRequest+0xf6>
     7a0:	83 32       	cpi	r24, 0x23	; 35
     7a2:	09 f4       	brne	.+2      	; 0x7a6 <CDC_Device_ProcessControlRequest+0x3e>
     7a4:	6f c0       	rjmp	.+222    	; 0x884 <CDC_Device_ProcessControlRequest+0x11c>
     7a6:	7c c0       	rjmp	.+248    	; 0x8a0 <CDC_Device_ProcessControlRequest+0x138>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     7a8:	80 91 43 02 	lds	r24, 0x0243
     7ac:	81 3a       	cpi	r24, 0xA1	; 161
     7ae:	09 f0       	breq	.+2      	; 0x7b2 <CDC_Device_ProcessControlRequest+0x4a>
     7b0:	77 c0       	rjmp	.+238    	; 0x8a0 <CDC_Device_ProcessControlRequest+0x138>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     7b2:	e8 ee       	ldi	r30, 0xE8	; 232
     7b4:	f0 e0       	ldi	r31, 0x00	; 0
     7b6:	80 81       	ld	r24, Z
     7b8:	87 7f       	andi	r24, 0xF7	; 247
     7ba:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     7bc:	80 81       	ld	r24, Z
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
     7be:	80 ff       	sbrs	r24, 0
     7c0:	fd cf       	rjmp	.-6      	; 0x7bc <CDC_Device_ProcessControlRequest+0x54>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
     7c2:	4c 89       	ldd	r20, Y+20	; 0x14
     7c4:	5d 89       	ldd	r21, Y+21	; 0x15
     7c6:	6e 89       	ldd	r22, Y+22	; 0x16
     7c8:	7f 89       	ldd	r23, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
     7ca:	e1 ef       	ldi	r30, 0xF1	; 241
     7cc:	f0 e0       	ldi	r31, 0x00	; 0
     7ce:	40 83       	st	Z, r20
				UEDATX = (Data >> 8);
     7d0:	bb 27       	eor	r27, r27
     7d2:	a7 2f       	mov	r26, r23
     7d4:	96 2f       	mov	r25, r22
     7d6:	85 2f       	mov	r24, r21
     7d8:	80 83       	st	Z, r24
				UEDATX = (Data >> 16);
     7da:	cb 01       	movw	r24, r22
     7dc:	aa 27       	eor	r26, r26
     7de:	bb 27       	eor	r27, r27
     7e0:	80 83       	st	Z, r24
				UEDATX = (Data >> 24);
     7e2:	47 2f       	mov	r20, r23
     7e4:	55 27       	eor	r21, r21
     7e6:	66 27       	eor	r22, r22
     7e8:	77 27       	eor	r23, r23
     7ea:	40 83       	st	Z, r20
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
     7ec:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     7ee:	80 83       	st	Z, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
     7f0:	89 8d       	ldd	r24, Y+25	; 0x19
     7f2:	80 83       	st	Z, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
     7f4:	8a 8d       	ldd	r24, Y+26	; 0x1a
     7f6:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     7f8:	e8 ee       	ldi	r30, 0xE8	; 232
     7fa:	f0 e0       	ldi	r31, 0x00	; 0
     7fc:	80 81       	ld	r24, Z
     7fe:	8e 77       	andi	r24, 0x7E	; 126
     800:	80 83       	st	Z, r24

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     802:	da d4       	rcall	.+2484   	; 0x11b8 <Endpoint_ClearStatusStage>
     804:	4d c0       	rjmp	.+154    	; 0x8a0 <CDC_Device_ProcessControlRequest+0x138>
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     806:	80 91 43 02 	lds	r24, 0x0243
     80a:	81 32       	cpi	r24, 0x21	; 33
     80c:	09 f0       	breq	.+2      	; 0x810 <CDC_Device_ProcessControlRequest+0xa8>
     80e:	48 c0       	rjmp	.+144    	; 0x8a0 <CDC_Device_ProcessControlRequest+0x138>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     810:	e8 ee       	ldi	r30, 0xE8	; 232
     812:	f0 e0       	ldi	r31, 0x00	; 0
     814:	80 81       	ld	r24, Z
     816:	87 7f       	andi	r24, 0xF7	; 247
     818:	80 83       	st	Z, r24
     81a:	05 c0       	rjmp	.+10     	; 0x826 <CDC_Device_ProcessControlRequest+0xbe>
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
     81c:	80 91 42 02 	lds	r24, 0x0242
     820:	88 23       	and	r24, r24
     822:	09 f4       	brne	.+2      	; 0x826 <CDC_Device_ProcessControlRequest+0xbe>
     824:	3d c0       	rjmp	.+122    	; 0x8a0 <CDC_Device_ProcessControlRequest+0x138>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     826:	80 81       	ld	r24, Z
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
     828:	82 ff       	sbrs	r24, 2
     82a:	f8 cf       	rjmp	.-16     	; 0x81c <CDC_Device_ProcessControlRequest+0xb4>
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
     82c:	e1 ef       	ldi	r30, 0xF1	; 241
     82e:	f0 e0       	ldi	r31, 0x00	; 0
     830:	30 81       	ld	r19, Z
				Data.Bytes[1] = UEDATX;
     832:	20 81       	ld	r18, Z
				Data.Bytes[2] = UEDATX;
     834:	90 81       	ld	r25, Z
				Data.Bytes[3] = UEDATX;
     836:	80 81       	ld	r24, Z
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
     838:	3c 8b       	std	Y+20, r19	; 0x14
     83a:	2d 8b       	std	Y+21, r18	; 0x15
     83c:	9e 8b       	std	Y+22, r25	; 0x16
     83e:	8f 8b       	std	Y+23, r24	; 0x17
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     840:	80 81       	ld	r24, Z
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
     842:	88 8f       	std	Y+24, r24	; 0x18
     844:	80 81       	ld	r24, Z
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
     846:	89 8f       	std	Y+25, r24	; 0x19
     848:	80 81       	ld	r24, Z
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
     84a:	8a 8f       	std	Y+26, r24	; 0x1a
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     84c:	e8 ee       	ldi	r30, 0xE8	; 232
     84e:	f0 e0       	ldi	r31, 0x00	; 0
     850:	80 81       	ld	r24, Z
     852:	8b 77       	andi	r24, 0x7B	; 123
     854:	80 83       	st	Z, r24

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
     856:	b0 d4       	rcall	.+2400   	; 0x11b8 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
     858:	ce 01       	movw	r24, r28
     85a:	85 df       	rcall	.-246    	; 0x766 <CDC_Device_Event_Stub>
     85c:	21 c0       	rjmp	.+66     	; 0x8a0 <CDC_Device_ProcessControlRequest+0x138>
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     85e:	80 91 43 02 	lds	r24, 0x0243
     862:	81 32       	cpi	r24, 0x21	; 33
     864:	e9 f4       	brne	.+58     	; 0x8a0 <CDC_Device_ProcessControlRequest+0x138>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     866:	e8 ee       	ldi	r30, 0xE8	; 232
     868:	f0 e0       	ldi	r31, 0x00	; 0
     86a:	80 81       	ld	r24, Z
     86c:	87 7f       	andi	r24, 0xF7	; 247
     86e:	80 83       	st	Z, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     870:	a3 d4       	rcall	.+2374   	; 0x11b8 <Endpoint_ClearStatusStage>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
     872:	80 91 45 02 	lds	r24, 0x0245
     876:	90 91 46 02 	lds	r25, 0x0246
     87a:	99 8b       	std	Y+17, r25	; 0x11
     87c:	88 8b       	std	Y+16, r24	; 0x10

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
     87e:	ce 01       	movw	r24, r28
     880:	72 df       	rcall	.-284    	; 0x766 <CDC_Device_Event_Stub>
     882:	0e c0       	rjmp	.+28     	; 0x8a0 <CDC_Device_ProcessControlRequest+0x138>
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     884:	80 91 43 02 	lds	r24, 0x0243
     888:	81 32       	cpi	r24, 0x21	; 33
     88a:	51 f4       	brne	.+20     	; 0x8a0 <CDC_Device_ProcessControlRequest+0x138>
     88c:	e8 ee       	ldi	r30, 0xE8	; 232
     88e:	f0 e0       	ldi	r31, 0x00	; 0
     890:	80 81       	ld	r24, Z
     892:	87 7f       	andi	r24, 0xF7	; 247
     894:	80 83       	st	Z, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     896:	90 d4       	rcall	.+2336   	; 0x11b8 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
     898:	60 91 45 02 	lds	r22, 0x0245
     89c:	ce 01       	movw	r24, r28
     89e:	63 df       	rcall	.-314    	; 0x766 <CDC_Device_Event_Stub>
			}

			break;
	}
}
     8a0:	df 91       	pop	r29
     8a2:	cf 91       	pop	r28
     8a4:	08 95       	ret

000008a6 <HID_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
     8a6:	3f 92       	push	r3
     8a8:	4f 92       	push	r4
     8aa:	5f 92       	push	r5
     8ac:	6f 92       	push	r6
     8ae:	7f 92       	push	r7
     8b0:	8f 92       	push	r8
     8b2:	9f 92       	push	r9
     8b4:	af 92       	push	r10
     8b6:	bf 92       	push	r11
     8b8:	cf 92       	push	r12
     8ba:	df 92       	push	r13
     8bc:	ef 92       	push	r14
     8be:	ff 92       	push	r15
     8c0:	0f 93       	push	r16
     8c2:	1f 93       	push	r17
     8c4:	cf 93       	push	r28
     8c6:	df 93       	push	r29
     8c8:	00 d0       	rcall	.+0      	; 0x8ca <HID_Device_ProcessControlRequest+0x24>
     8ca:	1f 92       	push	r1
     8cc:	cd b7       	in	r28, 0x3d	; 61
     8ce:	de b7       	in	r29, 0x3e	; 62
     8d0:	6c 01       	movw	r12, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
     8d2:	ed b6       	in	r14, 0x3d	; 61
     8d4:	fe b6       	in	r15, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     8d6:	80 91 e8 00 	lds	r24, 0x00E8
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
     8da:	83 ff       	sbrs	r24, 3
     8dc:	0e c1       	rjmp	.+540    	; 0xafa <HID_Device_ProcessControlRequest+0x254>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
     8de:	f6 01       	movw	r30, r12
     8e0:	80 81       	ld	r24, Z
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	20 91 47 02 	lds	r18, 0x0247
     8e8:	30 91 48 02 	lds	r19, 0x0248
     8ec:	28 17       	cp	r18, r24
     8ee:	39 07       	cpc	r19, r25
     8f0:	09 f0       	breq	.+2      	; 0x8f4 <HID_Device_ProcessControlRequest+0x4e>
     8f2:	03 c1       	rjmp	.+518    	; 0xafa <HID_Device_ProcessControlRequest+0x254>
	  return;

	switch (USB_ControlRequest.bRequest)
     8f4:	80 91 44 02 	lds	r24, 0x0244
     8f8:	83 30       	cpi	r24, 0x03	; 3
     8fa:	09 f4       	brne	.+2      	; 0x8fe <HID_Device_ProcessControlRequest+0x58>
     8fc:	9b c0       	rjmp	.+310    	; 0xa34 <HID_Device_ProcessControlRequest+0x18e>
     8fe:	30 f4       	brcc	.+12     	; 0x90c <HID_Device_ProcessControlRequest+0x66>
     900:	81 30       	cpi	r24, 0x01	; 1
     902:	71 f0       	breq	.+28     	; 0x920 <HID_Device_ProcessControlRequest+0x7a>
     904:	82 30       	cpi	r24, 0x02	; 2
     906:	09 f4       	brne	.+2      	; 0x90a <HID_Device_ProcessControlRequest+0x64>
     908:	dd c0       	rjmp	.+442    	; 0xac4 <HID_Device_ProcessControlRequest+0x21e>
     90a:	f7 c0       	rjmp	.+494    	; 0xafa <HID_Device_ProcessControlRequest+0x254>
     90c:	8a 30       	cpi	r24, 0x0A	; 10
     90e:	09 f4       	brne	.+2      	; 0x912 <HID_Device_ProcessControlRequest+0x6c>
     910:	bd c0       	rjmp	.+378    	; 0xa8c <HID_Device_ProcessControlRequest+0x1e6>
     912:	8b 30       	cpi	r24, 0x0B	; 11
     914:	09 f4       	brne	.+2      	; 0x918 <HID_Device_ProcessControlRequest+0x72>
     916:	a6 c0       	rjmp	.+332    	; 0xa64 <HID_Device_ProcessControlRequest+0x1be>
     918:	89 30       	cpi	r24, 0x09	; 9
     91a:	09 f0       	breq	.+2      	; 0x91e <HID_Device_ProcessControlRequest+0x78>
     91c:	ee c0       	rjmp	.+476    	; 0xafa <HID_Device_ProcessControlRequest+0x254>
     91e:	4c c0       	rjmp	.+152    	; 0x9b8 <HID_Device_ProcessControlRequest+0x112>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     920:	80 91 43 02 	lds	r24, 0x0243
     924:	81 3a       	cpi	r24, 0xA1	; 161
     926:	09 f0       	breq	.+2      	; 0x92a <HID_Device_ProcessControlRequest+0x84>
     928:	e8 c0       	rjmp	.+464    	; 0xafa <HID_Device_ProcessControlRequest+0x254>
     92a:	8d b6       	in	r8, 0x3d	; 61
     92c:	9e b6       	in	r9, 0x3e	; 62
			{
				uint16_t ReportSize = 0;
     92e:	1a 82       	std	Y+2, r1	; 0x02
     930:	19 82       	std	Y+1, r1	; 0x01
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
     932:	e5 e4       	ldi	r30, 0x45	; 69
     934:	f2 e0       	ldi	r31, 0x02	; 2
     936:	80 81       	ld	r24, Z
     938:	11 81       	ldd	r17, Z+1	; 0x01
     93a:	8b 83       	std	Y+3, r24	; 0x03
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
     93c:	f6 01       	movw	r30, r12
     93e:	40 85       	ldd	r20, Z+8	; 0x08
     940:	50 e0       	ldi	r21, 0x00	; 0
     942:	8d b7       	in	r24, 0x3d	; 61
     944:	9e b7       	in	r25, 0x3e	; 62
     946:	84 1b       	sub	r24, r20
     948:	95 0b       	sbc	r25, r21
     94a:	0f b6       	in	r0, 0x3f	; 63
     94c:	f8 94       	cli
     94e:	9e bf       	out	0x3e, r25	; 62
     950:	0f be       	out	0x3f, r0	; 63
     952:	8d bf       	out	0x3d, r24	; 61
     954:	ed b7       	in	r30, 0x3d	; 61
     956:	fe b7       	in	r31, 0x3e	; 62
     958:	31 96       	adiw	r30, 0x01	; 1
     95a:	5f 01       	movw	r10, r30

				memset(ReportData, 0, sizeof(ReportData));
     95c:	60 e0       	ldi	r22, 0x00	; 0
     95e:	70 e0       	ldi	r23, 0x00	; 0
     960:	cf 01       	movw	r24, r30
     962:	11 d7       	rcall	.+3618   	; 0x1786 <memset>
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = 0;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
     964:	4f ef       	ldi	r20, 0xFF	; 255
     966:	41 0f       	add	r20, r17
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];

				memset(ReportData, 0, sizeof(ReportData));

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
     968:	8e 01       	movw	r16, r28
     96a:	0f 5f       	subi	r16, 0xFF	; 255
     96c:	1f 4f       	sbci	r17, 0xFF	; 255
     96e:	95 01       	movw	r18, r10
     970:	be 01       	movw	r22, r28
     972:	6d 5f       	subi	r22, 0xFD	; 253
     974:	7f 4f       	sbci	r23, 0xFF	; 255
     976:	c6 01       	movw	r24, r12
     978:	5d dd       	rcall	.-1350   	; 0x434 <CALLBACK_HID_Device_CreateHIDReport>

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
     97a:	f6 01       	movw	r30, r12
     97c:	86 81       	ldd	r24, Z+6	; 0x06
     97e:	97 81       	ldd	r25, Z+7	; 0x07
     980:	00 97       	sbiw	r24, 0x00	; 0
     982:	21 f0       	breq	.+8      	; 0x98c <HID_Device_ProcessControlRequest+0xe6>
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
     984:	40 85       	ldd	r20, Z+8	; 0x08
     986:	50 e0       	ldi	r21, 0x00	; 0
     988:	b5 01       	movw	r22, r10
     98a:	f4 d6       	rcall	.+3560   	; 0x1774 <memcpy>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     98c:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     990:	08 ee       	ldi	r16, 0xE8	; 232
     992:	10 e0       	ldi	r17, 0x00	; 0
     994:	f8 01       	movw	r30, r16
     996:	80 81       	ld	r24, Z
     998:	87 7f       	andi	r24, 0xF7	; 247
     99a:	80 83       	st	Z, r24
				}

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();
				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
     99c:	69 81       	ldd	r22, Y+1	; 0x01
     99e:	7a 81       	ldd	r23, Y+2	; 0x02
     9a0:	c5 01       	movw	r24, r10
     9a2:	f3 d1       	rcall	.+998    	; 0xd8a <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     9a4:	f8 01       	movw	r30, r16
     9a6:	80 81       	ld	r24, Z
     9a8:	8b 77       	andi	r24, 0x7B	; 123
     9aa:	80 83       	st	Z, r24
     9ac:	0f b6       	in	r0, 0x3f	; 63
     9ae:	f8 94       	cli
     9b0:	9e be       	out	0x3e, r9	; 62
     9b2:	0f be       	out	0x3f, r0	; 63
     9b4:	8d be       	out	0x3d, r8	; 61
     9b6:	a1 c0       	rjmp	.+322    	; 0xafa <HID_Device_ProcessControlRequest+0x254>
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     9b8:	80 91 43 02 	lds	r24, 0x0243
     9bc:	81 32       	cpi	r24, 0x21	; 33
     9be:	09 f0       	breq	.+2      	; 0x9c2 <HID_Device_ProcessControlRequest+0x11c>
     9c0:	9c c0       	rjmp	.+312    	; 0xafa <HID_Device_ProcessControlRequest+0x254>
     9c2:	6d b6       	in	r6, 0x3d	; 61
     9c4:	7e b6       	in	r7, 0x3e	; 62
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
     9c6:	a0 90 49 02 	lds	r10, 0x0249
     9ca:	b0 90 4a 02 	lds	r11, 0x024A
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
     9ce:	e5 e4       	ldi	r30, 0x45	; 69
     9d0:	f2 e0       	ldi	r31, 0x02	; 2
     9d2:	50 80       	ld	r5, Z
     9d4:	41 80       	ldd	r4, Z+1	; 0x01
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
     9d6:	8d b7       	in	r24, 0x3d	; 61
     9d8:	9e b7       	in	r25, 0x3e	; 62
     9da:	8a 19       	sub	r24, r10
     9dc:	9b 09       	sbc	r25, r11
     9de:	0f b6       	in	r0, 0x3f	; 63
     9e0:	f8 94       	cli
     9e2:	9e bf       	out	0x3e, r25	; 62
     9e4:	0f be       	out	0x3f, r0	; 63
     9e6:	8d bf       	out	0x3d, r24	; 61
     9e8:	ed b7       	in	r30, 0x3d	; 61
     9ea:	fe b7       	in	r31, 0x3e	; 62
     9ec:	31 96       	adiw	r30, 0x01	; 1
     9ee:	4f 01       	movw	r8, r30
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     9f0:	08 ee       	ldi	r16, 0xE8	; 232
     9f2:	10 e0       	ldi	r17, 0x00	; 0
     9f4:	f8 01       	movw	r30, r16
     9f6:	80 81       	ld	r24, Z
     9f8:	87 7f       	andi	r24, 0xF7	; 247
     9fa:	80 83       	st	Z, r24

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
     9fc:	b5 01       	movw	r22, r10
     9fe:	c4 01       	movw	r24, r8
     a00:	38 d2       	rcall	.+1136   	; 0xe72 <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     a02:	f8 01       	movw	r30, r16
     a04:	80 81       	ld	r24, Z
     a06:	8e 77       	andi	r24, 0x7E	; 126
     a08:	80 83       	st	Z, r24
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
     a0a:	21 e0       	ldi	r18, 0x01	; 1
     a0c:	51 10       	cpse	r5, r1
     a0e:	01 c0       	rjmp	.+2      	; 0xa12 <HID_Device_ProcessControlRequest+0x16c>
     a10:	20 e0       	ldi	r18, 0x00	; 0
     a12:	30 e0       	ldi	r19, 0x00	; 0
     a14:	85 01       	movw	r16, r10
     a16:	02 1b       	sub	r16, r18
     a18:	13 0b       	sbc	r17, r19
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
     a1a:	28 0d       	add	r18, r8
     a1c:	39 1d       	adc	r19, r9
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
     a1e:	4f ef       	ldi	r20, 0xFF	; 255
     a20:	44 0d       	add	r20, r4

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
     a22:	65 2d       	mov	r22, r5
     a24:	c6 01       	movw	r24, r12
     a26:	61 dc       	rcall	.-1854   	; 0x2ea <CALLBACK_HID_Device_ProcessHIDReport>
     a28:	0f b6       	in	r0, 0x3f	; 63
     a2a:	f8 94       	cli
     a2c:	7e be       	out	0x3e, r7	; 62
     a2e:	0f be       	out	0x3f, r0	; 63
     a30:	6d be       	out	0x3d, r6	; 61
     a32:	63 c0       	rjmp	.+198    	; 0xafa <HID_Device_ProcessControlRequest+0x254>
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     a34:	80 91 43 02 	lds	r24, 0x0243
     a38:	81 3a       	cpi	r24, 0xA1	; 161
     a3a:	09 f0       	breq	.+2      	; 0xa3e <HID_Device_ProcessControlRequest+0x198>
     a3c:	5e c0       	rjmp	.+188    	; 0xafa <HID_Device_ProcessControlRequest+0x254>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     a3e:	e8 ee       	ldi	r30, 0xE8	; 232
     a40:	f0 e0       	ldi	r31, 0x00	; 0
     a42:	80 81       	ld	r24, Z
     a44:	87 7f       	andi	r24, 0xF7	; 247
     a46:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     a48:	80 81       	ld	r24, Z
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
     a4a:	80 ff       	sbrs	r24, 0
     a4c:	fd cf       	rjmp	.-6      	; 0xa48 <HID_Device_ProcessControlRequest+0x1a2>
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
     a4e:	f6 01       	movw	r30, r12
     a50:	81 85       	ldd	r24, Z+9	; 0x09
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     a52:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     a56:	e8 ee       	ldi	r30, 0xE8	; 232
     a58:	f0 e0       	ldi	r31, 0x00	; 0
     a5a:	80 81       	ld	r24, Z
     a5c:	8e 77       	andi	r24, 0x7E	; 126
     a5e:	80 83       	st	Z, r24
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     a60:	ab d3       	rcall	.+1878   	; 0x11b8 <Endpoint_ClearStatusStage>
     a62:	4b c0       	rjmp	.+150    	; 0xafa <HID_Device_ProcessControlRequest+0x254>
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     a64:	80 91 43 02 	lds	r24, 0x0243
     a68:	81 32       	cpi	r24, 0x21	; 33
     a6a:	09 f0       	breq	.+2      	; 0xa6e <HID_Device_ProcessControlRequest+0x1c8>
     a6c:	46 c0       	rjmp	.+140    	; 0xafa <HID_Device_ProcessControlRequest+0x254>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     a6e:	e8 ee       	ldi	r30, 0xE8	; 232
     a70:	f0 e0       	ldi	r31, 0x00	; 0
     a72:	80 81       	ld	r24, Z
     a74:	87 7f       	andi	r24, 0xF7	; 247
     a76:	80 83       	st	Z, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     a78:	9f d3       	rcall	.+1854   	; 0x11b8 <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
     a7a:	90 91 45 02 	lds	r25, 0x0245
     a7e:	81 e0       	ldi	r24, 0x01	; 1
     a80:	91 11       	cpse	r25, r1
     a82:	01 c0       	rjmp	.+2      	; 0xa86 <HID_Device_ProcessControlRequest+0x1e0>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	f6 01       	movw	r30, r12
     a88:	81 87       	std	Z+9, r24	; 0x09
     a8a:	37 c0       	rjmp	.+110    	; 0xafa <HID_Device_ProcessControlRequest+0x254>
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     a8c:	80 91 43 02 	lds	r24, 0x0243
     a90:	81 32       	cpi	r24, 0x21	; 33
     a92:	99 f5       	brne	.+102    	; 0xafa <HID_Device_ProcessControlRequest+0x254>
     a94:	e8 ee       	ldi	r30, 0xE8	; 232
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	80 81       	ld	r24, Z
     a9a:	87 7f       	andi	r24, 0xF7	; 247
     a9c:	80 83       	st	Z, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     a9e:	8c d3       	rcall	.+1816   	; 0x11b8 <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
     aa0:	80 91 45 02 	lds	r24, 0x0245
     aa4:	90 91 46 02 	lds	r25, 0x0246
     aa8:	88 27       	eor	r24, r24
     aaa:	00 24       	eor	r0, r0
     aac:	88 0f       	add	r24, r24
     aae:	99 1f       	adc	r25, r25
     ab0:	00 1c       	adc	r0, r0
     ab2:	88 0f       	add	r24, r24
     ab4:	99 1f       	adc	r25, r25
     ab6:	00 1c       	adc	r0, r0
     ab8:	89 2f       	mov	r24, r25
     aba:	90 2d       	mov	r25, r0
     abc:	f6 01       	movw	r30, r12
     abe:	95 87       	std	Z+13, r25	; 0x0d
     ac0:	84 87       	std	Z+12, r24	; 0x0c
     ac2:	1b c0       	rjmp	.+54     	; 0xafa <HID_Device_ProcessControlRequest+0x254>
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     ac4:	80 91 43 02 	lds	r24, 0x0243
     ac8:	81 3a       	cpi	r24, 0xA1	; 161
     aca:	b9 f4       	brne	.+46     	; 0xafa <HID_Device_ProcessControlRequest+0x254>
     acc:	e8 ee       	ldi	r30, 0xE8	; 232
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	80 81       	ld	r24, Z
     ad2:	87 7f       	andi	r24, 0xF7	; 247
     ad4:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     ad6:	80 81       	ld	r24, Z
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
     ad8:	80 ff       	sbrs	r24, 0
     ada:	fd cf       	rjmp	.-6      	; 0xad6 <HID_Device_ProcessControlRequest+0x230>
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
     adc:	f6 01       	movw	r30, r12
     ade:	84 85       	ldd	r24, Z+12	; 0x0c
     ae0:	95 85       	ldd	r25, Z+13	; 0x0d
     ae2:	96 95       	lsr	r25
     ae4:	87 95       	ror	r24
     ae6:	96 95       	lsr	r25
     ae8:	87 95       	ror	r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     aea:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     aee:	e8 ee       	ldi	r30, 0xE8	; 232
     af0:	f0 e0       	ldi	r31, 0x00	; 0
     af2:	80 81       	ld	r24, Z
     af4:	8e 77       	andi	r24, 0x7E	; 126
     af6:	80 83       	st	Z, r24
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     af8:	5f d3       	rcall	.+1726   	; 0x11b8 <Endpoint_ClearStatusStage>
			}

			break;
	}
}
     afa:	0f b6       	in	r0, 0x3f	; 63
     afc:	f8 94       	cli
     afe:	fe be       	out	0x3e, r15	; 62
     b00:	0f be       	out	0x3f, r0	; 63
     b02:	ed be       	out	0x3d, r14	; 61
     b04:	0f 90       	pop	r0
     b06:	0f 90       	pop	r0
     b08:	0f 90       	pop	r0
     b0a:	df 91       	pop	r29
     b0c:	cf 91       	pop	r28
     b0e:	1f 91       	pop	r17
     b10:	0f 91       	pop	r16
     b12:	ff 90       	pop	r15
     b14:	ef 90       	pop	r14
     b16:	df 90       	pop	r13
     b18:	cf 90       	pop	r12
     b1a:	bf 90       	pop	r11
     b1c:	af 90       	pop	r10
     b1e:	9f 90       	pop	r9
     b20:	8f 90       	pop	r8
     b22:	7f 90       	pop	r7
     b24:	6f 90       	pop	r6
     b26:	5f 90       	pop	r5
     b28:	4f 90       	pop	r4
     b2a:	3f 90       	pop	r3
     b2c:	08 95       	ret

00000b2e <HID_Device_ConfigureEndpoints>:

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
     b2e:	fc 01       	movw	r30, r24
     b30:	39 96       	adiw	r30, 0x09	; 9
     b32:	27 e0       	ldi	r18, 0x07	; 7
     b34:	df 01       	movw	r26, r30
     b36:	1d 92       	st	X+, r1
     b38:	2a 95       	dec	r18
     b3a:	e9 f7       	brne	.-6      	; 0xb36 <HID_Device_ConfigureEndpoints+0x8>
	HIDInterfaceInfo->State.UsingReportProtocol = true;
     b3c:	21 e0       	ldi	r18, 0x01	; 1
     b3e:	fc 01       	movw	r30, r24
     b40:	21 87       	std	Z+9, r18	; 0x09
	HIDInterfaceInfo->State.IdleCount           = 500;
     b42:	24 ef       	ldi	r18, 0xF4	; 244
     b44:	31 e0       	ldi	r19, 0x01	; 1
     b46:	35 87       	std	Z+13, r19	; 0x0d
     b48:	24 87       	std	Z+12, r18	; 0x0c

	HIDInterfaceInfo->Config.ReportINEndpoint.Type = EP_TYPE_INTERRUPT;
     b4a:	23 e0       	ldi	r18, 0x03	; 3
     b4c:	24 83       	std	Z+4, r18	; 0x04

	if (!(Endpoint_ConfigureEndpointTable(&HIDInterfaceInfo->Config.ReportINEndpoint, 1)))
     b4e:	61 e0       	ldi	r22, 0x01	; 1
     b50:	01 96       	adiw	r24, 0x01	; 1
     b52:	d5 c2       	rjmp	.+1450   	; 0x10fe <Endpoint_ConfigureEndpointTable>
	  return false;

	return true;
}
     b54:	08 95       	ret

00000b56 <HID_Device_USBTask>:

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
     b56:	5f 92       	push	r5
     b58:	6f 92       	push	r6
     b5a:	7f 92       	push	r7
     b5c:	8f 92       	push	r8
     b5e:	9f 92       	push	r9
     b60:	af 92       	push	r10
     b62:	bf 92       	push	r11
     b64:	cf 92       	push	r12
     b66:	df 92       	push	r13
     b68:	ef 92       	push	r14
     b6a:	ff 92       	push	r15
     b6c:	0f 93       	push	r16
     b6e:	1f 93       	push	r17
     b70:	cf 93       	push	r28
     b72:	df 93       	push	r29
     b74:	00 d0       	rcall	.+0      	; 0xb76 <HID_Device_USBTask+0x20>
     b76:	1f 92       	push	r1
     b78:	cd b7       	in	r28, 0x3d	; 61
     b7a:	de b7       	in	r29, 0x3e	; 62
     b7c:	7c 01       	movw	r14, r24
			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
	}
}
     b7e:	cd b6       	in	r12, 0x3d	; 61
     b80:	de b6       	in	r13, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
     b82:	80 91 42 02 	lds	r24, 0x0242
     b86:	84 30       	cpi	r24, 0x04	; 4
     b88:	09 f0       	breq	.+2      	; 0xb8c <HID_Device_USBTask+0x36>
     b8a:	8a c0       	rjmp	.+276    	; 0xca0 <HID_Device_USBTask+0x14a>
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     b8c:	80 91 e4 00 	lds	r24, 0x00E4
     b90:	90 91 e5 00 	lds	r25, 0x00E5
	  return;

	if (HIDInterfaceInfo->State.PrevFrameNum == USB_Device_GetFrameNumber())
     b94:	f7 01       	movw	r30, r14
     b96:	22 85       	ldd	r18, Z+10	; 0x0a
     b98:	33 85       	ldd	r19, Z+11	; 0x0b
     b9a:	28 17       	cp	r18, r24
     b9c:	39 07       	cpc	r19, r25
     b9e:	09 f4       	brne	.+2      	; 0xba2 <HID_Device_USBTask+0x4c>
     ba0:	7f c0       	rjmp	.+254    	; 0xca0 <HID_Device_USBTask+0x14a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     ba2:	81 81       	ldd	r24, Z+1	; 0x01
     ba4:	8f 70       	andi	r24, 0x0F	; 15
     ba6:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     baa:	80 91 e8 00 	lds	r24, 0x00E8
		#endif
	}

	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

	if (Endpoint_IsReadWriteAllowed())
     bae:	85 ff       	sbrs	r24, 5
     bb0:	77 c0       	rjmp	.+238    	; 0xca0 <HID_Device_USBTask+0x14a>
     bb2:	8d b6       	in	r8, 0x3d	; 61
     bb4:	9e b6       	in	r9, 0x3e	; 62
	{
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
     bb6:	40 85       	ldd	r20, Z+8	; 0x08
     bb8:	50 e0       	ldi	r21, 0x00	; 0
     bba:	8d b7       	in	r24, 0x3d	; 61
     bbc:	9e b7       	in	r25, 0x3e	; 62
     bbe:	84 1b       	sub	r24, r20
     bc0:	95 0b       	sbc	r25, r21
     bc2:	0f b6       	in	r0, 0x3f	; 63
     bc4:	f8 94       	cli
     bc6:	9e bf       	out	0x3e, r25	; 62
     bc8:	0f be       	out	0x3f, r0	; 63
     bca:	8d bf       	out	0x3d, r24	; 61
     bcc:	ed b7       	in	r30, 0x3d	; 61
     bce:	fe b7       	in	r31, 0x3e	; 62
     bd0:	31 96       	adiw	r30, 0x01	; 1
     bd2:	5f 01       	movw	r10, r30
		uint8_t  ReportID     = 0;
     bd4:	1b 82       	std	Y+3, r1	; 0x03
		uint16_t ReportINSize = 0;
     bd6:	1a 82       	std	Y+2, r1	; 0x02
     bd8:	19 82       	std	Y+1, r1	; 0x01

		memset(ReportINData, 0, sizeof(ReportINData));
     bda:	60 e0       	ldi	r22, 0x00	; 0
     bdc:	70 e0       	ldi	r23, 0x00	; 0
     bde:	cf 01       	movw	r24, r30
     be0:	d2 d5       	rcall	.+2980   	; 0x1786 <memset>

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
     be2:	8e 01       	movw	r16, r28
     be4:	0f 5f       	subi	r16, 0xFF	; 255
     be6:	1f 4f       	sbci	r17, 0xFF	; 255
     be8:	95 01       	movw	r18, r10
     bea:	40 e0       	ldi	r20, 0x00	; 0
     bec:	be 01       	movw	r22, r28
     bee:	6d 5f       	subi	r22, 0xFD	; 253
     bf0:	7f 4f       	sbci	r23, 0xFF	; 255
     bf2:	c7 01       	movw	r24, r14
     bf4:	1f dc       	rcall	.-1986   	; 0x434 <CALLBACK_HID_Device_CreateHIDReport>
     bf6:	68 2e       	mov	r6, r24
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
     bf8:	f7 01       	movw	r30, r14
     bfa:	24 85       	ldd	r18, Z+12	; 0x0c
     bfc:	35 85       	ldd	r19, Z+13	; 0x0d
     bfe:	23 2b       	or	r18, r19
     c00:	41 f0       	breq	.+16     	; 0xc12 <HID_Device_USBTask+0xbc>
     c02:	21 e0       	ldi	r18, 0x01	; 1
     c04:	86 85       	ldd	r24, Z+14	; 0x0e
     c06:	97 85       	ldd	r25, Z+15	; 0x0f
     c08:	89 2b       	or	r24, r25
     c0a:	09 f0       	breq	.+2      	; 0xc0e <HID_Device_USBTask+0xb8>
     c0c:	20 e0       	ldi	r18, 0x00	; 0
     c0e:	52 2e       	mov	r5, r18
     c10:	01 c0       	rjmp	.+2      	; 0xc14 <HID_Device_USBTask+0xbe>
     c12:	51 2c       	mov	r5, r1

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
     c14:	f7 01       	movw	r30, r14
     c16:	06 81       	ldd	r16, Z+6	; 0x06
     c18:	17 81       	ldd	r17, Z+7	; 0x07
     c1a:	01 15       	cp	r16, r1
     c1c:	11 05       	cpc	r17, r1
     c1e:	89 f0       	breq	.+34     	; 0xc42 <HID_Device_USBTask+0xec>
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
     c20:	49 81       	ldd	r20, Y+1	; 0x01
     c22:	5a 81       	ldd	r21, Y+2	; 0x02
     c24:	b8 01       	movw	r22, r16
     c26:	c5 01       	movw	r24, r10
     c28:	98 d5       	rcall	.+2864   	; 0x175a <memcmp>
     c2a:	77 24       	eor	r7, r7
     c2c:	73 94       	inc	r7
     c2e:	89 2b       	or	r24, r25
     c30:	09 f4       	brne	.+2      	; 0xc34 <HID_Device_USBTask+0xde>
     c32:	71 2c       	mov	r7, r1
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
     c34:	f7 01       	movw	r30, r14
     c36:	40 85       	ldd	r20, Z+8	; 0x08
     c38:	50 e0       	ldi	r21, 0x00	; 0
     c3a:	b5 01       	movw	r22, r10
     c3c:	c8 01       	movw	r24, r16
     c3e:	9a d5       	rcall	.+2868   	; 0x1774 <memcpy>
     c40:	01 c0       	rjmp	.+2      	; 0xc44 <HID_Device_USBTask+0xee>

		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
     c42:	71 2c       	mov	r7, r1
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
     c44:	29 81       	ldd	r18, Y+1	; 0x01
     c46:	3a 81       	ldd	r19, Y+2	; 0x02
     c48:	23 2b       	or	r18, r19
     c4a:	f1 f0       	breq	.+60     	; 0xc88 <HID_Device_USBTask+0x132>
     c4c:	61 10       	cpse	r6, r1
     c4e:	04 c0       	rjmp	.+8      	; 0xc58 <HID_Device_USBTask+0x102>
     c50:	71 10       	cpse	r7, r1
     c52:	02 c0       	rjmp	.+4      	; 0xc58 <HID_Device_USBTask+0x102>
     c54:	50 fe       	sbrs	r5, 0
     c56:	18 c0       	rjmp	.+48     	; 0xc88 <HID_Device_USBTask+0x132>
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
     c58:	f7 01       	movw	r30, r14
     c5a:	84 85       	ldd	r24, Z+12	; 0x0c
     c5c:	95 85       	ldd	r25, Z+13	; 0x0d
     c5e:	97 87       	std	Z+15, r25	; 0x0f
     c60:	86 87       	std	Z+14, r24	; 0x0e
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     c62:	81 81       	ldd	r24, Z+1	; 0x01
     c64:	8f 70       	andi	r24, 0x0F	; 15
     c66:	80 93 e9 00 	sts	0x00E9, r24

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

			if (ReportID)
     c6a:	8b 81       	ldd	r24, Y+3	; 0x03
     c6c:	81 11       	cpse	r24, r1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     c6e:	80 93 f1 00 	sts	0x00F1, r24
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
     c72:	69 81       	ldd	r22, Y+1	; 0x01
     c74:	7a 81       	ldd	r23, Y+2	; 0x02
     c76:	40 e0       	ldi	r20, 0x00	; 0
     c78:	50 e0       	ldi	r21, 0x00	; 0
     c7a:	c5 01       	movw	r24, r10
     c7c:	29 d0       	rcall	.+82     	; 0xcd0 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     c7e:	e8 ee       	ldi	r30, 0xE8	; 232
     c80:	f0 e0       	ldi	r31, 0x00	; 0
     c82:	80 81       	ld	r24, Z
     c84:	8e 77       	andi	r24, 0x7E	; 126
     c86:	80 83       	st	Z, r24
     c88:	80 91 e4 00 	lds	r24, 0x00E4
     c8c:	90 91 e5 00 	lds	r25, 0x00E5

			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
     c90:	f7 01       	movw	r30, r14
     c92:	93 87       	std	Z+11, r25	; 0x0b
     c94:	82 87       	std	Z+10, r24	; 0x0a
     c96:	0f b6       	in	r0, 0x3f	; 63
     c98:	f8 94       	cli
     c9a:	9e be       	out	0x3e, r9	; 62
     c9c:	0f be       	out	0x3f, r0	; 63
     c9e:	8d be       	out	0x3d, r8	; 61
	}
}
     ca0:	0f b6       	in	r0, 0x3f	; 63
     ca2:	f8 94       	cli
     ca4:	de be       	out	0x3e, r13	; 62
     ca6:	0f be       	out	0x3f, r0	; 63
     ca8:	cd be       	out	0x3d, r12	; 61
     caa:	0f 90       	pop	r0
     cac:	0f 90       	pop	r0
     cae:	0f 90       	pop	r0
     cb0:	df 91       	pop	r29
     cb2:	cf 91       	pop	r28
     cb4:	1f 91       	pop	r17
     cb6:	0f 91       	pop	r16
     cb8:	ff 90       	pop	r15
     cba:	ef 90       	pop	r14
     cbc:	df 90       	pop	r13
     cbe:	cf 90       	pop	r12
     cc0:	bf 90       	pop	r11
     cc2:	af 90       	pop	r10
     cc4:	9f 90       	pop	r9
     cc6:	8f 90       	pop	r8
     cc8:	7f 90       	pop	r7
     cca:	6f 90       	pop	r6
     ccc:	5f 90       	pop	r5
     cce:	08 95       	ret

00000cd0 <Endpoint_Write_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     cd0:	8f 92       	push	r8
     cd2:	9f 92       	push	r9
     cd4:	af 92       	push	r10
     cd6:	bf 92       	push	r11
     cd8:	cf 92       	push	r12
     cda:	df 92       	push	r13
     cdc:	ef 92       	push	r14
     cde:	ff 92       	push	r15
     ce0:	0f 93       	push	r16
     ce2:	1f 93       	push	r17
     ce4:	cf 93       	push	r28
     ce6:	df 93       	push	r29
     ce8:	7c 01       	movw	r14, r24
     cea:	eb 01       	movw	r28, r22
     cec:	5a 01       	movw	r10, r20
     cee:	88 d2       	rcall	.+1296   	; 0x1200 <Endpoint_WaitUntilReady>
     cf0:	81 11       	cpse	r24, r1
     cf2:	3e c0       	rjmp	.+124    	; 0xd70 <Endpoint_Write_Stream_LE+0xa0>
     cf4:	a1 14       	cp	r10, r1
     cf6:	b1 04       	cpc	r11, r1
     cf8:	39 f0       	breq	.+14     	; 0xd08 <Endpoint_Write_Stream_LE+0x38>
     cfa:	f5 01       	movw	r30, r10
     cfc:	80 81       	ld	r24, Z
     cfe:	91 81       	ldd	r25, Z+1	; 0x01
     d00:	c8 1b       	sub	r28, r24
     d02:	d9 0b       	sbc	r29, r25
     d04:	e8 0e       	add	r14, r24
     d06:	f9 1e       	adc	r15, r25
     d08:	20 97       	sbiw	r28, 0x00	; 0
     d0a:	79 f1       	breq	.+94     	; 0xd6a <Endpoint_Write_Stream_LE+0x9a>
     d0c:	00 e0       	ldi	r16, 0x00	; 0
     d0e:	10 e0       	ldi	r17, 0x00	; 0
     d10:	0f 2e       	mov	r0, r31
     d12:	f8 ee       	ldi	r31, 0xE8	; 232
     d14:	8f 2e       	mov	r8, r31
     d16:	91 2c       	mov	r9, r1
     d18:	f0 2d       	mov	r31, r0
     d1a:	0f 2e       	mov	r0, r31
     d1c:	f1 ef       	ldi	r31, 0xF1	; 241
     d1e:	cf 2e       	mov	r12, r31
     d20:	d1 2c       	mov	r13, r1
     d22:	f0 2d       	mov	r31, r0
     d24:	f4 01       	movw	r30, r8
     d26:	80 81       	ld	r24, Z
     d28:	85 fd       	sbrc	r24, 5
     d2a:	14 c0       	rjmp	.+40     	; 0xd54 <Endpoint_Write_Stream_LE+0x84>
     d2c:	80 81       	ld	r24, Z
     d2e:	8e 77       	andi	r24, 0x7E	; 126
     d30:	80 83       	st	Z, r24
     d32:	f2 d4       	rcall	.+2532   	; 0x1718 <USB_USBTask>
     d34:	a1 14       	cp	r10, r1
     d36:	b1 04       	cpc	r11, r1
     d38:	49 f0       	breq	.+18     	; 0xd4c <Endpoint_Write_Stream_LE+0x7c>
     d3a:	f5 01       	movw	r30, r10
     d3c:	80 81       	ld	r24, Z
     d3e:	91 81       	ldd	r25, Z+1	; 0x01
     d40:	08 0f       	add	r16, r24
     d42:	19 1f       	adc	r17, r25
     d44:	11 83       	std	Z+1, r17	; 0x01
     d46:	00 83       	st	Z, r16
     d48:	85 e0       	ldi	r24, 0x05	; 5
     d4a:	12 c0       	rjmp	.+36     	; 0xd70 <Endpoint_Write_Stream_LE+0xa0>
     d4c:	59 d2       	rcall	.+1202   	; 0x1200 <Endpoint_WaitUntilReady>
     d4e:	88 23       	and	r24, r24
     d50:	49 f0       	breq	.+18     	; 0xd64 <Endpoint_Write_Stream_LE+0x94>
     d52:	0e c0       	rjmp	.+28     	; 0xd70 <Endpoint_Write_Stream_LE+0xa0>
     d54:	f7 01       	movw	r30, r14
     d56:	81 91       	ld	r24, Z+
     d58:	7f 01       	movw	r14, r30
     d5a:	f6 01       	movw	r30, r12
     d5c:	80 83       	st	Z, r24
     d5e:	21 97       	sbiw	r28, 0x01	; 1
     d60:	0f 5f       	subi	r16, 0xFF	; 255
     d62:	1f 4f       	sbci	r17, 0xFF	; 255
     d64:	20 97       	sbiw	r28, 0x00	; 0
     d66:	f1 f6       	brne	.-68     	; 0xd24 <Endpoint_Write_Stream_LE+0x54>
     d68:	02 c0       	rjmp	.+4      	; 0xd6e <Endpoint_Write_Stream_LE+0x9e>
     d6a:	80 e0       	ldi	r24, 0x00	; 0
     d6c:	01 c0       	rjmp	.+2      	; 0xd70 <Endpoint_Write_Stream_LE+0xa0>
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	df 91       	pop	r29
     d72:	cf 91       	pop	r28
     d74:	1f 91       	pop	r17
     d76:	0f 91       	pop	r16
     d78:	ff 90       	pop	r15
     d7a:	ef 90       	pop	r14
     d7c:	df 90       	pop	r13
     d7e:	cf 90       	pop	r12
     d80:	bf 90       	pop	r11
     d82:	af 90       	pop	r10
     d84:	9f 90       	pop	r9
     d86:	8f 90       	pop	r8
     d88:	08 95       	ret

00000d8a <Endpoint_Write_Control_Stream_LE>:
     d8a:	0f 93       	push	r16
     d8c:	1f 93       	push	r17
     d8e:	cf 93       	push	r28
     d90:	df 93       	push	r29
     d92:	20 91 49 02 	lds	r18, 0x0249
     d96:	30 91 4a 02 	lds	r19, 0x024A
     d9a:	26 17       	cp	r18, r22
     d9c:	37 07       	cpc	r19, r23
     d9e:	58 f0       	brcs	.+22     	; 0xdb6 <Endpoint_Write_Control_Stream_LE+0x2c>
     da0:	61 15       	cp	r22, r1
     da2:	71 05       	cpc	r23, r1
     da4:	39 f4       	brne	.+14     	; 0xdb4 <Endpoint_Write_Control_Stream_LE+0x2a>
     da6:	e8 ee       	ldi	r30, 0xE8	; 232
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	20 81       	ld	r18, Z
     dac:	2e 77       	andi	r18, 0x7E	; 126
     dae:	20 83       	st	Z, r18
     db0:	9b 01       	movw	r18, r22
     db2:	01 c0       	rjmp	.+2      	; 0xdb6 <Endpoint_Write_Control_Stream_LE+0x2c>
     db4:	9b 01       	movw	r18, r22
     db6:	a0 e0       	ldi	r26, 0x00	; 0
     db8:	e8 ee       	ldi	r30, 0xE8	; 232
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	62 ef       	ldi	r22, 0xF2	; 242
     dbe:	70 e0       	ldi	r23, 0x00	; 0
     dc0:	c1 ef       	ldi	r28, 0xF1	; 241
     dc2:	d0 e0       	ldi	r29, 0x00	; 0
     dc4:	11 e0       	ldi	r17, 0x01	; 1
     dc6:	00 e0       	ldi	r16, 0x00	; 0
     dc8:	35 c0       	rjmp	.+106    	; 0xe34 <Endpoint_Write_Control_Stream_LE+0xaa>
     dca:	40 91 42 02 	lds	r20, 0x0242
     dce:	44 23       	and	r20, r20
     dd0:	09 f4       	brne	.+2      	; 0xdd4 <Endpoint_Write_Control_Stream_LE+0x4a>
     dd2:	41 c0       	rjmp	.+130    	; 0xe56 <Endpoint_Write_Control_Stream_LE+0xcc>
     dd4:	45 30       	cpi	r20, 0x05	; 5
     dd6:	09 f4       	brne	.+2      	; 0xdda <Endpoint_Write_Control_Stream_LE+0x50>
     dd8:	40 c0       	rjmp	.+128    	; 0xe5a <Endpoint_Write_Control_Stream_LE+0xd0>
     dda:	40 81       	ld	r20, Z
     ddc:	43 fd       	sbrc	r20, 3
     dde:	3f c0       	rjmp	.+126    	; 0xe5e <Endpoint_Write_Control_Stream_LE+0xd4>
     de0:	40 81       	ld	r20, Z
     de2:	42 ff       	sbrs	r20, 2
     de4:	03 c0       	rjmp	.+6      	; 0xdec <Endpoint_Write_Control_Stream_LE+0x62>
     de6:	e8 ee       	ldi	r30, 0xE8	; 232
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	30 c0       	rjmp	.+96     	; 0xe4c <Endpoint_Write_Control_Stream_LE+0xc2>
     dec:	40 81       	ld	r20, Z
     dee:	40 ff       	sbrs	r20, 0
     df0:	21 c0       	rjmp	.+66     	; 0xe34 <Endpoint_Write_Control_Stream_LE+0xaa>
     df2:	db 01       	movw	r26, r22
     df4:	4c 91       	ld	r20, X
     df6:	50 e0       	ldi	r21, 0x00	; 0
     df8:	21 15       	cp	r18, r1
     dfa:	31 05       	cpc	r19, r1
     dfc:	99 f0       	breq	.+38     	; 0xe24 <Endpoint_Write_Control_Stream_LE+0x9a>
     dfe:	48 30       	cpi	r20, 0x08	; 8
     e00:	51 05       	cpc	r21, r1
     e02:	80 f4       	brcc	.+32     	; 0xe24 <Endpoint_Write_Control_Stream_LE+0x9a>
     e04:	a8 2f       	mov	r26, r24
     e06:	b9 2f       	mov	r27, r25
     e08:	8d 91       	ld	r24, X+
     e0a:	88 83       	st	Y, r24
     e0c:	8a 2f       	mov	r24, r26
     e0e:	9b 2f       	mov	r25, r27
     e10:	21 50       	subi	r18, 0x01	; 1
     e12:	31 09       	sbc	r19, r1
     e14:	4f 5f       	subi	r20, 0xFF	; 255
     e16:	5f 4f       	sbci	r21, 0xFF	; 255
     e18:	21 15       	cp	r18, r1
     e1a:	31 05       	cpc	r19, r1
     e1c:	19 f0       	breq	.+6      	; 0xe24 <Endpoint_Write_Control_Stream_LE+0x9a>
     e1e:	48 30       	cpi	r20, 0x08	; 8
     e20:	51 05       	cpc	r21, r1
     e22:	91 f7       	brne	.-28     	; 0xe08 <Endpoint_Write_Control_Stream_LE+0x7e>
     e24:	a1 2f       	mov	r26, r17
     e26:	48 30       	cpi	r20, 0x08	; 8
     e28:	51 05       	cpc	r21, r1
     e2a:	09 f0       	breq	.+2      	; 0xe2e <Endpoint_Write_Control_Stream_LE+0xa4>
     e2c:	a0 2f       	mov	r26, r16
     e2e:	40 81       	ld	r20, Z
     e30:	4e 77       	andi	r20, 0x7E	; 126
     e32:	40 83       	st	Z, r20
     e34:	21 15       	cp	r18, r1
     e36:	31 05       	cpc	r19, r1
     e38:	41 f6       	brne	.-112    	; 0xdca <Endpoint_Write_Control_Stream_LE+0x40>
     e3a:	a1 11       	cpse	r26, r1
     e3c:	c6 cf       	rjmp	.-116    	; 0xdca <Endpoint_Write_Control_Stream_LE+0x40>
     e3e:	d3 cf       	rjmp	.-90     	; 0xde6 <Endpoint_Write_Control_Stream_LE+0x5c>
     e40:	80 91 42 02 	lds	r24, 0x0242
     e44:	88 23       	and	r24, r24
     e46:	69 f0       	breq	.+26     	; 0xe62 <Endpoint_Write_Control_Stream_LE+0xd8>
     e48:	85 30       	cpi	r24, 0x05	; 5
     e4a:	69 f0       	breq	.+26     	; 0xe66 <Endpoint_Write_Control_Stream_LE+0xdc>
     e4c:	80 81       	ld	r24, Z
     e4e:	82 ff       	sbrs	r24, 2
     e50:	f7 cf       	rjmp	.-18     	; 0xe40 <Endpoint_Write_Control_Stream_LE+0xb6>
     e52:	80 e0       	ldi	r24, 0x00	; 0
     e54:	09 c0       	rjmp	.+18     	; 0xe68 <Endpoint_Write_Control_Stream_LE+0xde>
     e56:	82 e0       	ldi	r24, 0x02	; 2
     e58:	07 c0       	rjmp	.+14     	; 0xe68 <Endpoint_Write_Control_Stream_LE+0xde>
     e5a:	83 e0       	ldi	r24, 0x03	; 3
     e5c:	05 c0       	rjmp	.+10     	; 0xe68 <Endpoint_Write_Control_Stream_LE+0xde>
     e5e:	81 e0       	ldi	r24, 0x01	; 1
     e60:	03 c0       	rjmp	.+6      	; 0xe68 <Endpoint_Write_Control_Stream_LE+0xde>
     e62:	82 e0       	ldi	r24, 0x02	; 2
     e64:	01 c0       	rjmp	.+2      	; 0xe68 <Endpoint_Write_Control_Stream_LE+0xde>
     e66:	83 e0       	ldi	r24, 0x03	; 3
     e68:	df 91       	pop	r29
     e6a:	cf 91       	pop	r28
     e6c:	1f 91       	pop	r17
     e6e:	0f 91       	pop	r16
     e70:	08 95       	ret

00000e72 <Endpoint_Read_Control_Stream_LE>:
     e72:	0f 93       	push	r16
     e74:	1f 93       	push	r17
     e76:	cf 93       	push	r28
     e78:	df 93       	push	r29
     e7a:	61 15       	cp	r22, r1
     e7c:	71 05       	cpc	r23, r1
     e7e:	29 f4       	brne	.+10     	; 0xe8a <Endpoint_Read_Control_Stream_LE+0x18>
     e80:	e8 ee       	ldi	r30, 0xE8	; 232
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	20 81       	ld	r18, Z
     e86:	2b 77       	andi	r18, 0x7B	; 123
     e88:	20 83       	st	Z, r18
     e8a:	e8 ee       	ldi	r30, 0xE8	; 232
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	02 ef       	ldi	r16, 0xF2	; 242
     e90:	10 e0       	ldi	r17, 0x00	; 0
     e92:	21 ef       	ldi	r18, 0xF1	; 241
     e94:	30 e0       	ldi	r19, 0x00	; 0
     e96:	1e c0       	rjmp	.+60     	; 0xed4 <Endpoint_Read_Control_Stream_LE+0x62>
     e98:	40 91 42 02 	lds	r20, 0x0242
     e9c:	44 23       	and	r20, r20
     e9e:	c1 f1       	breq	.+112    	; 0xf10 <Endpoint_Read_Control_Stream_LE+0x9e>
     ea0:	45 30       	cpi	r20, 0x05	; 5
     ea2:	c1 f1       	breq	.+112    	; 0xf14 <Endpoint_Read_Control_Stream_LE+0xa2>
     ea4:	40 81       	ld	r20, Z
     ea6:	43 fd       	sbrc	r20, 3
     ea8:	37 c0       	rjmp	.+110    	; 0xf18 <Endpoint_Read_Control_Stream_LE+0xa6>
     eaa:	40 81       	ld	r20, Z
     eac:	42 ff       	sbrs	r20, 2
     eae:	f4 cf       	rjmp	.-24     	; 0xe98 <Endpoint_Read_Control_Stream_LE+0x26>
     eb0:	3f c0       	rjmp	.+126    	; 0xf30 <Endpoint_Read_Control_Stream_LE+0xbe>
     eb2:	e9 01       	movw	r28, r18
     eb4:	88 81       	ld	r24, Y
     eb6:	8d 93       	st	X+, r24
     eb8:	8a 2f       	mov	r24, r26
     eba:	9b 2f       	mov	r25, r27
     ebc:	61 50       	subi	r22, 0x01	; 1
     ebe:	71 09       	sbc	r23, r1
     ec0:	61 15       	cp	r22, r1
     ec2:	71 05       	cpc	r23, r1
     ec4:	21 f0       	breq	.+8      	; 0xece <Endpoint_Read_Control_Stream_LE+0x5c>
     ec6:	e8 01       	movw	r28, r16
     ec8:	48 81       	ld	r20, Y
     eca:	41 11       	cpse	r20, r1
     ecc:	f2 cf       	rjmp	.-28     	; 0xeb2 <Endpoint_Read_Control_Stream_LE+0x40>
     ece:	40 81       	ld	r20, Z
     ed0:	4b 77       	andi	r20, 0x7B	; 123
     ed2:	40 83       	st	Z, r20
     ed4:	61 15       	cp	r22, r1
     ed6:	71 05       	cpc	r23, r1
     ed8:	19 f4       	brne	.+6      	; 0xee0 <Endpoint_Read_Control_Stream_LE+0x6e>
     eda:	e8 ee       	ldi	r30, 0xE8	; 232
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	13 c0       	rjmp	.+38     	; 0xf06 <Endpoint_Read_Control_Stream_LE+0x94>
     ee0:	40 91 42 02 	lds	r20, 0x0242
     ee4:	44 23       	and	r20, r20
     ee6:	d1 f0       	breq	.+52     	; 0xf1c <Endpoint_Read_Control_Stream_LE+0xaa>
     ee8:	45 30       	cpi	r20, 0x05	; 5
     eea:	d1 f0       	breq	.+52     	; 0xf20 <Endpoint_Read_Control_Stream_LE+0xae>
     eec:	40 81       	ld	r20, Z
     eee:	43 fd       	sbrc	r20, 3
     ef0:	19 c0       	rjmp	.+50     	; 0xf24 <Endpoint_Read_Control_Stream_LE+0xb2>
     ef2:	40 81       	ld	r20, Z
     ef4:	42 fd       	sbrc	r20, 2
     ef6:	1c c0       	rjmp	.+56     	; 0xf30 <Endpoint_Read_Control_Stream_LE+0xbe>
     ef8:	cf cf       	rjmp	.-98     	; 0xe98 <Endpoint_Read_Control_Stream_LE+0x26>
     efa:	80 91 42 02 	lds	r24, 0x0242
     efe:	88 23       	and	r24, r24
     f00:	99 f0       	breq	.+38     	; 0xf28 <Endpoint_Read_Control_Stream_LE+0xb6>
     f02:	85 30       	cpi	r24, 0x05	; 5
     f04:	99 f0       	breq	.+38     	; 0xf2c <Endpoint_Read_Control_Stream_LE+0xba>
     f06:	80 81       	ld	r24, Z
     f08:	80 ff       	sbrs	r24, 0
     f0a:	f7 cf       	rjmp	.-18     	; 0xefa <Endpoint_Read_Control_Stream_LE+0x88>
     f0c:	80 e0       	ldi	r24, 0x00	; 0
     f0e:	17 c0       	rjmp	.+46     	; 0xf3e <Endpoint_Read_Control_Stream_LE+0xcc>
     f10:	82 e0       	ldi	r24, 0x02	; 2
     f12:	15 c0       	rjmp	.+42     	; 0xf3e <Endpoint_Read_Control_Stream_LE+0xcc>
     f14:	83 e0       	ldi	r24, 0x03	; 3
     f16:	13 c0       	rjmp	.+38     	; 0xf3e <Endpoint_Read_Control_Stream_LE+0xcc>
     f18:	81 e0       	ldi	r24, 0x01	; 1
     f1a:	11 c0       	rjmp	.+34     	; 0xf3e <Endpoint_Read_Control_Stream_LE+0xcc>
     f1c:	82 e0       	ldi	r24, 0x02	; 2
     f1e:	0f c0       	rjmp	.+30     	; 0xf3e <Endpoint_Read_Control_Stream_LE+0xcc>
     f20:	83 e0       	ldi	r24, 0x03	; 3
     f22:	0d c0       	rjmp	.+26     	; 0xf3e <Endpoint_Read_Control_Stream_LE+0xcc>
     f24:	81 e0       	ldi	r24, 0x01	; 1
     f26:	0b c0       	rjmp	.+22     	; 0xf3e <Endpoint_Read_Control_Stream_LE+0xcc>
     f28:	82 e0       	ldi	r24, 0x02	; 2
     f2a:	09 c0       	rjmp	.+18     	; 0xf3e <Endpoint_Read_Control_Stream_LE+0xcc>
     f2c:	83 e0       	ldi	r24, 0x03	; 3
     f2e:	07 c0       	rjmp	.+14     	; 0xf3e <Endpoint_Read_Control_Stream_LE+0xcc>
     f30:	d8 01       	movw	r26, r16
     f32:	4c 91       	ld	r20, X
     f34:	44 23       	and	r20, r20
     f36:	59 f2       	breq	.-106    	; 0xece <Endpoint_Read_Control_Stream_LE+0x5c>
     f38:	a8 2f       	mov	r26, r24
     f3a:	b9 2f       	mov	r27, r25
     f3c:	ba cf       	rjmp	.-140    	; 0xeb2 <Endpoint_Read_Control_Stream_LE+0x40>
     f3e:	df 91       	pop	r29
     f40:	cf 91       	pop	r28
     f42:	1f 91       	pop	r17
     f44:	0f 91       	pop	r16
     f46:	08 95       	ret

00000f48 <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
     f48:	ef 92       	push	r14
     f4a:	ff 92       	push	r15
     f4c:	1f 93       	push	r17
     f4e:	cf 93       	push	r28
     f50:	df 93       	push	r29
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     f52:	20 91 49 02 	lds	r18, 0x0249
     f56:	30 91 4a 02 	lds	r19, 0x024A
     f5a:	26 17       	cp	r18, r22
     f5c:	37 07       	cpc	r19, r23
     f5e:	58 f0       	brcs	.+22     	; 0xf76 <Endpoint_Write_Control_PStream_LE+0x2e>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     f60:	61 15       	cp	r22, r1
     f62:	71 05       	cpc	r23, r1
     f64:	39 f4       	brne	.+14     	; 0xf74 <Endpoint_Write_Control_PStream_LE+0x2c>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     f66:	e8 ee       	ldi	r30, 0xE8	; 232
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	20 81       	ld	r18, Z
     f6c:	2e 77       	andi	r18, 0x7E	; 126
     f6e:	20 83       	st	Z, r18
     f70:	9b 01       	movw	r18, r22
     f72:	01 c0       	rjmp	.+2      	; 0xf76 <Endpoint_Write_Control_PStream_LE+0x2e>
     f74:	9b 01       	movw	r18, r22
     f76:	e8 2f       	mov	r30, r24
     f78:	f9 2f       	mov	r31, r25
     f7a:	60 e0       	ldi	r22, 0x00	; 0
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     f7c:	a8 ee       	ldi	r26, 0xE8	; 232
     f7e:	b0 e0       	ldi	r27, 0x00	; 0
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     f80:	42 ef       	ldi	r20, 0xF2	; 242
     f82:	50 e0       	ldi	r21, 0x00	; 0
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     f84:	0f 2e       	mov	r0, r31
     f86:	f1 ef       	ldi	r31, 0xF1	; 241
     f88:	ef 2e       	mov	r14, r31
     f8a:	f1 2c       	mov	r15, r1
     f8c:	f0 2d       	mov	r31, r0
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     f8e:	71 e0       	ldi	r23, 0x01	; 1
     f90:	10 e0       	ldi	r17, 0x00	; 0
     f92:	31 c0       	rjmp	.+98     	; 0xff6 <Endpoint_Write_Control_PStream_LE+0xae>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     f94:	80 91 42 02 	lds	r24, 0x0242

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     f98:	88 23       	and	r24, r24
     f9a:	09 f4       	brne	.+2      	; 0xf9e <Endpoint_Write_Control_PStream_LE+0x56>
     f9c:	3d c0       	rjmp	.+122    	; 0x1018 <Endpoint_Write_Control_PStream_LE+0xd0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     f9e:	85 30       	cpi	r24, 0x05	; 5
     fa0:	09 f4       	brne	.+2      	; 0xfa4 <Endpoint_Write_Control_PStream_LE+0x5c>
     fa2:	3c c0       	rjmp	.+120    	; 0x101c <Endpoint_Write_Control_PStream_LE+0xd4>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     fa4:	8c 91       	ld	r24, X
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     fa6:	83 fd       	sbrc	r24, 3
     fa8:	3b c0       	rjmp	.+118    	; 0x1020 <Endpoint_Write_Control_PStream_LE+0xd8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     faa:	8c 91       	ld	r24, X
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     fac:	82 ff       	sbrs	r24, 2
     fae:	03 c0       	rjmp	.+6      	; 0xfb6 <Endpoint_Write_Control_PStream_LE+0x6e>
     fb0:	e8 ee       	ldi	r30, 0xE8	; 232
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	2c c0       	rjmp	.+88     	; 0x100e <Endpoint_Write_Control_PStream_LE+0xc6>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     fb6:	8c 91       	ld	r24, X
		  break;

		if (Endpoint_IsINReady())
     fb8:	80 ff       	sbrs	r24, 0
     fba:	1d c0       	rjmp	.+58     	; 0xff6 <Endpoint_Write_Control_PStream_LE+0xae>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     fbc:	ea 01       	movw	r28, r20
     fbe:	88 81       	ld	r24, Y
     fc0:	90 e0       	ldi	r25, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     fc2:	21 15       	cp	r18, r1
     fc4:	31 05       	cpc	r19, r1
     fc6:	81 f0       	breq	.+32     	; 0xfe8 <Endpoint_Write_Control_PStream_LE+0xa0>
     fc8:	88 30       	cpi	r24, 0x08	; 8
     fca:	91 05       	cpc	r25, r1
     fcc:	68 f4       	brcc	.+26     	; 0xfe8 <Endpoint_Write_Control_PStream_LE+0xa0>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     fce:	64 91       	lpm	r22, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     fd0:	e7 01       	movw	r28, r14
     fd2:	68 83       	st	Y, r22
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     fd4:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     fd6:	21 50       	subi	r18, 0x01	; 1
     fd8:	31 09       	sbc	r19, r1
				BytesInEndpoint++;
     fda:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     fdc:	21 15       	cp	r18, r1
     fde:	31 05       	cpc	r19, r1
     fe0:	19 f0       	breq	.+6      	; 0xfe8 <Endpoint_Write_Control_PStream_LE+0xa0>
     fe2:	88 30       	cpi	r24, 0x08	; 8
     fe4:	91 05       	cpc	r25, r1
     fe6:	99 f7       	brne	.-26     	; 0xfce <Endpoint_Write_Control_PStream_LE+0x86>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     fe8:	67 2f       	mov	r22, r23
     fea:	08 97       	sbiw	r24, 0x08	; 8
     fec:	09 f0       	breq	.+2      	; 0xff0 <Endpoint_Write_Control_PStream_LE+0xa8>
     fee:	61 2f       	mov	r22, r17
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     ff0:	8c 91       	ld	r24, X
     ff2:	8e 77       	andi	r24, 0x7E	; 126
     ff4:	8c 93       	st	X, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     ff6:	21 15       	cp	r18, r1
     ff8:	31 05       	cpc	r19, r1
     ffa:	61 f6       	brne	.-104    	; 0xf94 <Endpoint_Write_Control_PStream_LE+0x4c>
     ffc:	61 11       	cpse	r22, r1
     ffe:	ca cf       	rjmp	.-108    	; 0xf94 <Endpoint_Write_Control_PStream_LE+0x4c>
    1000:	d7 cf       	rjmp	.-82     	; 0xfb0 <Endpoint_Write_Control_PStream_LE+0x68>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1002:	80 91 42 02 	lds	r24, 0x0242

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1006:	88 23       	and	r24, r24
    1008:	69 f0       	breq	.+26     	; 0x1024 <Endpoint_Write_Control_PStream_LE+0xdc>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    100a:	85 30       	cpi	r24, 0x05	; 5
    100c:	69 f0       	breq	.+26     	; 0x1028 <Endpoint_Write_Control_PStream_LE+0xe0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    100e:	80 81       	ld	r24, Z
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1010:	82 ff       	sbrs	r24, 2
    1012:	f7 cf       	rjmp	.-18     	; 0x1002 <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1014:	80 e0       	ldi	r24, 0x00	; 0
    1016:	09 c0       	rjmp	.+18     	; 0x102a <Endpoint_Write_Control_PStream_LE+0xe2>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1018:	82 e0       	ldi	r24, 0x02	; 2
    101a:	07 c0       	rjmp	.+14     	; 0x102a <Endpoint_Write_Control_PStream_LE+0xe2>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    101c:	83 e0       	ldi	r24, 0x03	; 3
    101e:	05 c0       	rjmp	.+10     	; 0x102a <Endpoint_Write_Control_PStream_LE+0xe2>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1020:	81 e0       	ldi	r24, 0x01	; 1
    1022:	03 c0       	rjmp	.+6      	; 0x102a <Endpoint_Write_Control_PStream_LE+0xe2>
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1024:	82 e0       	ldi	r24, 0x02	; 2
    1026:	01 c0       	rjmp	.+2      	; 0x102a <Endpoint_Write_Control_PStream_LE+0xe2>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1028:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    102a:	df 91       	pop	r29
    102c:	cf 91       	pop	r28
    102e:	1f 91       	pop	r17
    1030:	ff 90       	pop	r15
    1032:	ef 90       	pop	r14
    1034:	08 95       	ret

00001036 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
    1036:	8f 92       	push	r8
    1038:	9f 92       	push	r9
    103a:	bf 92       	push	r11
    103c:	cf 92       	push	r12
    103e:	df 92       	push	r13
    1040:	ef 92       	push	r14
    1042:	ff 92       	push	r15
    1044:	0f 93       	push	r16
    1046:	1f 93       	push	r17
    1048:	cf 93       	push	r28
    104a:	df 93       	push	r29
    104c:	85 30       	cpi	r24, 0x05	; 5
    104e:	70 f1       	brcs	.+92     	; 0x10ac <Endpoint_ConfigureEndpoint_Prv+0x76>
    1050:	26 c0       	rjmp	.+76     	; 0x109e <Endpoint_ConfigureEndpoint_Prv+0x68>
    1052:	59 2f       	mov	r21, r25
    1054:	5f 70       	andi	r21, 0x0F	; 15
    1056:	e8 01       	movw	r28, r16
    1058:	58 83       	st	Y, r21
    105a:	89 17       	cp	r24, r25
    105c:	31 f0       	breq	.+12     	; 0x106a <Endpoint_ConfigureEndpoint_Prv+0x34>
    105e:	e9 01       	movw	r28, r18
    1060:	d8 80       	ld	r13, Y
    1062:	50 81       	ld	r21, Z
    1064:	e4 01       	movw	r28, r8
    1066:	78 81       	ld	r23, Y
    1068:	03 c0       	rjmp	.+6      	; 0x1070 <Endpoint_ConfigureEndpoint_Prv+0x3a>
    106a:	5b 2d       	mov	r21, r11
    106c:	d6 2e       	mov	r13, r22
    106e:	7c 2d       	mov	r23, r12
    1070:	51 ff       	sbrs	r21, 1
    1072:	12 c0       	rjmp	.+36     	; 0x1098 <Endpoint_ConfigureEndpoint_Prv+0x62>
    1074:	4c 91       	ld	r20, X
    1076:	4e 7f       	andi	r20, 0xFE	; 254
    1078:	4c 93       	st	X, r20
    107a:	40 81       	ld	r20, Z
    107c:	4d 7f       	andi	r20, 0xFD	; 253
    107e:	40 83       	st	Z, r20
    1080:	4c 91       	ld	r20, X
    1082:	41 60       	ori	r20, 0x01	; 1
    1084:	4c 93       	st	X, r20
    1086:	e9 01       	movw	r28, r18
    1088:	d8 82       	st	Y, r13
    108a:	50 83       	st	Z, r21
    108c:	e4 01       	movw	r28, r8
    108e:	78 83       	st	Y, r23
    1090:	e7 01       	movw	r28, r14
    1092:	58 81       	ld	r21, Y
    1094:	55 23       	and	r21, r21
    1096:	44 f4       	brge	.+16     	; 0x10a8 <Endpoint_ConfigureEndpoint_Prv+0x72>
    1098:	9f 5f       	subi	r25, 0xFF	; 255
    109a:	95 30       	cpi	r25, 0x05	; 5
    109c:	d1 f6       	brne	.-76     	; 0x1052 <Endpoint_ConfigureEndpoint_Prv+0x1c>
    109e:	8f 70       	andi	r24, 0x0F	; 15
    10a0:	80 93 e9 00 	sts	0x00E9, r24
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	1f c0       	rjmp	.+62     	; 0x10e6 <Endpoint_ConfigureEndpoint_Prv+0xb0>
    10a8:	80 e0       	ldi	r24, 0x00	; 0
    10aa:	1d c0       	rjmp	.+58     	; 0x10e6 <Endpoint_ConfigureEndpoint_Prv+0xb0>
    10ac:	98 2f       	mov	r25, r24
    10ae:	9f 70       	andi	r25, 0x0F	; 15
    10b0:	90 93 e9 00 	sts	0x00E9, r25
    10b4:	98 2f       	mov	r25, r24
    10b6:	54 2f       	mov	r21, r20
    10b8:	d6 2e       	mov	r13, r22
    10ba:	70 e0       	ldi	r23, 0x00	; 0
    10bc:	ab ee       	ldi	r26, 0xEB	; 235
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	ed ee       	ldi	r30, 0xED	; 237
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	2c ee       	ldi	r18, 0xEC	; 236
    10c6:	30 e0       	ldi	r19, 0x00	; 0
    10c8:	0f 2e       	mov	r0, r31
    10ca:	f0 ef       	ldi	r31, 0xF0	; 240
    10cc:	8f 2e       	mov	r8, r31
    10ce:	91 2c       	mov	r9, r1
    10d0:	f0 2d       	mov	r31, r0
    10d2:	0f 2e       	mov	r0, r31
    10d4:	fe ee       	ldi	r31, 0xEE	; 238
    10d6:	ef 2e       	mov	r14, r31
    10d8:	f1 2c       	mov	r15, r1
    10da:	f0 2d       	mov	r31, r0
    10dc:	09 ee       	ldi	r16, 0xE9	; 233
    10de:	10 e0       	ldi	r17, 0x00	; 0
    10e0:	b4 2e       	mov	r11, r20
    10e2:	c1 2c       	mov	r12, r1
    10e4:	c5 cf       	rjmp	.-118    	; 0x1070 <Endpoint_ConfigureEndpoint_Prv+0x3a>
    10e6:	df 91       	pop	r29
    10e8:	cf 91       	pop	r28
    10ea:	1f 91       	pop	r17
    10ec:	0f 91       	pop	r16
    10ee:	ff 90       	pop	r15
    10f0:	ef 90       	pop	r14
    10f2:	df 90       	pop	r13
    10f4:	cf 90       	pop	r12
    10f6:	bf 90       	pop	r11
    10f8:	9f 90       	pop	r9
    10fa:	8f 90       	pop	r8
    10fc:	08 95       	ret

000010fe <Endpoint_ConfigureEndpointTable>:
    10fe:	bf 92       	push	r11
    1100:	cf 92       	push	r12
    1102:	df 92       	push	r13
    1104:	ef 92       	push	r14
    1106:	ff 92       	push	r15
    1108:	0f 93       	push	r16
    110a:	1f 93       	push	r17
    110c:	cf 93       	push	r28
    110e:	df 93       	push	r29
    1110:	06 2f       	mov	r16, r22
    1112:	66 23       	and	r22, r22
    1114:	09 f4       	brne	.+2      	; 0x1118 <Endpoint_ConfigureEndpointTable+0x1a>
    1116:	41 c0       	rjmp	.+130    	; 0x119a <Endpoint_ConfigureEndpointTable+0x9c>
    1118:	c8 2f       	mov	r28, r24
    111a:	d9 2f       	mov	r29, r25
    111c:	10 e0       	ldi	r17, 0x00	; 0
    111e:	f1 2c       	mov	r15, r1
    1120:	68 94       	set
    1122:	dd 24       	eor	r13, r13
    1124:	d3 f8       	bld	r13, 3
    1126:	e1 2c       	mov	r14, r1
    1128:	68 94       	set
    112a:	bb 24       	eor	r11, r11
    112c:	b1 f8       	bld	r11, 1
    112e:	0f 2e       	mov	r0, r31
    1130:	f6 e0       	ldi	r31, 0x06	; 6
    1132:	cf 2e       	mov	r12, r31
    1134:	f0 2d       	mov	r31, r0
    1136:	58 81       	ld	r21, Y
    1138:	55 23       	and	r21, r21
    113a:	51 f1       	breq	.+84     	; 0x1190 <Endpoint_ConfigureEndpointTable+0x92>
    113c:	9c 81       	ldd	r25, Y+4	; 0x04
    113e:	e9 81       	ldd	r30, Y+1	; 0x01
    1140:	fa 81       	ldd	r31, Y+2	; 0x02
    1142:	7b 81       	ldd	r23, Y+3	; 0x03
    1144:	85 2f       	mov	r24, r21
    1146:	8f 70       	andi	r24, 0x0F	; 15
    1148:	85 30       	cpi	r24, 0x05	; 5
    114a:	48 f5       	brcc	.+82     	; 0x119e <Endpoint_ConfigureEndpointTable+0xa0>
    114c:	92 30       	cpi	r25, 0x02	; 2
    114e:	10 f0       	brcs	.+4      	; 0x1154 <Endpoint_ConfigureEndpointTable+0x56>
    1150:	4c 2d       	mov	r20, r12
    1152:	01 c0       	rjmp	.+2      	; 0x1156 <Endpoint_ConfigureEndpointTable+0x58>
    1154:	4b 2d       	mov	r20, r11
    1156:	e9 30       	cpi	r30, 0x09	; 9
    1158:	f1 05       	cpc	r31, r1
    115a:	50 f0       	brcs	.+20     	; 0x1170 <Endpoint_ConfigureEndpointTable+0x72>
    115c:	2d 2d       	mov	r18, r13
    115e:	3e 2d       	mov	r19, r14
    1160:	9f 2d       	mov	r25, r15
    1162:	9f 5f       	subi	r25, 0xFF	; 255
    1164:	22 0f       	add	r18, r18
    1166:	33 1f       	adc	r19, r19
    1168:	2e 17       	cp	r18, r30
    116a:	3f 07       	cpc	r19, r31
    116c:	d0 f3       	brcs	.-12     	; 0x1162 <Endpoint_ConfigureEndpointTable+0x64>
    116e:	01 c0       	rjmp	.+2      	; 0x1172 <Endpoint_ConfigureEndpointTable+0x74>
    1170:	9f 2d       	mov	r25, r15
    1172:	92 95       	swap	r25
    1174:	90 7f       	andi	r25, 0xF0	; 240
    1176:	49 2b       	or	r20, r25
    1178:	55 1f       	adc	r21, r21
    117a:	55 27       	eor	r21, r21
    117c:	55 1f       	adc	r21, r21
    117e:	72 95       	swap	r23
    1180:	77 0f       	add	r23, r23
    1182:	77 0f       	add	r23, r23
    1184:	70 7c       	andi	r23, 0xC0	; 192
    1186:	67 2f       	mov	r22, r23
    1188:	65 2b       	or	r22, r21
    118a:	55 df       	rcall	.-342    	; 0x1036 <Endpoint_ConfigureEndpoint_Prv>
    118c:	88 23       	and	r24, r24
    118e:	51 f0       	breq	.+20     	; 0x11a4 <Endpoint_ConfigureEndpointTable+0xa6>
    1190:	1f 5f       	subi	r17, 0xFF	; 255
    1192:	25 96       	adiw	r28, 0x05	; 5
    1194:	10 13       	cpse	r17, r16
    1196:	cf cf       	rjmp	.-98     	; 0x1136 <Endpoint_ConfigureEndpointTable+0x38>
    1198:	04 c0       	rjmp	.+8      	; 0x11a2 <Endpoint_ConfigureEndpointTable+0xa4>
    119a:	81 e0       	ldi	r24, 0x01	; 1
    119c:	03 c0       	rjmp	.+6      	; 0x11a4 <Endpoint_ConfigureEndpointTable+0xa6>
    119e:	80 e0       	ldi	r24, 0x00	; 0
    11a0:	01 c0       	rjmp	.+2      	; 0x11a4 <Endpoint_ConfigureEndpointTable+0xa6>
    11a2:	81 e0       	ldi	r24, 0x01	; 1
    11a4:	df 91       	pop	r29
    11a6:	cf 91       	pop	r28
    11a8:	1f 91       	pop	r17
    11aa:	0f 91       	pop	r16
    11ac:	ff 90       	pop	r15
    11ae:	ef 90       	pop	r14
    11b0:	df 90       	pop	r13
    11b2:	cf 90       	pop	r12
    11b4:	bf 90       	pop	r11
    11b6:	08 95       	ret

000011b8 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    11b8:	80 91 43 02 	lds	r24, 0x0243
    11bc:	88 23       	and	r24, r24
    11be:	1c f0       	brlt	.+6      	; 0x11c6 <Endpoint_ClearStatusStage+0xe>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    11c0:	e8 ee       	ldi	r30, 0xE8	; 232
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	14 c0       	rjmp	.+40     	; 0x11ee <Endpoint_ClearStatusStage+0x36>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    11c6:	e8 ee       	ldi	r30, 0xE8	; 232
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	04 c0       	rjmp	.+8      	; 0x11d4 <Endpoint_ClearStatusStage+0x1c>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    11cc:	80 91 42 02 	lds	r24, 0x0242
    11d0:	88 23       	and	r24, r24
    11d2:	a9 f0       	breq	.+42     	; 0x11fe <Endpoint_ClearStatusStage+0x46>
    11d4:	80 81       	ld	r24, Z

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    11d6:	82 ff       	sbrs	r24, 2
    11d8:	f9 cf       	rjmp	.-14     	; 0x11cc <Endpoint_ClearStatusStage+0x14>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    11da:	e8 ee       	ldi	r30, 0xE8	; 232
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	80 81       	ld	r24, Z
    11e0:	8b 77       	andi	r24, 0x7B	; 123
    11e2:	80 83       	st	Z, r24
    11e4:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    11e6:	80 91 42 02 	lds	r24, 0x0242
    11ea:	88 23       	and	r24, r24
    11ec:	41 f0       	breq	.+16     	; 0x11fe <Endpoint_ClearStatusStage+0x46>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    11ee:	80 81       	ld	r24, Z

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    11f0:	80 ff       	sbrs	r24, 0
    11f2:	f9 cf       	rjmp	.-14     	; 0x11e6 <Endpoint_ClearStatusStage+0x2e>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    11f4:	e8 ee       	ldi	r30, 0xE8	; 232
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	80 81       	ld	r24, Z
    11fa:	8e 77       	andi	r24, 0x7E	; 126
    11fc:	80 83       	st	Z, r24
    11fe:	08 95       	ret

00001200 <Endpoint_WaitUntilReady>:
	}
}

#if !defined(CONTROL_ONLY_DEVICE)
uint8_t Endpoint_WaitUntilReady(void)
{
    1200:	0f 93       	push	r16
    1202:	1f 93       	push	r17
    1204:	cf 93       	push	r28
    1206:	df 93       	push	r29
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1208:	20 91 e4 00 	lds	r18, 0x00E4
    120c:	30 91 e5 00 	lds	r19, 0x00E5
    1210:	65 e6       	ldi	r22, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1212:	ac ee       	ldi	r26, 0xEC	; 236
    1214:	b0 e0       	ldi	r27, 0x00	; 0
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1216:	e8 ee       	ldi	r30, 0xE8	; 232
    1218:	f0 e0       	ldi	r31, 0x00	; 0
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    121a:	0b ee       	ldi	r16, 0xEB	; 235
    121c:	10 e0       	ldi	r17, 0x00	; 0
    121e:	44 ee       	ldi	r20, 0xE4	; 228
    1220:	50 e0       	ldi	r21, 0x00	; 0
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1222:	8c 91       	ld	r24, X
    1224:	80 fd       	sbrc	r24, 0
    1226:	21 c0       	rjmp	.+66     	; 0x126a <Endpoint_WaitUntilReady+0x6a>
    1228:	24 c0       	rjmp	.+72     	; 0x1272 <Endpoint_WaitUntilReady+0x72>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    122a:	80 91 42 02 	lds	r24, 0x0242

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    122e:	88 23       	and	r24, r24
    1230:	81 f0       	breq	.+32     	; 0x1252 <Endpoint_WaitUntilReady+0x52>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1232:	85 30       	cpi	r24, 0x05	; 5
    1234:	81 f0       	breq	.+32     	; 0x1256 <Endpoint_WaitUntilReady+0x56>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1236:	e8 01       	movw	r28, r16
    1238:	88 81       	ld	r24, Y
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    123a:	85 fd       	sbrc	r24, 5
    123c:	0e c0       	rjmp	.+28     	; 0x125a <Endpoint_WaitUntilReady+0x5a>
    123e:	ea 01       	movw	r28, r20
    1240:	88 81       	ld	r24, Y
    1242:	99 81       	ldd	r25, Y+1	; 0x01
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1244:	28 17       	cp	r18, r24
    1246:	39 07       	cpc	r19, r25
    1248:	61 f3       	breq	.-40     	; 0x1222 <Endpoint_WaitUntilReady+0x22>
    124a:	61 50       	subi	r22, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    124c:	41 f0       	breq	.+16     	; 0x125e <Endpoint_WaitUntilReady+0x5e>
    124e:	9c 01       	movw	r18, r24
    1250:	e8 cf       	rjmp	.-48     	; 0x1222 <Endpoint_WaitUntilReady+0x22>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    1252:	82 e0       	ldi	r24, 0x02	; 2
    1254:	12 c0       	rjmp	.+36     	; 0x127a <Endpoint_WaitUntilReady+0x7a>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    1256:	83 e0       	ldi	r24, 0x03	; 3
    1258:	10 c0       	rjmp	.+32     	; 0x127a <Endpoint_WaitUntilReady+0x7a>
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    125a:	81 e0       	ldi	r24, 0x01	; 1
    125c:	0e c0       	rjmp	.+28     	; 0x127a <Endpoint_WaitUntilReady+0x7a>
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
    125e:	84 e0       	ldi	r24, 0x04	; 4
    1260:	0c c0       	rjmp	.+24     	; 0x127a <Endpoint_WaitUntilReady+0x7a>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    1262:	80 e0       	ldi	r24, 0x00	; 0
    1264:	0a c0       	rjmp	.+20     	; 0x127a <Endpoint_WaitUntilReady+0x7a>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
    1266:	80 e0       	ldi	r24, 0x00	; 0
    1268:	08 c0       	rjmp	.+16     	; 0x127a <Endpoint_WaitUntilReady+0x7a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    126a:	80 81       	ld	r24, Z

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    126c:	80 ff       	sbrs	r24, 0
    126e:	dd cf       	rjmp	.-70     	; 0x122a <Endpoint_WaitUntilReady+0x2a>
    1270:	f8 cf       	rjmp	.-16     	; 0x1262 <Endpoint_WaitUntilReady+0x62>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1272:	80 81       	ld	r24, Z
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    1274:	82 ff       	sbrs	r24, 2
    1276:	d9 cf       	rjmp	.-78     	; 0x122a <Endpoint_WaitUntilReady+0x2a>
    1278:	f6 cf       	rjmp	.-20     	; 0x1266 <Endpoint_WaitUntilReady+0x66>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    127a:	df 91       	pop	r29
    127c:	cf 91       	pop	r28
    127e:	1f 91       	pop	r17
    1280:	0f 91       	pop	r16
    1282:	08 95       	ret

00001284 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    1284:	3c d0       	rcall	.+120    	; 0x12fe <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1286:	3e d0       	rcall	.+124    	; 0x1304 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    1288:	e8 ed       	ldi	r30, 0xD8	; 216
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	80 81       	ld	r24, Z
    128e:	8f 77       	andi	r24, 0x7F	; 127
    1290:	80 83       	st	Z, r24
				USBCON |=  (1 << USBE);
    1292:	80 81       	ld	r24, Z
    1294:	80 68       	ori	r24, 0x80	; 128
    1296:	80 83       	st	Z, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1298:	80 81       	ld	r24, Z
    129a:	8f 7d       	andi	r24, 0xDF	; 223
    129c:	80 83       	st	Z, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    129e:	84 e0       	ldi	r24, 0x04	; 4
    12a0:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    12a2:	86 e0       	ldi	r24, 0x06	; 6
    12a4:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    12a6:	09 b4       	in	r0, 0x29	; 41
    12a8:	00 fe       	sbrs	r0, 0
    12aa:	fd cf       	rjmp	.-6      	; 0x12a6 <USB_ResetInterface+0x22>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    12ac:	10 92 42 02 	sts	0x0242, r1
	USB_Device_ConfigurationNumber  = 0;
    12b0:	10 92 3e 02 	sts	0x023E, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    12b4:	10 92 40 02 	sts	0x0240, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    12b8:	10 92 3f 02 	sts	0x023F, r1
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    12bc:	42 e0       	ldi	r20, 0x02	; 2
    12be:	60 e0       	ldi	r22, 0x00	; 0
    12c0:	80 e0       	ldi	r24, 0x00	; 0
    12c2:	b9 de       	rcall	.-654    	; 0x1036 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    12c4:	e1 ee       	ldi	r30, 0xE1	; 225
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	80 81       	ld	r24, Z
    12ca:	8e 7f       	andi	r24, 0xFE	; 254
    12cc:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    12ce:	e2 ee       	ldi	r30, 0xE2	; 226
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	80 81       	ld	r24, Z
    12d4:	81 60       	ori	r24, 0x01	; 1
    12d6:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    12d8:	80 81       	ld	r24, Z
    12da:	88 60       	ori	r24, 0x08	; 8
    12dc:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    12de:	e0 ee       	ldi	r30, 0xE0	; 224
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	80 81       	ld	r24, Z
    12e4:	8e 7f       	andi	r24, 0xFE	; 254
    12e6:	80 83       	st	Z, r24
    12e8:	08 95       	ret

000012ea <USB_Init>:
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
			#else
				REGCR  &= ~(1 << REGDIS);
    12ea:	e3 e6       	ldi	r30, 0x63	; 99
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	80 81       	ld	r24, Z
    12f0:	8e 7f       	andi	r24, 0xFE	; 254
    12f2:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    12f4:	81 e0       	ldi	r24, 0x01	; 1
    12f6:	80 93 41 02 	sts	0x0241, r24

	USB_ResetInterface();
    12fa:	c4 cf       	rjmp	.-120    	; 0x1284 <USB_ResetInterface>
    12fc:	08 95       	ret

000012fe <USB_INT_DisableAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    12fe:	10 92 e2 00 	sts	0x00E2, r1
    1302:	08 95       	ret

00001304 <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    1304:	10 92 e1 00 	sts	0x00E1, r1
    1308:	08 95       	ret

0000130a <__vector_11>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    130a:	1f 92       	push	r1
    130c:	0f 92       	push	r0
    130e:	0f b6       	in	r0, 0x3f	; 63
    1310:	0f 92       	push	r0
    1312:	11 24       	eor	r1, r1
    1314:	2f 93       	push	r18
    1316:	3f 93       	push	r19
    1318:	4f 93       	push	r20
    131a:	5f 93       	push	r21
    131c:	6f 93       	push	r22
    131e:	7f 93       	push	r23
    1320:	8f 93       	push	r24
    1322:	9f 93       	push	r25
    1324:	af 93       	push	r26
    1326:	bf 93       	push	r27
    1328:	ef 93       	push	r30
    132a:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    132c:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    1330:	82 ff       	sbrs	r24, 2
    1332:	0b c0       	rjmp	.+22     	; 0x134a <__vector_11+0x40>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    1334:	80 91 e2 00 	lds	r24, 0x00E2
    1338:	82 ff       	sbrs	r24, 2
    133a:	07 c0       	rjmp	.+14     	; 0x134a <__vector_11+0x40>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    133c:	e1 ee       	ldi	r30, 0xE1	; 225
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	80 81       	ld	r24, Z
    1342:	8b 7f       	andi	r24, 0xFB	; 251
    1344:	80 83       	st	Z, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    1346:	0e 94 69 01 	call	0x2d2	; 0x2d2 <EVENT_USB_Device_StartOfFrame>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    134a:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    134e:	80 ff       	sbrs	r24, 0
    1350:	16 c0       	rjmp	.+44     	; 0x137e <__vector_11+0x74>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    1352:	80 91 e2 00 	lds	r24, 0x00E2
    1356:	80 ff       	sbrs	r24, 0
    1358:	12 c0       	rjmp	.+36     	; 0x137e <__vector_11+0x74>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    135a:	e2 ee       	ldi	r30, 0xE2	; 226
    135c:	f0 e0       	ldi	r31, 0x00	; 0
    135e:	80 81       	ld	r24, Z
    1360:	8e 7f       	andi	r24, 0xFE	; 254
    1362:	80 83       	st	Z, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1364:	80 81       	ld	r24, Z
    1366:	80 61       	ori	r24, 0x10	; 16
    1368:	80 83       	st	Z, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    136a:	e8 ed       	ldi	r30, 0xD8	; 216
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	80 81       	ld	r24, Z
    1370:	80 62       	ori	r24, 0x20	; 32
    1372:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1374:	19 bc       	out	0x29, r1	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
    1376:	10 92 42 02 	sts	0x0242, r1
		EVENT_USB_Device_Disconnect();
    137a:	0e 94 55 01 	call	0x2aa	; 0x2aa <EVENT_USB_Device_Disconnect>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    137e:	80 91 e1 00 	lds	r24, 0x00E1
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    1382:	84 ff       	sbrs	r24, 4
    1384:	30 c0       	rjmp	.+96     	; 0x13e6 <__vector_11+0xdc>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    1386:	80 91 e2 00 	lds	r24, 0x00E2
    138a:	84 ff       	sbrs	r24, 4
    138c:	2c c0       	rjmp	.+88     	; 0x13e6 <__vector_11+0xdc>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    138e:	84 e0       	ldi	r24, 0x04	; 4
    1390:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1392:	86 e0       	ldi	r24, 0x06	; 6
    1394:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1396:	09 b4       	in	r0, 0x29	; 41
    1398:	00 fe       	sbrs	r0, 0
    139a:	fd cf       	rjmp	.-6      	; 0x1396 <__vector_11+0x8c>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    139c:	e8 ed       	ldi	r30, 0xD8	; 216
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	80 81       	ld	r24, Z
    13a2:	8f 7d       	andi	r24, 0xDF	; 223
    13a4:	80 83       	st	Z, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    13a6:	e1 ee       	ldi	r30, 0xE1	; 225
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	80 81       	ld	r24, Z
    13ac:	8f 7e       	andi	r24, 0xEF	; 239
    13ae:	80 83       	st	Z, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    13b0:	e2 ee       	ldi	r30, 0xE2	; 226
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	80 81       	ld	r24, Z
    13b6:	8f 7e       	andi	r24, 0xEF	; 239
    13b8:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    13ba:	80 81       	ld	r24, Z
    13bc:	81 60       	ori	r24, 0x01	; 1
    13be:	80 83       	st	Z, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    13c0:	80 91 3e 02 	lds	r24, 0x023E
    13c4:	88 23       	and	r24, r24
    13c6:	21 f0       	breq	.+8      	; 0x13d0 <__vector_11+0xc6>
		  USB_DeviceState = DEVICE_STATE_Configured;
    13c8:	84 e0       	ldi	r24, 0x04	; 4
    13ca:	80 93 42 02 	sts	0x0242, r24
    13ce:	09 c0       	rjmp	.+18     	; 0x13e2 <__vector_11+0xd8>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    13d0:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    13d4:	88 23       	and	r24, r24
    13d6:	14 f4       	brge	.+4      	; 0x13dc <__vector_11+0xd2>
    13d8:	83 e0       	ldi	r24, 0x03	; 3
    13da:	01 c0       	rjmp	.+2      	; 0x13de <__vector_11+0xd4>
    13dc:	81 e0       	ldi	r24, 0x01	; 1
    13de:	80 93 42 02 	sts	0x0242, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
    13e2:	0e 94 54 01 	call	0x2a8	; 0x2a8 <EVENT_USB_Device_Connect>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    13e6:	80 91 e1 00 	lds	r24, 0x00E1
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    13ea:	83 ff       	sbrs	r24, 3
    13ec:	1e c0       	rjmp	.+60     	; 0x142a <__vector_11+0x120>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    13ee:	80 91 e2 00 	lds	r24, 0x00E2
    13f2:	83 ff       	sbrs	r24, 3
    13f4:	1a c0       	rjmp	.+52     	; 0x142a <__vector_11+0x120>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    13f6:	e1 ee       	ldi	r30, 0xE1	; 225
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	80 81       	ld	r24, Z
    13fc:	87 7f       	andi	r24, 0xF7	; 247
    13fe:	80 83       	st	Z, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    1400:	82 e0       	ldi	r24, 0x02	; 2
    1402:	80 93 42 02 	sts	0x0242, r24
		USB_Device_ConfigurationNumber = 0;
    1406:	10 92 3e 02 	sts	0x023E, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    140a:	80 81       	ld	r24, Z
    140c:	8e 7f       	andi	r24, 0xFE	; 254
    140e:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1410:	e2 ee       	ldi	r30, 0xE2	; 226
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	80 81       	ld	r24, Z
    1416:	8e 7f       	andi	r24, 0xFE	; 254
    1418:	80 83       	st	Z, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    141a:	80 81       	ld	r24, Z
    141c:	80 61       	ori	r24, 0x10	; 16
    141e:	80 83       	st	Z, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1420:	42 e0       	ldi	r20, 0x02	; 2
    1422:	60 e0       	ldi	r22, 0x00	; 0
    1424:	80 e0       	ldi	r24, 0x00	; 0
    1426:	07 de       	rcall	.-1010   	; 0x1036 <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    1428:	76 d1       	rcall	.+748    	; 0x1716 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    142a:	ff 91       	pop	r31
    142c:	ef 91       	pop	r30
    142e:	bf 91       	pop	r27
    1430:	af 91       	pop	r26
    1432:	9f 91       	pop	r25
    1434:	8f 91       	pop	r24
    1436:	7f 91       	pop	r23
    1438:	6f 91       	pop	r22
    143a:	5f 91       	pop	r21
    143c:	4f 91       	pop	r20
    143e:	3f 91       	pop	r19
    1440:	2f 91       	pop	r18
    1442:	0f 90       	pop	r0
    1444:	0f be       	out	0x3f, r0	; 63
    1446:	0f 90       	pop	r0
    1448:	1f 90       	pop	r1
    144a:	18 95       	reti

0000144c <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    144c:	0f 93       	push	r16
    144e:	1f 93       	push	r17
    1450:	cf 93       	push	r28
    1452:	df 93       	push	r29
    1454:	cd b7       	in	r28, 0x3d	; 61
    1456:	de b7       	in	r29, 0x3e	; 62
    1458:	aa 97       	sbiw	r28, 0x2a	; 42
    145a:	0f b6       	in	r0, 0x3f	; 63
    145c:	f8 94       	cli
    145e:	de bf       	out	0x3e, r29	; 62
    1460:	0f be       	out	0x3f, r0	; 63
    1462:	cd bf       	out	0x3d, r28	; 61
    1464:	e3 e4       	ldi	r30, 0x43	; 67
    1466:	f2 e0       	ldi	r31, 0x02	; 2
    1468:	8b e4       	ldi	r24, 0x4B	; 75
    146a:	92 e0       	ldi	r25, 0x02	; 2
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    146c:	a1 ef       	ldi	r26, 0xF1	; 241
    146e:	b0 e0       	ldi	r27, 0x00	; 0
    1470:	2c 91       	ld	r18, X
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1472:	21 93       	st	Z+, r18
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1474:	e8 17       	cp	r30, r24
    1476:	f9 07       	cpc	r31, r25
    1478:	d9 f7       	brne	.-10     	; 0x1470 <USB_Device_ProcessControlRequest+0x24>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    147a:	0e 94 62 01 	call	0x2c4	; 0x2c4 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    147e:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    1482:	83 ff       	sbrs	r24, 3
    1484:	23 c1       	rjmp	.+582    	; 0x16cc <USB_Device_ProcessControlRequest+0x280>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1486:	30 91 43 02 	lds	r19, 0x0243

		switch (USB_ControlRequest.bRequest)
    148a:	20 91 44 02 	lds	r18, 0x0244
    148e:	82 2f       	mov	r24, r18
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	8a 30       	cpi	r24, 0x0A	; 10
    1494:	91 05       	cpc	r25, r1
    1496:	08 f0       	brcs	.+2      	; 0x149a <USB_Device_ProcessControlRequest+0x4e>
    1498:	19 c1       	rjmp	.+562    	; 0x16cc <USB_Device_ProcessControlRequest+0x280>
    149a:	fc 01       	movw	r30, r24
    149c:	e6 5c       	subi	r30, 0xC6	; 198
    149e:	ff 4f       	sbci	r31, 0xFF	; 255
    14a0:	56 c1       	rjmp	.+684    	; 0x174e <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    14a2:	30 38       	cpi	r19, 0x80	; 128
    14a4:	21 f0       	breq	.+8      	; 0x14ae <USB_Device_ProcessControlRequest+0x62>
    14a6:	32 38       	cpi	r19, 0x82	; 130
    14a8:	09 f0       	breq	.+2      	; 0x14ac <USB_Device_ProcessControlRequest+0x60>
    14aa:	10 c1       	rjmp	.+544    	; 0x16cc <USB_Device_ProcessControlRequest+0x280>
    14ac:	08 c0       	rjmp	.+16     	; 0x14be <USB_Device_ProcessControlRequest+0x72>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    14ae:	80 91 3f 02 	lds	r24, 0x023F
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    14b2:	90 91 40 02 	lds	r25, 0x0240
    14b6:	99 23       	and	r25, r25
    14b8:	71 f0       	breq	.+28     	; 0x14d6 <USB_Device_ProcessControlRequest+0x8a>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    14ba:	82 60       	ori	r24, 0x02	; 2
    14bc:	0c c0       	rjmp	.+24     	; 0x14d6 <USB_Device_ProcessControlRequest+0x8a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    14be:	80 91 47 02 	lds	r24, 0x0247
    14c2:	8f 70       	andi	r24, 0x0F	; 15
    14c4:	e9 ee       	ldi	r30, 0xE9	; 233
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    14ca:	80 91 eb 00 	lds	r24, 0x00EB
    14ce:	85 fb       	bst	r24, 5
    14d0:	88 27       	eor	r24, r24
    14d2:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    14d4:	10 82       	st	Z, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    14d6:	e8 ee       	ldi	r30, 0xE8	; 232
    14d8:	f0 e0       	ldi	r31, 0x00	; 0
    14da:	90 81       	ld	r25, Z
    14dc:	97 7f       	andi	r25, 0xF7	; 247
    14de:	90 83       	st	Z, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    14e0:	a1 ef       	ldi	r26, 0xF1	; 241
    14e2:	b0 e0       	ldi	r27, 0x00	; 0
    14e4:	8c 93       	st	X, r24
				UEDATX = (Data >> 8);
    14e6:	1c 92       	st	X, r1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    14e8:	80 81       	ld	r24, Z
    14ea:	8e 77       	andi	r24, 0x7E	; 126
    14ec:	80 83       	st	Z, r24
	Endpoint_ClearSETUP();

	Endpoint_Write_16_LE(CurrentStatus);
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    14ee:	64 de       	rcall	.-824    	; 0x11b8 <Endpoint_ClearStatusStage>
    14f0:	ed c0       	rjmp	.+474    	; 0x16cc <USB_Device_ProcessControlRequest+0x280>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    14f2:	33 23       	and	r19, r19
    14f4:	09 f4       	brne	.+2      	; 0x14f8 <USB_Device_ProcessControlRequest+0xac>
    14f6:	f9 c0       	rjmp	.+498    	; 0x16ea <USB_Device_ProcessControlRequest+0x29e>
    14f8:	32 30       	cpi	r19, 0x02	; 2
    14fa:	09 f0       	breq	.+2      	; 0x14fe <USB_Device_ProcessControlRequest+0xb2>
    14fc:	e7 c0       	rjmp	.+462    	; 0x16cc <USB_Device_ProcessControlRequest+0x280>
    14fe:	fa c0       	rjmp	.+500    	; 0x16f4 <USB_Device_ProcessControlRequest+0x2a8>
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    1500:	81 e0       	ldi	r24, 0x01	; 1
    1502:	23 30       	cpi	r18, 0x03	; 3
    1504:	09 f0       	breq	.+2      	; 0x1508 <USB_Device_ProcessControlRequest+0xbc>
    1506:	80 e0       	ldi	r24, 0x00	; 0
    1508:	80 93 40 02 	sts	0x0240, r24
    150c:	28 c0       	rjmp	.+80     	; 0x155e <USB_Device_ProcessControlRequest+0x112>
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    150e:	20 91 47 02 	lds	r18, 0x0247
    1512:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    1514:	09 f4       	brne	.+2      	; 0x1518 <USB_Device_ProcessControlRequest+0xcc>
    1516:	da c0       	rjmp	.+436    	; 0x16cc <USB_Device_ProcessControlRequest+0x280>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1518:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    151c:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    1520:	80 ff       	sbrs	r24, 0
    1522:	1d c0       	rjmp	.+58     	; 0x155e <USB_Device_ProcessControlRequest+0x112>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    1524:	80 91 44 02 	lds	r24, 0x0244
    1528:	83 30       	cpi	r24, 0x03	; 3
    152a:	31 f4       	brne	.+12     	; 0x1538 <USB_Device_ProcessControlRequest+0xec>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    152c:	eb ee       	ldi	r30, 0xEB	; 235
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	80 81       	ld	r24, Z
    1532:	80 62       	ori	r24, 0x20	; 32
    1534:	80 83       	st	Z, r24
    1536:	13 c0       	rjmp	.+38     	; 0x155e <USB_Device_ProcessControlRequest+0x112>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1538:	eb ee       	ldi	r30, 0xEB	; 235
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	80 81       	ld	r24, Z
    153e:	80 61       	ori	r24, 0x10	; 16
    1540:	80 83       	st	Z, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1542:	81 e0       	ldi	r24, 0x01	; 1
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	02 c0       	rjmp	.+4      	; 0x154c <USB_Device_ProcessControlRequest+0x100>
    1548:	88 0f       	add	r24, r24
    154a:	99 1f       	adc	r25, r25
    154c:	2a 95       	dec	r18
    154e:	e2 f7       	brpl	.-8      	; 0x1548 <USB_Device_ProcessControlRequest+0xfc>
    1550:	aa ee       	ldi	r26, 0xEA	; 234
    1552:	b0 e0       	ldi	r27, 0x00	; 0
    1554:	8c 93       	st	X, r24
				UERST = 0;
    1556:	1c 92       	st	X, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1558:	80 81       	ld	r24, Z
    155a:	88 60       	ori	r24, 0x08	; 8
    155c:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    155e:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1562:	e8 ee       	ldi	r30, 0xE8	; 232
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	80 81       	ld	r24, Z
    1568:	87 7f       	andi	r24, 0xF7	; 247
    156a:	80 83       	st	Z, r24

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    156c:	25 de       	rcall	.-950    	; 0x11b8 <Endpoint_ClearStatusStage>
    156e:	ae c0       	rjmp	.+348    	; 0x16cc <USB_Device_ProcessControlRequest+0x280>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1570:	31 11       	cpse	r19, r1
    1572:	ac c0       	rjmp	.+344    	; 0x16cc <USB_Device_ProcessControlRequest+0x280>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    1574:	10 91 45 02 	lds	r17, 0x0245
    1578:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    157a:	e3 ee       	ldi	r30, 0xE3	; 227
    157c:	f0 e0       	ldi	r31, 0x00	; 0
    157e:	80 81       	ld	r24, Z
    1580:	80 78       	andi	r24, 0x80	; 128
    1582:	81 2b       	or	r24, r17
    1584:	80 83       	st	Z, r24
    1586:	e8 ee       	ldi	r30, 0xE8	; 232
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	80 81       	ld	r24, Z
    158c:	87 7f       	andi	r24, 0xF7	; 247
    158e:	80 83       	st	Z, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1590:	13 de       	rcall	.-986    	; 0x11b8 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1592:	e8 ee       	ldi	r30, 0xE8	; 232
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	80 81       	ld	r24, Z

	while (!(Endpoint_IsINReady()));
    1598:	80 ff       	sbrs	r24, 0
    159a:	fd cf       	rjmp	.-6      	; 0x1596 <USB_Device_ProcessControlRequest+0x14a>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;
				
				UDADDR |= (1 << ADDEN);
    159c:	e3 ee       	ldi	r30, 0xE3	; 227
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	80 81       	ld	r24, Z
    15a2:	80 68       	ori	r24, 0x80	; 128
    15a4:	80 83       	st	Z, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    15a6:	11 23       	and	r17, r17
    15a8:	11 f0       	breq	.+4      	; 0x15ae <USB_Device_ProcessControlRequest+0x162>
    15aa:	83 e0       	ldi	r24, 0x03	; 3
    15ac:	01 c0       	rjmp	.+2      	; 0x15b0 <USB_Device_ProcessControlRequest+0x164>
    15ae:	82 e0       	ldi	r24, 0x02	; 2
    15b0:	80 93 42 02 	sts	0x0242, r24
    15b4:	8b c0       	rjmp	.+278    	; 0x16cc <USB_Device_ProcessControlRequest+0x280>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    15b6:	30 58       	subi	r19, 0x80	; 128
    15b8:	32 30       	cpi	r19, 0x02	; 2
    15ba:	08 f0       	brcs	.+2      	; 0x15be <USB_Device_ProcessControlRequest+0x172>
    15bc:	87 c0       	rjmp	.+270    	; 0x16cc <USB_Device_ProcessControlRequest+0x280>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    15be:	80 91 45 02 	lds	r24, 0x0245
    15c2:	90 91 46 02 	lds	r25, 0x0246
    15c6:	8c 3d       	cpi	r24, 0xDC	; 220
    15c8:	23 e0       	ldi	r18, 0x03	; 3
    15ca:	92 07       	cpc	r25, r18
    15cc:	99 f5       	brne	.+102    	; 0x1634 <USB_Device_ProcessControlRequest+0x1e8>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    15ce:	83 e0       	ldi	r24, 0x03	; 3
    15d0:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    15d2:	8a e2       	ldi	r24, 0x2A	; 42
    15d4:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    15d6:	5f b7       	in	r21, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    15d8:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    15da:	de 01       	movw	r26, r28
    15dc:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    15de:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    15e0:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    15e2:	41 e2       	ldi	r20, 0x21	; 33
    15e4:	e3 2f       	mov	r30, r19
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	40 93 57 00 	sts	0x0057, r20
    15ec:	84 91       	lpm	r24, Z

					if (SerialCharNum & 0x01)
    15ee:	20 ff       	sbrs	r18, 0
    15f0:	03 c0       	rjmp	.+6      	; 0x15f8 <USB_Device_ProcessControlRequest+0x1ac>
					{
						SerialByte >>= 4;
    15f2:	82 95       	swap	r24
    15f4:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
    15f6:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    15f8:	8f 70       	andi	r24, 0x0F	; 15

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    15fa:	8a 30       	cpi	r24, 0x0A	; 10
    15fc:	18 f0       	brcs	.+6      	; 0x1604 <USB_Device_ProcessControlRequest+0x1b8>
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	c7 96       	adiw	r24, 0x37	; 55
    1602:	02 c0       	rjmp	.+4      	; 0x1608 <USB_Device_ProcessControlRequest+0x1bc>
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	c0 96       	adiw	r24, 0x30	; 48
    1608:	8d 93       	st	X+, r24
    160a:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    160c:	2f 5f       	subi	r18, 0xFF	; 255
    160e:	24 31       	cpi	r18, 0x14	; 20
    1610:	49 f7       	brne	.-46     	; 0x15e4 <USB_Device_ProcessControlRequest+0x198>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    1612:	5f bf       	out	0x3f, r21	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1614:	08 ee       	ldi	r16, 0xE8	; 232
    1616:	10 e0       	ldi	r17, 0x00	; 0
    1618:	f8 01       	movw	r30, r16
    161a:	80 81       	ld	r24, Z
    161c:	87 7f       	andi	r24, 0xF7	; 247
    161e:	80 83       	st	Z, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    1620:	6a e2       	ldi	r22, 0x2A	; 42
    1622:	70 e0       	ldi	r23, 0x00	; 0
    1624:	ce 01       	movw	r24, r28
    1626:	01 96       	adiw	r24, 0x01	; 1
    1628:	b0 db       	rcall	.-2208   	; 0xd8a <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    162a:	f8 01       	movw	r30, r16
    162c:	80 81       	ld	r24, Z
    162e:	8b 77       	andi	r24, 0x7B	; 123
    1630:	80 83       	st	Z, r24
    1632:	4c c0       	rjmp	.+152    	; 0x16cc <USB_Device_ProcessControlRequest+0x280>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    1634:	ae 01       	movw	r20, r28
    1636:	4f 5f       	subi	r20, 0xFF	; 255
    1638:	5f 4f       	sbci	r21, 0xFF	; 255
    163a:	60 91 47 02 	lds	r22, 0x0247
    163e:	0e 94 de 00 	call	0x1bc	; 0x1bc <CALLBACK_USB_GetDescriptor>
    1642:	00 97       	sbiw	r24, 0x00	; 0
    1644:	09 f4       	brne	.+2      	; 0x1648 <USB_Device_ProcessControlRequest+0x1fc>
    1646:	42 c0       	rjmp	.+132    	; 0x16cc <USB_Device_ProcessControlRequest+0x280>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1648:	08 ee       	ldi	r16, 0xE8	; 232
    164a:	10 e0       	ldi	r17, 0x00	; 0
    164c:	f8 01       	movw	r30, r16
    164e:	20 81       	ld	r18, Z
    1650:	27 7f       	andi	r18, 0xF7	; 247
    1652:	20 83       	st	Z, r18
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    1654:	bc 01       	movw	r22, r24
    1656:	89 81       	ldd	r24, Y+1	; 0x01
    1658:	9a 81       	ldd	r25, Y+2	; 0x02
    165a:	76 dc       	rcall	.-1812   	; 0xf48 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    165c:	f8 01       	movw	r30, r16
    165e:	80 81       	ld	r24, Z
    1660:	8b 77       	andi	r24, 0x7B	; 123
    1662:	80 83       	st	Z, r24
    1664:	33 c0       	rjmp	.+102    	; 0x16cc <USB_Device_ProcessControlRequest+0x280>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    1666:	30 38       	cpi	r19, 0x80	; 128
    1668:	89 f5       	brne	.+98     	; 0x16cc <USB_Device_ProcessControlRequest+0x280>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    166a:	e8 ee       	ldi	r30, 0xE8	; 232
    166c:	f0 e0       	ldi	r31, 0x00	; 0
    166e:	80 81       	ld	r24, Z
    1670:	87 7f       	andi	r24, 0xF7	; 247
    1672:	80 83       	st	Z, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    1674:	80 91 3e 02 	lds	r24, 0x023E
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1678:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    167c:	80 81       	ld	r24, Z
    167e:	8e 77       	andi	r24, 0x7E	; 126
    1680:	80 83       	st	Z, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    1682:	9a dd       	rcall	.-1228   	; 0x11b8 <Endpoint_ClearStatusStage>
    1684:	23 c0       	rjmp	.+70     	; 0x16cc <USB_Device_ProcessControlRequest+0x280>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1686:	31 11       	cpse	r19, r1
    1688:	21 c0       	rjmp	.+66     	; 0x16cc <USB_Device_ProcessControlRequest+0x280>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    168a:	80 91 45 02 	lds	r24, 0x0245
    168e:	82 30       	cpi	r24, 0x02	; 2
    1690:	e8 f4       	brcc	.+58     	; 0x16cc <USB_Device_ProcessControlRequest+0x280>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1692:	e8 ee       	ldi	r30, 0xE8	; 232
    1694:	f0 e0       	ldi	r31, 0x00	; 0
    1696:	80 81       	ld	r24, Z
    1698:	87 7f       	andi	r24, 0xF7	; 247
    169a:	80 83       	st	Z, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    169c:	80 91 45 02 	lds	r24, 0x0245
    16a0:	80 93 3e 02 	sts	0x023E, r24

	Endpoint_ClearStatusStage();
    16a4:	89 dd       	rcall	.-1262   	; 0x11b8 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    16a6:	80 91 3e 02 	lds	r24, 0x023E
    16aa:	88 23       	and	r24, r24
    16ac:	21 f0       	breq	.+8      	; 0x16b6 <USB_Device_ProcessControlRequest+0x26a>
	  USB_DeviceState = DEVICE_STATE_Configured;
    16ae:	84 e0       	ldi	r24, 0x04	; 4
    16b0:	80 93 42 02 	sts	0x0242, r24
    16b4:	09 c0       	rjmp	.+18     	; 0x16c8 <USB_Device_ProcessControlRequest+0x27c>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    16b6:	80 91 e3 00 	lds	r24, 0x00E3
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    16ba:	88 23       	and	r24, r24
    16bc:	14 f4       	brge	.+4      	; 0x16c2 <USB_Device_ProcessControlRequest+0x276>
    16be:	84 e0       	ldi	r24, 0x04	; 4
    16c0:	01 c0       	rjmp	.+2      	; 0x16c4 <USB_Device_ProcessControlRequest+0x278>
    16c2:	81 e0       	ldi	r24, 0x01	; 1
    16c4:	80 93 42 02 	sts	0x0242, r24

	EVENT_USB_Device_ConfigurationChanged();
    16c8:	0e 94 56 01 	call	0x2ac	; 0x2ac <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    16cc:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    16d0:	83 ff       	sbrs	r24, 3
    16d2:	16 c0       	rjmp	.+44     	; 0x1700 <USB_Device_ProcessControlRequest+0x2b4>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    16d4:	e8 ee       	ldi	r30, 0xE8	; 232
    16d6:	f0 e0       	ldi	r31, 0x00	; 0
    16d8:	80 81       	ld	r24, Z
    16da:	87 7f       	andi	r24, 0xF7	; 247
    16dc:	80 83       	st	Z, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    16de:	eb ee       	ldi	r30, 0xEB	; 235
    16e0:	f0 e0       	ldi	r31, 0x00	; 0
    16e2:	80 81       	ld	r24, Z
    16e4:	80 62       	ori	r24, 0x20	; 32
    16e6:	80 83       	st	Z, r24
    16e8:	0b c0       	rjmp	.+22     	; 0x1700 <USB_Device_ProcessControlRequest+0x2b4>
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    16ea:	80 91 45 02 	lds	r24, 0x0245
    16ee:	81 30       	cpi	r24, 0x01	; 1
    16f0:	69 f7       	brne	.-38     	; 0x16cc <USB_Device_ProcessControlRequest+0x280>
    16f2:	06 cf       	rjmp	.-500    	; 0x1500 <USB_Device_ProcessControlRequest+0xb4>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    16f4:	80 91 45 02 	lds	r24, 0x0245
    16f8:	88 23       	and	r24, r24
    16fa:	09 f4       	brne	.+2      	; 0x16fe <USB_Device_ProcessControlRequest+0x2b2>
    16fc:	08 cf       	rjmp	.-496    	; 0x150e <USB_Device_ProcessControlRequest+0xc2>
    16fe:	2f cf       	rjmp	.-418    	; 0x155e <USB_Device_ProcessControlRequest+0x112>
	if (Endpoint_IsSETUPReceived())
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    1700:	aa 96       	adiw	r28, 0x2a	; 42
    1702:	0f b6       	in	r0, 0x3f	; 63
    1704:	f8 94       	cli
    1706:	de bf       	out	0x3e, r29	; 62
    1708:	0f be       	out	0x3f, r0	; 63
    170a:	cd bf       	out	0x3d, r28	; 61
    170c:	df 91       	pop	r29
    170e:	cf 91       	pop	r28
    1710:	1f 91       	pop	r17
    1712:	0f 91       	pop	r16
    1714:	08 95       	ret

00001716 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    1716:	08 95       	ret

00001718 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1718:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    171a:	80 91 42 02 	lds	r24, 0x0242
    171e:	88 23       	and	r24, r24
    1720:	a1 f0       	breq	.+40     	; 0x174a <USB_USBTask+0x32>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1722:	c0 91 e9 00 	lds	r28, 0x00E9
    1726:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1728:	80 91 ec 00 	lds	r24, 0x00EC
    172c:	80 ff       	sbrs	r24, 0
    172e:	02 c0       	rjmp	.+4      	; 0x1734 <USB_USBTask+0x1c>
    1730:	80 e8       	ldi	r24, 0x80	; 128
    1732:	01 c0       	rjmp	.+2      	; 0x1736 <USB_USBTask+0x1e>
    1734:	80 e0       	ldi	r24, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1736:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1738:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    173c:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    1740:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    1742:	84 de       	rcall	.-760    	; 0x144c <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1744:	cf 70       	andi	r28, 0x0F	; 15
    1746:	c0 93 e9 00 	sts	0x00E9, r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    174a:	cf 91       	pop	r28
    174c:	08 95       	ret

0000174e <__tablejump2__>:
    174e:	ee 0f       	add	r30, r30
    1750:	ff 1f       	adc	r31, r31

00001752 <__tablejump__>:
    1752:	05 90       	lpm	r0, Z+
    1754:	f4 91       	lpm	r31, Z
    1756:	e0 2d       	mov	r30, r0
    1758:	09 94       	ijmp

0000175a <memcmp>:
    175a:	fb 01       	movw	r30, r22
    175c:	dc 01       	movw	r26, r24
    175e:	04 c0       	rjmp	.+8      	; 0x1768 <memcmp+0xe>
    1760:	8d 91       	ld	r24, X+
    1762:	01 90       	ld	r0, Z+
    1764:	80 19       	sub	r24, r0
    1766:	21 f4       	brne	.+8      	; 0x1770 <memcmp+0x16>
    1768:	41 50       	subi	r20, 0x01	; 1
    176a:	50 40       	sbci	r21, 0x00	; 0
    176c:	c8 f7       	brcc	.-14     	; 0x1760 <memcmp+0x6>
    176e:	88 1b       	sub	r24, r24
    1770:	99 0b       	sbc	r25, r25
    1772:	08 95       	ret

00001774 <memcpy>:
    1774:	fb 01       	movw	r30, r22
    1776:	dc 01       	movw	r26, r24
    1778:	02 c0       	rjmp	.+4      	; 0x177e <memcpy+0xa>
    177a:	01 90       	ld	r0, Z+
    177c:	0d 92       	st	X+, r0
    177e:	41 50       	subi	r20, 0x01	; 1
    1780:	50 40       	sbci	r21, 0x00	; 0
    1782:	d8 f7       	brcc	.-10     	; 0x177a <memcpy+0x6>
    1784:	08 95       	ret

00001786 <memset>:
    1786:	dc 01       	movw	r26, r24
    1788:	01 c0       	rjmp	.+2      	; 0x178c <memset+0x6>
    178a:	6d 93       	st	X+, r22
    178c:	41 50       	subi	r20, 0x01	; 1
    178e:	50 40       	sbci	r21, 0x00	; 0
    1790:	e0 f7       	brcc	.-8      	; 0x178a <memset+0x4>
    1792:	08 95       	ret

00001794 <_exit>:
    1794:	f8 94       	cli

00001796 <__stop_program>:
    1796:	ff cf       	rjmp	.-2      	; 0x1796 <__stop_program>
