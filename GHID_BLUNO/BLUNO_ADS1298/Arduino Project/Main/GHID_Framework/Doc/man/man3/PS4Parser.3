.TH "PS4Parser" 3 "Sun Mar 30 2014" "Version version 2.0" "GHID Framework" \" -*- nroff -*-
.ad l
.nh
.SH NAME
PS4Parser \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <PS4Parser\&.h>\fP
.PP
Inherited by \fBPS4BT\fP, and \fBPS4USB\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBPS4Parser\fP ()"
.br
.in -1c
.PP
.RI "\fBPS4 Controller functions\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "bool \fBgetButtonPress\fP (\fBButtonEnum\fP \fBb\fP)"
.br
.ti -1c
.RI "bool \fBgetButtonClick\fP (\fBButtonEnum\fP \fBb\fP)"
.br
.ti -1c
.RI "uint8_t \fBgetAnalogButton\fP (\fBButtonEnum\fP \fBb\fP)"
.br
.ti -1c
.RI "uint8_t \fBgetAnalogHat\fP (\fBAnalogHatEnum\fP a)"
.br
.ti -1c
.RI "uint16_t \fBgetX\fP (uint8_t finger=0, uint8_t xyId=0)"
.br
.ti -1c
.RI "uint16_t \fBgetY\fP (uint8_t finger=0, uint8_t xyId=0)"
.br
.ti -1c
.RI "bool \fBisTouching\fP (uint8_t finger=0, uint8_t xyId=0)"
.br
.ti -1c
.RI "uint8_t \fBgetTouchCounter\fP (uint8_t finger=0, uint8_t xyId=0)"
.br
.ti -1c
.RI "double \fBgetAngle\fP (\fBAngleEnum\fP a)"
.br
.ti -1c
.RI "int16_t \fBgetSensor\fP (\fBSensorEnum\fP s)"
.br
.ti -1c
.RI "void \fBsetAllOff\fP ()"
.br
.ti -1c
.RI "void \fBsetRumbleOff\fP ()"
.br
.ti -1c
.RI "void \fBsetRumbleOn\fP (\fBRumbleEnum\fP mode)"
.br
.ti -1c
.RI "void \fBsetRumbleOn\fP (uint8_t \fBbigRumble\fP, uint8_t \fBsmallRumble\fP)"
.br
.ti -1c
.RI "void \fBsetLedOff\fP ()"
.br
.ti -1c
.RI "void \fBsetLed\fP (uint8_t \fBr\fP, uint8_t \fBg\fP, uint8_t \fBb\fP)"
.br
.ti -1c
.RI "void \fBsetLed\fP (\fBColorsEnum\fP color)"
.br
.ti -1c
.RI "void \fBsetLedFlash\fP (uint8_t \fBflashOn\fP, uint8_t \fBflashOff\fP)"
.br
.in -1c
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "void \fBParse\fP (uint8_t len, uint8_t *buf)"
.br
.ti -1c
.RI "void \fBReset\fP ()"
.br
.ti -1c
.RI "virtual void \fBsendOutputReport\fP (\fBPS4Output\fP *output)=0"
.br
.in -1c
.SH "Detailed Description"
.PP 
This class parses all the data sent by the PS4 controller 
.PP
Definition at line 125 of file PS4Parser\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "\fBPS4Parser::PS4Parser\fP ()\fC [inline]\fP"Constructor for the \fBPS4Parser\fP class\&. 
.PP
Definition at line 128 of file PS4Parser\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "uint8_t \fBPS4Parser::getAnalogButton\fP (\fBButtonEnum\fPb)"Used to get the analog value from button presses\&. 
.PP
\fBParameters:\fP
.RS 4
\fIb\fP The \fBButtonEnum\fP to read\&. The supported buttons are: \fBUP\fP, \fBRIGHT\fP, \fBDOWN\fP, \fBLEFT\fP, \fBL1\fP, \fBL2\fP, \fBR1\fP, \fBR2\fP, \fBTRIANGLE\fP, \fBCIRCLE\fP, \fBCROSS\fP, \fBSQUARE\fP, and \fBT\fP\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Analog value in the range of 0-255\&. 
.RE
.PP

.PP
Definition at line 52 of file PS4Parser\&.cpp\&.
.SS "uint8_t \fBPS4Parser::getAnalogHat\fP (\fBAnalogHatEnum\fPa)"Used to read the analog joystick\&. 
.PP
\fBParameters:\fP
.RS 4
\fIa\fP \fBLeftHatX\fP, \fBLeftHatY\fP, \fBRightHatX\fP, and \fBRightHatY\fP\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Return the analog value in the range of 0-255\&. 
.RE
.PP

.PP
Definition at line 60 of file PS4Parser\&.cpp\&.
.SS "double \fBPS4Parser::getAngle\fP (\fBAngleEnum\fPa)\fC [inline]\fP"Get the angle of the controller calculated using the accelerometer\&. 
.PP
\fBParameters:\fP
.RS 4
\fIa\fP Either \fBPitch\fP or \fBRoll\fP\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Return the angle in the range of 0-360\&. 
.RE
.PP

.PP
Definition at line 217 of file PS4Parser\&.h\&.
.SS "bool \fBPS4Parser::getButtonClick\fP (\fBButtonEnum\fPb)"
.PP
Definition at line 45 of file PS4Parser\&.cpp\&.
.SS "bool \fBPS4Parser::getButtonPress\fP (\fBButtonEnum\fPb)"\fBgetButtonPress(ButtonEnum b)\fP will return true as long as the button is held down\&.
.PP
While \fBgetButtonClick(ButtonEnum b)\fP will only return it once\&.
.PP
So you instance if you need to increase a variable once you would use \fBgetButtonClick(ButtonEnum b)\fP, but if you need to drive a robot forward you would use \fBgetButtonPress(ButtonEnum b)\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIb\fP \fBButtonEnum\fP to read\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBgetButtonPress(ButtonEnum b)\fP will return a true as long as a button is held down, while \fBgetButtonClick(ButtonEnum b)\fP will return true once for each button press\&. 
.RE
.PP

.PP
Definition at line 38 of file PS4Parser\&.cpp\&.
.SS "int16_t \fBPS4Parser::getSensor\fP (\fBSensorEnum\fPs)\fC [inline]\fP"Used to get the raw values from the 3-axis gyroscope and 3-axis accelerometer inside the PS4 controller\&. 
.PP
\fBParameters:\fP
.RS 4
\fIs\fP The sensor to read\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Returns the raw sensor reading\&. 
.RE
.PP

.PP
Definition at line 229 of file PS4Parser\&.h\&.
.SS "uint8_t \fBPS4Parser::getTouchCounter\fP (uint8_tfinger = \fC0\fP, uint8_txyId = \fC0\fP)\fC [inline]\fP"This counter increments every time a finger touches the touchpad\&. 
.PP
\fBParameters:\fP
.RS 4
\fIfinger\fP 0 = first finger, 1 = second finger\&. If omitted, then 0 will be used\&. 
.br
\fIxyId\fP The controller sends out three packets with the same structure\&. The third one will contain the last measure, but if you read from the controller then there is only be data in the first one\&. For that reason it will be set to 0 if the argument is omitted\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Return the value of the counter, note that it is only a 7-bit value\&. 
.RE
.PP

.PP
Definition at line 208 of file PS4Parser\&.h\&.
.SS "uint16_t \fBPS4Parser::getX\fP (uint8_tfinger = \fC0\fP, uint8_txyId = \fC0\fP)\fC [inline]\fP"Get the x-coordinate of the touchpad\&. Position 0 is in the top left\&. 
.PP
\fBParameters:\fP
.RS 4
\fIfinger\fP 0 = first finger, 1 = second finger\&. If omitted, then 0 will be used\&. 
.br
\fIxyId\fP The controller sends out three packets with the same structure\&. The third one will contain the last measure, but if you read from the controller then there is only be data in the first one\&. For that reason it will be set to 0 if the argument is omitted\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Returns the x-coordinate of the finger\&. 
.RE
.PP

.PP
Definition at line 172 of file PS4Parser\&.h\&.
.SS "uint16_t \fBPS4Parser::getY\fP (uint8_tfinger = \fC0\fP, uint8_txyId = \fC0\fP)\fC [inline]\fP"Get the y-coordinate of the touchpad\&. Position 0 is in the top left\&. 
.PP
\fBParameters:\fP
.RS 4
\fIfinger\fP 0 = first finger, 1 = second finger\&. If omitted, then 0 will be used\&. 
.br
\fIxyId\fP The controller sends out three packets with the same structure\&. The third one will contain the last measure, but if you read from the controller then there is only be data in the first one\&. For that reason it will be set to 0 if the argument is omitted\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Returns the y-coordinate of the finger\&. 
.RE
.PP

.PP
Definition at line 184 of file PS4Parser\&.h\&.
.SS "bool \fBPS4Parser::isTouching\fP (uint8_tfinger = \fC0\fP, uint8_txyId = \fC0\fP)\fC [inline]\fP"Returns whenever the user is toucing the touchpad\&. 
.PP
\fBParameters:\fP
.RS 4
\fIfinger\fP 0 = first finger, 1 = second finger\&. If omitted, then 0 will be used\&. 
.br
\fIxyId\fP The controller sends out three packets with the same structure\&. The third one will contain the last measure, but if you read from the controller then there is only be data in the first one\&. For that reason it will be set to 0 if the argument is omitted\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Returns true if the specific finger is touching the touchpad\&. 
.RE
.PP

.PP
Definition at line 196 of file PS4Parser\&.h\&.
.SS "void \fBPS4Parser::Parse\fP (uint8_tlen, uint8_t *buf)\fC [protected]\fP"Used to parse data sent from the PS4 controller\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlen\fP Length of the data\&. 
.br
\fIbuf\fP Pointer to the data buffer\&. 
.RE
.PP

.PP
Definition at line 64 of file PS4Parser\&.cpp\&.
.SS "void \fBPS4Parser::Reset\fP ()\fC [inline, protected]\fP"Used to reset the different buffers to their default values 
.PP
Definition at line 326 of file PS4Parser\&.h\&.
.SS "virtual void \fBPS4Parser::sendOutputReport\fP (\fBPS4Output\fP *output)\fC [protected, pure virtual]\fP"Send the output to the PS4 controller\&. This is implemented in \fBPS4BT\&.h\fP and \fBPS4USB\&.h\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIoutput\fP Pointer to \fBPS4Output\fP buffer; 
.RE
.PP

.PP
Implemented in \fBPS4BT\fP, and \fBPS4USB\fP\&.
.SS "void \fBPS4Parser::setAllOff\fP ()\fC [inline]\fP"Turn both rumble and the LEDs off\&. 
.PP
Definition at line 249 of file PS4Parser\&.h\&.
.SS "void \fBPS4Parser::setLed\fP (uint8_tr, uint8_tg, uint8_tb)\fC [inline]\fP"Use this to set the color using RGB values\&. 
.PP
\fBParameters:\fP
.RS 4
\fIr,g,b\fP RGB value\&. 
.RE
.PP

.PP
Definition at line 290 of file PS4Parser\&.h\&.
.SS "void \fBPS4Parser::setLed\fP (\fBColorsEnum\fPcolor)\fC [inline]\fP"Use this to set the color using the predefined colors in \fBColorsEnum\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcolor\fP The desired color\&. 
.RE
.PP

.PP
Definition at line 301 of file PS4Parser\&.h\&.
.SS "void \fBPS4Parser::setLedFlash\fP (uint8_tflashOn, uint8_tflashOff)\fC [inline]\fP"Set the LEDs flash time\&. 
.PP
\fBParameters:\fP
.RS 4
\fIflashOn\fP Time to flash bright (255 = 2\&.5 seconds)\&. 
.br
\fIflashOff\fP Time to flash dark (255 = 2\&.5 seconds)\&. 
.RE
.PP

.PP
Definition at line 310 of file PS4Parser\&.h\&.
.SS "void \fBPS4Parser::setLedOff\fP ()\fC [inline]\fP"Turn all LEDs off\&. 
.PP
Definition at line 282 of file PS4Parser\&.h\&.
.SS "void \fBPS4Parser::setRumbleOff\fP ()\fC [inline]\fP"Set rumble off\&. 
.PP
Definition at line 255 of file PS4Parser\&.h\&.
.SS "void \fBPS4Parser::setRumbleOn\fP (\fBRumbleEnum\fPmode)\fC [inline]\fP"Turn on rumble\&. 
.PP
\fBParameters:\fP
.RS 4
\fImode\fP Either \fBRumbleHigh\fP or \fBRumbleLow\fP\&. 
.RE
.PP

.PP
Definition at line 263 of file PS4Parser\&.h\&.
.SS "void \fBPS4Parser::setRumbleOn\fP (uint8_tbigRumble, uint8_tsmallRumble)\fC [inline]\fP"Turn on rumble\&. 
.PP
\fBParameters:\fP
.RS 4
\fIbigRumble\fP Value for big motor\&. 
.br
\fIsmallRumble\fP Value for small motor\&. 
.RE
.PP

.PP
Definition at line 275 of file PS4Parser\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for GHID Framework from the source code\&.
