C:\Documents and Settings\Administrator\Local Settings\Application Data\VMicro\Arduino\Builds\Main\uno\Main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000060  00800100  0000263a  000026ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000263a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000040c  00800160  00800160  0000272e  2**0
                  ALLOC
  3 .debug_aranges 000008f8  00000000  00000000  0000272e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00001cac  00000000  00000000  00003026  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000c325  00000000  00000000  00004cd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002a1e  00000000  00000000  00010ff7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00006310  00000000  00000000  00013a15  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000f50  00000000  00000000  00019d28  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00003542  00000000  00000000  0001ac78  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00004f37  00000000  00000000  0001e1ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000880  00000000  00000000  000230f1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
 */
void ADS1298_Driver::_power_down_ads1898(){

	//! Inverted logic
	digitalWrite(PIN_PWDN, HIGH);
}
       0:	0c 94 48 01 	jmp	0x290	; 0x290 <__ctors_end>
#include "BluetoothCommandDispatcher.h"

/**
 * The default constructor for the class
 */
Bluetooth_Dispatcher::Bluetooth_Dispatcher(HardwareSerial* serial){
       4:	0c 94 c3 0b 	jmp	0x1786	; 0x1786 <__vector_1>
}

/**
 * We run the request based method... Using callbacks
 */
void Bluetooth_Connection_Handler::_run_request_based(){
       8:	0c 94 f0 0b 	jmp	0x17e0	; 0x17e0 <__vector_2>
	//! Set the internal access points
	this->_command_table = command_table;
	this->_name = device_name;
	this->_dispacher = serial;
	setup_method(this);
}
       c:	0c 94 70 01 	jmp	0x2e0	; 0x2e0 <__bad_interrupt>

	//! Set internals
	this->_serial = serial;
	this->_buffer = buffer;
	this->_utils = utils;
}
      10:	0c 94 70 01 	jmp	0x2e0	; 0x2e0 <__bad_interrupt>
	for(register byte i = 0; i < length; i ++){
		this->buffer.buffer[i] = SPI.transfer(command);
	}

	return &this->buffer;
}
      14:	0c 94 70 01 	jmp	0x2e0	; 0x2e0 <__bad_interrupt>
//  pinMode(SCK, OUTPUT);
//  pinMode(MOSI, OUTPUT);
}


void SPIClass::end() {
      18:	0c 94 70 01 	jmp	0x2e0	; 0x2e0 <__bad_interrupt>
#endif
    }
  }
}

void detachInterrupt(uint8_t interruptNum) {
      1c:	0c 94 70 01 	jmp	0x2e0	; 0x2e0 <__bad_interrupt>
	timer0_millis = m;
	timer0_overflow_count++;
}

unsigned long millis()
{
      20:	0c 94 70 01 	jmp	0x2e0	; 0x2e0 <__bad_interrupt>

	SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
      24:	0c 94 70 01 	jmp	0x2e0	; 0x2e0 <__bad_interrupt>

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
      28:	0c 94 70 01 	jmp	0x2e0	; 0x2e0 <__bad_interrupt>
    n += write(*buffer++);
  }
  return n;
}

size_t Print::print(const __FlashStringHelper *ifsh)
      2c:	0c 94 70 01 	jmp	0x2e0	; 0x2e0 <__bad_interrupt>

unsigned char String::startsWith( const String &s2 ) const
{
	if (len < s2.len) return 0;
	return startsWith(s2, 0);
}
      30:	0c 94 70 01 	jmp	0x2e0	; 0x2e0 <__bad_interrupt>
      34:	0c 94 70 01 	jmp	0x2e0	; 0x2e0 <__bad_interrupt>
      38:	0c 94 70 01 	jmp	0x2e0	; 0x2e0 <__bad_interrupt>
      3c:	0c 94 70 01 	jmp	0x2e0	; 0x2e0 <__bad_interrupt>
      40:	0c 94 1d 0c 	jmp	0x183a	; 0x183a <__vector_16>
      44:	0c 94 70 01 	jmp	0x2e0	; 0x2e0 <__bad_interrupt>
      48:	0c 94 97 0d 	jmp	0x1b2e	; 0x1b2e <__vector_18>
      4c:	0c 94 e5 0d 	jmp	0x1bca	; 0x1bca <__vector_19>
      50:	0c 94 70 01 	jmp	0x2e0	; 0x2e0 <__bad_interrupt>
      54:	0c 94 70 01 	jmp	0x2e0	; 0x2e0 <__bad_interrupt>
      58:	0c 94 70 01 	jmp	0x2e0	; 0x2e0 <__bad_interrupt>
      5c:	0c 94 70 01 	jmp	0x2e0	; 0x2e0 <__bad_interrupt>
      60:	0c 94 70 01 	jmp	0x2e0	; 0x2e0 <__bad_interrupt>
      64:	0c 94 70 01 	jmp	0x2e0	; 0x2e0 <__bad_interrupt>

00000068 <fsm_mode_change>:
      68:	41 54 2b 46 53 4d 3d 00                             AT+FSM=.

00000070 <fsm_mode_transparent>:
      70:	46 53 4d 5f 54 52 41 4e 53 5f 55 53 42 5f 43 4f     FSM_TRANS_USB_CO
      80:	4d 5f 42 4c 45 0d 0a 00                             M_BLE...

00000088 <fsm_mode_HID>:
      88:	46 53 4d 5f 48 49 44 5f 55 53 42 5f 43 4f 4d 5f     FSM_HID_USB_COM_
      98:	42 4c 45 5f 41 54 0d 0a 00                          BLE_AT...

000000a1 <role_mode_change>:
      a1:	41 54 2b 52 4f 4c 45 3d 00                          AT+ROLE=.

000000aa <role_mode_central>:
      aa:	52 4f 4c 45 5f 43 45 4e 54 52 41 4c 0d 0a 00        ROLE_CENTRAL...

000000b9 <role_mode_peripheral>:
      b9:	52 4f 4c 45 5f 50 45 52 49 50 48 45 52 41 4c 0d     ROLE_PERIPHERAL.
      c9:	0a 00                                               ..

000000cb <con_min_interval_change>:
      cb:	41 54 2b 4d 49 4e 5f 49 4e 54 45 52 56 41 4c 3d     AT+MIN_INTERVAL=
	...

000000dc <con_min_interval_ten>:
      dc:	31 30 00                                            10.

000000df <con_min_interval_twenty>:
      df:	32 30 00                                            20.

000000e2 <con_max_interval_change>:
      e2:	41 54 2b 4d 41 58 5f 49 4e 54 45 52 56 41 4c 3d     AT+MAX_INTERVAL=
	...

000000f3 <con_max_interval_ten>:
      f3:	31 30 00                                            10.

000000f6 <con_max_interval_forty>:
      f6:	34 30 00                                            40.

000000f9 <con_baudrate_change>:
      f9:	41 54 2b 55 41 52 54 3d 00                          AT+UART=.

00000102 <binding_address_change>:
     102:	41 54 2b 42 49 4e 44 3d 00                          AT+BIND=.

0000010b <connection_mode_change>:
     10b:	41 54 2b 43 4d 4f 44 45 3d 00                       AT+CMODE=.

00000115 <connection_mode_unique>:
     115:	55 4e 49 51 55 45 0d 0a 00                          UNIQUE...

0000011e <connection_mode_anyone>:
     11e:	41 4e 59 4f 4e 45 0d 0a 00                          ANYONE...

00000127 <get_mac_address>:
     127:	41 54 2b 4d 41 43 3d 3f 0d 0a 00                    AT+MAC=?...

00000132 <set_device_name>:
     132:	41 54 2b 4e 41 4d 45 3d 00                          AT+NAME=.

0000013b <reboot_ble>:
     13b:	41 54 2b 52 45 53 54 41 52 54 0d 0a 00              AT+RESTART...

00000148 <setting_change>:
     148:	41 54 2b 53 45 54 54 49 4e 47 3d 00                 AT+SETTING=.

00000154 <setting_default>:
     154:	44 45 46 41 55 4c 54 0d 0a 00                       DEFAULT...

0000015e <setting_peripheral>:
     15e:	44 45 46 50 45 52 49 50 48 45 52 41 4c 0d 0a 00     DEFPERIPHERAL...

0000016e <setting_central>:
     16e:	44 45 46 43 45 4e 54 52 41 4c 0d 0a 00              DEFCENTRAL...

0000017b <ibeacon_change>:
     17b:	41 54 2b 49 42 45 41 43 4f 4e 53 3d 00              AT+IBEACONS=.

00000188 <ibeacon_on>:
     188:	4f 4e 0d 0a 00                                      ON...

0000018d <ibeacon_off>:
     18d:	4f 46 46 0d 0a 00                                   OFF...

00000193 <get_firmware_ver>:
     193:	41 54 2b 56 45 52 53 49 4f 4e 3d 3f 0d 0a 00        AT+VERSION=?...

000001a2 <get_RSSI_value>:
     1a2:	41 54 2b 52 53 53 49 3d 3f 0d 0a 00                 AT+RSSI=?...

000001ae <ibeacon_major_num_change>:
     1ae:	41 54 2b 4d 41 4a 4f 52 3d 00                       AT+MAJOR=.

000001b8 <ibeacon_minor_num_change>:
     1b8:	41 54 2b 4d 49 4e 4f 52 3d 00                       AT+MINOR=.

000001c2 <password_change>:
     1c2:	41 54 2b 50 41 53 53 57 4f 52 3d 00                 AT+PASSWOR=.

000001ce <set_tx_power>:
     1ce:	41 54 2b 54 58 50 4f 57 45 52 3d 00                 AT+TXPOWER=.

000001da <help>:
     1da:	3f 0d 0a 00                                         ?...

000001de <at_mode>:
     1de:	2b 2b 2b 0d 0a 00                                   +++...

000001e4 <string_input>:
     1e4:	25 73 0d 0a 00                                      %s...

000001e9 <command_pointers>:
     1e9:	de 01 da 01 e4 01 68 00 70 00 88 00 a1 00 aa 00     ......h.p.......
     1f9:	b9 00 cb 00 dc 00 df 00 e2 00 f3 00 f6 00 f9 00     ................
     209:	02 01 0b 01 15 01 1e 01 27 01 32 01 3b 01 48 01     ........'.2.;.H.
     219:	54 01 5e 01 6e 01 7b 01 88 01 8d 01 ae 01 b8 01     T.^.n.{.........
     229:	ce 01 a2 01 93 01 c2 01                             ........

00000231 <port_to_mode_PGM>:
     231:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

0000023b <port_to_output_PGM>:
     23b:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000245 <port_to_input_PGM>:
     245:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

0000024f <digital_pin_to_port_PGM>:
     24f:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     25f:	03 03 03 03                                         ....

00000263 <digital_pin_to_bit_mask_PGM>:
     263:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     273:	04 08 10 20                                         ... 

00000277 <digital_pin_to_timer_PGM>:
     277:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
     287:	00 00 00 00 00                                      .....

0000028c <__ctors_start>:
     28c:	c4 0a       	sbc	r12, r20
     28e:	51 0f       	add	r21, r17

00000290 <__ctors_end>:
     290:	11 24       	eor	r1, r1
     292:	1f be       	out	0x3f, r1	; 63
     294:	cf ef       	ldi	r28, 0xFF	; 255
     296:	d8 e0       	ldi	r29, 0x08	; 8
     298:	de bf       	out	0x3e, r29	; 62
     29a:	cd bf       	out	0x3d, r28	; 61

0000029c <__do_copy_data>:
     29c:	11 e0       	ldi	r17, 0x01	; 1
     29e:	a0 e0       	ldi	r26, 0x00	; 0
     2a0:	b1 e0       	ldi	r27, 0x01	; 1
     2a2:	ea e3       	ldi	r30, 0x3A	; 58
     2a4:	f6 e2       	ldi	r31, 0x26	; 38
     2a6:	02 c0       	rjmp	.+4      	; 0x2ac <.do_copy_data_start>

000002a8 <.do_copy_data_loop>:
     2a8:	05 90       	lpm	r0, Z+
     2aa:	0d 92       	st	X+, r0

000002ac <.do_copy_data_start>:
     2ac:	a0 36       	cpi	r26, 0x60	; 96
     2ae:	b1 07       	cpc	r27, r17
     2b0:	d9 f7       	brne	.-10     	; 0x2a8 <.do_copy_data_loop>

000002b2 <__do_clear_bss>:
     2b2:	15 e0       	ldi	r17, 0x05	; 5
     2b4:	a0 e6       	ldi	r26, 0x60	; 96
     2b6:	b1 e0       	ldi	r27, 0x01	; 1
     2b8:	01 c0       	rjmp	.+2      	; 0x2bc <.do_clear_bss_start>

000002ba <.do_clear_bss_loop>:
     2ba:	1d 92       	st	X+, r1

000002bc <.do_clear_bss_start>:
     2bc:	ac 36       	cpi	r26, 0x6C	; 108
     2be:	b1 07       	cpc	r27, r17
     2c0:	e1 f7       	brne	.-8      	; 0x2ba <.do_clear_bss_loop>

000002c2 <__do_global_ctors>:
     2c2:	12 e0       	ldi	r17, 0x02	; 2
     2c4:	c0 e9       	ldi	r28, 0x90	; 144
     2c6:	d2 e0       	ldi	r29, 0x02	; 2
     2c8:	04 c0       	rjmp	.+8      	; 0x2d2 <.do_global_ctors_start>

000002ca <.do_global_ctors_loop>:
     2ca:	22 97       	sbiw	r28, 0x02	; 2
     2cc:	fe 01       	movw	r30, r28
     2ce:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <__tablejump__>

000002d2 <.do_global_ctors_start>:
     2d2:	cc 38       	cpi	r28, 0x8C	; 140
     2d4:	d1 07       	cpc	r29, r17
     2d6:	c9 f7       	brne	.-14     	; 0x2ca <.do_global_ctors_loop>
     2d8:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <main>
     2dc:	0c 94 1b 13 	jmp	0x2636	; 0x2636 <_exit>

000002e0 <__bad_interrupt>:
     2e0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002e4 <strcpy_P>:
     2e4:	fb 01       	movw	r30, r22
     2e6:	dc 01       	movw	r26, r24
     2e8:	05 90       	lpm	r0, Z+
     2ea:	0d 92       	st	X+, r0
     2ec:	00 20       	and	r0, r0
     2ee:	e1 f7       	brne	.-8      	; 0x2e8 <strcpy_P+0x4>
     2f0:	08 95       	ret

000002f2 <memcpy>:
     2f2:	fb 01       	movw	r30, r22
     2f4:	dc 01       	movw	r26, r24
     2f6:	02 c0       	rjmp	.+4      	; 0x2fc <memcpy+0xa>
     2f8:	01 90       	ld	r0, Z+
     2fa:	0d 92       	st	X+, r0
     2fc:	41 50       	subi	r20, 0x01	; 1
     2fe:	50 40       	sbci	r21, 0x00	; 0
     300:	d8 f7       	brcc	.-10     	; 0x2f8 <memcpy+0x6>
     302:	08 95       	ret

00000304 <strcmp>:
     304:	fb 01       	movw	r30, r22
     306:	dc 01       	movw	r26, r24
     308:	8d 91       	ld	r24, X+
     30a:	01 90       	ld	r0, Z+
     30c:	80 19       	sub	r24, r0
     30e:	01 10       	cpse	r0, r1
     310:	d9 f3       	breq	.-10     	; 0x308 <strcmp+0x4>
     312:	99 0b       	sbc	r25, r25
     314:	08 95       	ret

00000316 <strcpy>:
     316:	fb 01       	movw	r30, r22
     318:	dc 01       	movw	r26, r24
     31a:	01 90       	ld	r0, Z+
     31c:	0d 92       	st	X+, r0
     31e:	00 20       	and	r0, r0
     320:	e1 f7       	brne	.-8      	; 0x31a <strcpy+0x4>
     322:	08 95       	ret

00000324 <sprintf>:
     324:	ae e0       	ldi	r26, 0x0E	; 14
     326:	b0 e0       	ldi	r27, 0x00	; 0
     328:	e8 e9       	ldi	r30, 0x98	; 152
     32a:	f1 e0       	ldi	r31, 0x01	; 1
     32c:	0c 94 f2 12 	jmp	0x25e4	; 0x25e4 <__prologue_saves__+0x1c>
     330:	0d 89       	ldd	r16, Y+21	; 0x15
     332:	1e 89       	ldd	r17, Y+22	; 0x16
     334:	86 e0       	ldi	r24, 0x06	; 6
     336:	8c 83       	std	Y+4, r24	; 0x04
     338:	1a 83       	std	Y+2, r17	; 0x02
     33a:	09 83       	std	Y+1, r16	; 0x01
     33c:	8f ef       	ldi	r24, 0xFF	; 255
     33e:	9f e7       	ldi	r25, 0x7F	; 127
     340:	9e 83       	std	Y+6, r25	; 0x06
     342:	8d 83       	std	Y+5, r24	; 0x05
     344:	9e 01       	movw	r18, r28
     346:	27 5e       	subi	r18, 0xE7	; 231
     348:	3f 4f       	sbci	r19, 0xFF	; 255
     34a:	ce 01       	movw	r24, r28
     34c:	01 96       	adiw	r24, 0x01	; 1
     34e:	6f 89       	ldd	r22, Y+23	; 0x17
     350:	78 8d       	ldd	r23, Y+24	; 0x18
     352:	a9 01       	movw	r20, r18
     354:	0e 94 b6 01 	call	0x36c	; 0x36c <vfprintf>
     358:	2f 81       	ldd	r18, Y+7	; 0x07
     35a:	38 85       	ldd	r19, Y+8	; 0x08
     35c:	02 0f       	add	r16, r18
     35e:	13 1f       	adc	r17, r19
     360:	f8 01       	movw	r30, r16
     362:	10 82       	st	Z, r1
     364:	2e 96       	adiw	r28, 0x0e	; 14
     366:	e4 e0       	ldi	r30, 0x04	; 4
     368:	0c 94 0e 13 	jmp	0x261c	; 0x261c <__epilogue_restores__+0x1c>

0000036c <vfprintf>:
     36c:	ab e0       	ldi	r26, 0x0B	; 11
     36e:	b0 e0       	ldi	r27, 0x00	; 0
     370:	ec eb       	ldi	r30, 0xBC	; 188
     372:	f1 e0       	ldi	r31, 0x01	; 1
     374:	0c 94 e4 12 	jmp	0x25c8	; 0x25c8 <__prologue_saves__>
     378:	3c 01       	movw	r6, r24
     37a:	2b 01       	movw	r4, r22
     37c:	5a 01       	movw	r10, r20
     37e:	fc 01       	movw	r30, r24
     380:	17 82       	std	Z+7, r1	; 0x07
     382:	16 82       	std	Z+6, r1	; 0x06
     384:	83 81       	ldd	r24, Z+3	; 0x03
     386:	81 fd       	sbrc	r24, 1
     388:	03 c0       	rjmp	.+6      	; 0x390 <vfprintf+0x24>
     38a:	6f ef       	ldi	r22, 0xFF	; 255
     38c:	7f ef       	ldi	r23, 0xFF	; 255
     38e:	c6 c1       	rjmp	.+908    	; 0x71c <vfprintf+0x3b0>
     390:	9a e0       	ldi	r25, 0x0A	; 10
     392:	89 2e       	mov	r8, r25
     394:	1e 01       	movw	r2, r28
     396:	08 94       	sec
     398:	21 1c       	adc	r2, r1
     39a:	31 1c       	adc	r3, r1
     39c:	f3 01       	movw	r30, r6
     39e:	23 81       	ldd	r18, Z+3	; 0x03
     3a0:	f2 01       	movw	r30, r4
     3a2:	23 fd       	sbrc	r18, 3
     3a4:	85 91       	lpm	r24, Z+
     3a6:	23 ff       	sbrs	r18, 3
     3a8:	81 91       	ld	r24, Z+
     3aa:	2f 01       	movw	r4, r30
     3ac:	88 23       	and	r24, r24
     3ae:	09 f4       	brne	.+2      	; 0x3b2 <vfprintf+0x46>
     3b0:	b2 c1       	rjmp	.+868    	; 0x716 <vfprintf+0x3aa>
     3b2:	85 32       	cpi	r24, 0x25	; 37
     3b4:	39 f4       	brne	.+14     	; 0x3c4 <vfprintf+0x58>
     3b6:	23 fd       	sbrc	r18, 3
     3b8:	85 91       	lpm	r24, Z+
     3ba:	23 ff       	sbrs	r18, 3
     3bc:	81 91       	ld	r24, Z+
     3be:	2f 01       	movw	r4, r30
     3c0:	85 32       	cpi	r24, 0x25	; 37
     3c2:	29 f4       	brne	.+10     	; 0x3ce <vfprintf+0x62>
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	b3 01       	movw	r22, r6
     3c8:	0e 94 a9 03 	call	0x752	; 0x752 <fputc>
     3cc:	e7 cf       	rjmp	.-50     	; 0x39c <vfprintf+0x30>
     3ce:	98 2f       	mov	r25, r24
     3d0:	ff 24       	eor	r15, r15
     3d2:	ee 24       	eor	r14, r14
     3d4:	99 24       	eor	r9, r9
     3d6:	ff e1       	ldi	r31, 0x1F	; 31
     3d8:	ff 15       	cp	r31, r15
     3da:	d0 f0       	brcs	.+52     	; 0x410 <vfprintf+0xa4>
     3dc:	9b 32       	cpi	r25, 0x2B	; 43
     3de:	69 f0       	breq	.+26     	; 0x3fa <vfprintf+0x8e>
     3e0:	9c 32       	cpi	r25, 0x2C	; 44
     3e2:	28 f4       	brcc	.+10     	; 0x3ee <vfprintf+0x82>
     3e4:	90 32       	cpi	r25, 0x20	; 32
     3e6:	59 f0       	breq	.+22     	; 0x3fe <vfprintf+0x92>
     3e8:	93 32       	cpi	r25, 0x23	; 35
     3ea:	91 f4       	brne	.+36     	; 0x410 <vfprintf+0xa4>
     3ec:	0e c0       	rjmp	.+28     	; 0x40a <vfprintf+0x9e>
     3ee:	9d 32       	cpi	r25, 0x2D	; 45
     3f0:	49 f0       	breq	.+18     	; 0x404 <vfprintf+0x98>
     3f2:	90 33       	cpi	r25, 0x30	; 48
     3f4:	69 f4       	brne	.+26     	; 0x410 <vfprintf+0xa4>
     3f6:	41 e0       	ldi	r20, 0x01	; 1
     3f8:	24 c0       	rjmp	.+72     	; 0x442 <vfprintf+0xd6>
     3fa:	52 e0       	ldi	r21, 0x02	; 2
     3fc:	f5 2a       	or	r15, r21
     3fe:	84 e0       	ldi	r24, 0x04	; 4
     400:	f8 2a       	or	r15, r24
     402:	28 c0       	rjmp	.+80     	; 0x454 <vfprintf+0xe8>
     404:	98 e0       	ldi	r25, 0x08	; 8
     406:	f9 2a       	or	r15, r25
     408:	25 c0       	rjmp	.+74     	; 0x454 <vfprintf+0xe8>
     40a:	e0 e1       	ldi	r30, 0x10	; 16
     40c:	fe 2a       	or	r15, r30
     40e:	22 c0       	rjmp	.+68     	; 0x454 <vfprintf+0xe8>
     410:	f7 fc       	sbrc	r15, 7
     412:	29 c0       	rjmp	.+82     	; 0x466 <vfprintf+0xfa>
     414:	89 2f       	mov	r24, r25
     416:	80 53       	subi	r24, 0x30	; 48
     418:	8a 30       	cpi	r24, 0x0A	; 10
     41a:	70 f4       	brcc	.+28     	; 0x438 <vfprintf+0xcc>
     41c:	f6 fe       	sbrs	r15, 6
     41e:	05 c0       	rjmp	.+10     	; 0x42a <vfprintf+0xbe>
     420:	98 9c       	mul	r9, r8
     422:	90 2c       	mov	r9, r0
     424:	11 24       	eor	r1, r1
     426:	98 0e       	add	r9, r24
     428:	15 c0       	rjmp	.+42     	; 0x454 <vfprintf+0xe8>
     42a:	e8 9c       	mul	r14, r8
     42c:	e0 2c       	mov	r14, r0
     42e:	11 24       	eor	r1, r1
     430:	e8 0e       	add	r14, r24
     432:	f0 e2       	ldi	r31, 0x20	; 32
     434:	ff 2a       	or	r15, r31
     436:	0e c0       	rjmp	.+28     	; 0x454 <vfprintf+0xe8>
     438:	9e 32       	cpi	r25, 0x2E	; 46
     43a:	29 f4       	brne	.+10     	; 0x446 <vfprintf+0xda>
     43c:	f6 fc       	sbrc	r15, 6
     43e:	6b c1       	rjmp	.+726    	; 0x716 <vfprintf+0x3aa>
     440:	40 e4       	ldi	r20, 0x40	; 64
     442:	f4 2a       	or	r15, r20
     444:	07 c0       	rjmp	.+14     	; 0x454 <vfprintf+0xe8>
     446:	9c 36       	cpi	r25, 0x6C	; 108
     448:	19 f4       	brne	.+6      	; 0x450 <vfprintf+0xe4>
     44a:	50 e8       	ldi	r21, 0x80	; 128
     44c:	f5 2a       	or	r15, r21
     44e:	02 c0       	rjmp	.+4      	; 0x454 <vfprintf+0xe8>
     450:	98 36       	cpi	r25, 0x68	; 104
     452:	49 f4       	brne	.+18     	; 0x466 <vfprintf+0xfa>
     454:	f2 01       	movw	r30, r4
     456:	23 fd       	sbrc	r18, 3
     458:	95 91       	lpm	r25, Z+
     45a:	23 ff       	sbrs	r18, 3
     45c:	91 91       	ld	r25, Z+
     45e:	2f 01       	movw	r4, r30
     460:	99 23       	and	r25, r25
     462:	09 f0       	breq	.+2      	; 0x466 <vfprintf+0xfa>
     464:	b8 cf       	rjmp	.-144    	; 0x3d6 <vfprintf+0x6a>
     466:	89 2f       	mov	r24, r25
     468:	85 54       	subi	r24, 0x45	; 69
     46a:	83 30       	cpi	r24, 0x03	; 3
     46c:	18 f0       	brcs	.+6      	; 0x474 <vfprintf+0x108>
     46e:	80 52       	subi	r24, 0x20	; 32
     470:	83 30       	cpi	r24, 0x03	; 3
     472:	38 f4       	brcc	.+14     	; 0x482 <vfprintf+0x116>
     474:	44 e0       	ldi	r20, 0x04	; 4
     476:	50 e0       	ldi	r21, 0x00	; 0
     478:	a4 0e       	add	r10, r20
     47a:	b5 1e       	adc	r11, r21
     47c:	5f e3       	ldi	r21, 0x3F	; 63
     47e:	59 83       	std	Y+1, r21	; 0x01
     480:	0f c0       	rjmp	.+30     	; 0x4a0 <vfprintf+0x134>
     482:	93 36       	cpi	r25, 0x63	; 99
     484:	31 f0       	breq	.+12     	; 0x492 <vfprintf+0x126>
     486:	93 37       	cpi	r25, 0x73	; 115
     488:	79 f0       	breq	.+30     	; 0x4a8 <vfprintf+0x13c>
     48a:	93 35       	cpi	r25, 0x53	; 83
     48c:	09 f0       	breq	.+2      	; 0x490 <vfprintf+0x124>
     48e:	56 c0       	rjmp	.+172    	; 0x53c <vfprintf+0x1d0>
     490:	20 c0       	rjmp	.+64     	; 0x4d2 <vfprintf+0x166>
     492:	f5 01       	movw	r30, r10
     494:	80 81       	ld	r24, Z
     496:	89 83       	std	Y+1, r24	; 0x01
     498:	42 e0       	ldi	r20, 0x02	; 2
     49a:	50 e0       	ldi	r21, 0x00	; 0
     49c:	a4 0e       	add	r10, r20
     49e:	b5 1e       	adc	r11, r21
     4a0:	61 01       	movw	r12, r2
     4a2:	01 e0       	ldi	r16, 0x01	; 1
     4a4:	10 e0       	ldi	r17, 0x00	; 0
     4a6:	12 c0       	rjmp	.+36     	; 0x4cc <vfprintf+0x160>
     4a8:	f5 01       	movw	r30, r10
     4aa:	c0 80       	ld	r12, Z
     4ac:	d1 80       	ldd	r13, Z+1	; 0x01
     4ae:	f6 fc       	sbrc	r15, 6
     4b0:	03 c0       	rjmp	.+6      	; 0x4b8 <vfprintf+0x14c>
     4b2:	6f ef       	ldi	r22, 0xFF	; 255
     4b4:	7f ef       	ldi	r23, 0xFF	; 255
     4b6:	02 c0       	rjmp	.+4      	; 0x4bc <vfprintf+0x150>
     4b8:	69 2d       	mov	r22, r9
     4ba:	70 e0       	ldi	r23, 0x00	; 0
     4bc:	42 e0       	ldi	r20, 0x02	; 2
     4be:	50 e0       	ldi	r21, 0x00	; 0
     4c0:	a4 0e       	add	r10, r20
     4c2:	b5 1e       	adc	r11, r21
     4c4:	c6 01       	movw	r24, r12
     4c6:	0e 94 9e 03 	call	0x73c	; 0x73c <strnlen>
     4ca:	8c 01       	movw	r16, r24
     4cc:	5f e7       	ldi	r21, 0x7F	; 127
     4ce:	f5 22       	and	r15, r21
     4d0:	14 c0       	rjmp	.+40     	; 0x4fa <vfprintf+0x18e>
     4d2:	f5 01       	movw	r30, r10
     4d4:	c0 80       	ld	r12, Z
     4d6:	d1 80       	ldd	r13, Z+1	; 0x01
     4d8:	f6 fc       	sbrc	r15, 6
     4da:	03 c0       	rjmp	.+6      	; 0x4e2 <vfprintf+0x176>
     4dc:	6f ef       	ldi	r22, 0xFF	; 255
     4de:	7f ef       	ldi	r23, 0xFF	; 255
     4e0:	02 c0       	rjmp	.+4      	; 0x4e6 <vfprintf+0x17a>
     4e2:	69 2d       	mov	r22, r9
     4e4:	70 e0       	ldi	r23, 0x00	; 0
     4e6:	42 e0       	ldi	r20, 0x02	; 2
     4e8:	50 e0       	ldi	r21, 0x00	; 0
     4ea:	a4 0e       	add	r10, r20
     4ec:	b5 1e       	adc	r11, r21
     4ee:	c6 01       	movw	r24, r12
     4f0:	0e 94 93 03 	call	0x726	; 0x726 <strnlen_P>
     4f4:	8c 01       	movw	r16, r24
     4f6:	50 e8       	ldi	r21, 0x80	; 128
     4f8:	f5 2a       	or	r15, r21
     4fa:	f3 fe       	sbrs	r15, 3
     4fc:	07 c0       	rjmp	.+14     	; 0x50c <vfprintf+0x1a0>
     4fe:	1a c0       	rjmp	.+52     	; 0x534 <vfprintf+0x1c8>
     500:	80 e2       	ldi	r24, 0x20	; 32
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	b3 01       	movw	r22, r6
     506:	0e 94 a9 03 	call	0x752	; 0x752 <fputc>
     50a:	ea 94       	dec	r14
     50c:	8e 2d       	mov	r24, r14
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	08 17       	cp	r16, r24
     512:	19 07       	cpc	r17, r25
     514:	a8 f3       	brcs	.-22     	; 0x500 <vfprintf+0x194>
     516:	0e c0       	rjmp	.+28     	; 0x534 <vfprintf+0x1c8>
     518:	f6 01       	movw	r30, r12
     51a:	f7 fc       	sbrc	r15, 7
     51c:	85 91       	lpm	r24, Z+
     51e:	f7 fe       	sbrs	r15, 7
     520:	81 91       	ld	r24, Z+
     522:	6f 01       	movw	r12, r30
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	b3 01       	movw	r22, r6
     528:	0e 94 a9 03 	call	0x752	; 0x752 <fputc>
     52c:	e1 10       	cpse	r14, r1
     52e:	ea 94       	dec	r14
     530:	01 50       	subi	r16, 0x01	; 1
     532:	10 40       	sbci	r17, 0x00	; 0
     534:	01 15       	cp	r16, r1
     536:	11 05       	cpc	r17, r1
     538:	79 f7       	brne	.-34     	; 0x518 <vfprintf+0x1ac>
     53a:	ea c0       	rjmp	.+468    	; 0x710 <vfprintf+0x3a4>
     53c:	94 36       	cpi	r25, 0x64	; 100
     53e:	11 f0       	breq	.+4      	; 0x544 <vfprintf+0x1d8>
     540:	99 36       	cpi	r25, 0x69	; 105
     542:	69 f5       	brne	.+90     	; 0x59e <vfprintf+0x232>
     544:	f7 fe       	sbrs	r15, 7
     546:	08 c0       	rjmp	.+16     	; 0x558 <vfprintf+0x1ec>
     548:	f5 01       	movw	r30, r10
     54a:	20 81       	ld	r18, Z
     54c:	31 81       	ldd	r19, Z+1	; 0x01
     54e:	42 81       	ldd	r20, Z+2	; 0x02
     550:	53 81       	ldd	r21, Z+3	; 0x03
     552:	84 e0       	ldi	r24, 0x04	; 4
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	0a c0       	rjmp	.+20     	; 0x56c <vfprintf+0x200>
     558:	f5 01       	movw	r30, r10
     55a:	80 81       	ld	r24, Z
     55c:	91 81       	ldd	r25, Z+1	; 0x01
     55e:	9c 01       	movw	r18, r24
     560:	44 27       	eor	r20, r20
     562:	37 fd       	sbrc	r19, 7
     564:	40 95       	com	r20
     566:	54 2f       	mov	r21, r20
     568:	82 e0       	ldi	r24, 0x02	; 2
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	a8 0e       	add	r10, r24
     56e:	b9 1e       	adc	r11, r25
     570:	9f e6       	ldi	r25, 0x6F	; 111
     572:	f9 22       	and	r15, r25
     574:	57 ff       	sbrs	r21, 7
     576:	09 c0       	rjmp	.+18     	; 0x58a <vfprintf+0x21e>
     578:	50 95       	com	r21
     57a:	40 95       	com	r20
     57c:	30 95       	com	r19
     57e:	21 95       	neg	r18
     580:	3f 4f       	sbci	r19, 0xFF	; 255
     582:	4f 4f       	sbci	r20, 0xFF	; 255
     584:	5f 4f       	sbci	r21, 0xFF	; 255
     586:	e0 e8       	ldi	r30, 0x80	; 128
     588:	fe 2a       	or	r15, r30
     58a:	ca 01       	movw	r24, r20
     58c:	b9 01       	movw	r22, r18
     58e:	a1 01       	movw	r20, r2
     590:	2a e0       	ldi	r18, 0x0A	; 10
     592:	30 e0       	ldi	r19, 0x00	; 0
     594:	0e 94 d5 03 	call	0x7aa	; 0x7aa <__ultoa_invert>
     598:	d8 2e       	mov	r13, r24
     59a:	d2 18       	sub	r13, r2
     59c:	40 c0       	rjmp	.+128    	; 0x61e <vfprintf+0x2b2>
     59e:	95 37       	cpi	r25, 0x75	; 117
     5a0:	29 f4       	brne	.+10     	; 0x5ac <vfprintf+0x240>
     5a2:	1f 2d       	mov	r17, r15
     5a4:	1f 7e       	andi	r17, 0xEF	; 239
     5a6:	2a e0       	ldi	r18, 0x0A	; 10
     5a8:	30 e0       	ldi	r19, 0x00	; 0
     5aa:	1d c0       	rjmp	.+58     	; 0x5e6 <vfprintf+0x27a>
     5ac:	1f 2d       	mov	r17, r15
     5ae:	19 7f       	andi	r17, 0xF9	; 249
     5b0:	9f 36       	cpi	r25, 0x6F	; 111
     5b2:	61 f0       	breq	.+24     	; 0x5cc <vfprintf+0x260>
     5b4:	90 37       	cpi	r25, 0x70	; 112
     5b6:	20 f4       	brcc	.+8      	; 0x5c0 <vfprintf+0x254>
     5b8:	98 35       	cpi	r25, 0x58	; 88
     5ba:	09 f0       	breq	.+2      	; 0x5be <vfprintf+0x252>
     5bc:	ac c0       	rjmp	.+344    	; 0x716 <vfprintf+0x3aa>
     5be:	0f c0       	rjmp	.+30     	; 0x5de <vfprintf+0x272>
     5c0:	90 37       	cpi	r25, 0x70	; 112
     5c2:	39 f0       	breq	.+14     	; 0x5d2 <vfprintf+0x266>
     5c4:	98 37       	cpi	r25, 0x78	; 120
     5c6:	09 f0       	breq	.+2      	; 0x5ca <vfprintf+0x25e>
     5c8:	a6 c0       	rjmp	.+332    	; 0x716 <vfprintf+0x3aa>
     5ca:	04 c0       	rjmp	.+8      	; 0x5d4 <vfprintf+0x268>
     5cc:	28 e0       	ldi	r18, 0x08	; 8
     5ce:	30 e0       	ldi	r19, 0x00	; 0
     5d0:	0a c0       	rjmp	.+20     	; 0x5e6 <vfprintf+0x27a>
     5d2:	10 61       	ori	r17, 0x10	; 16
     5d4:	14 fd       	sbrc	r17, 4
     5d6:	14 60       	ori	r17, 0x04	; 4
     5d8:	20 e1       	ldi	r18, 0x10	; 16
     5da:	30 e0       	ldi	r19, 0x00	; 0
     5dc:	04 c0       	rjmp	.+8      	; 0x5e6 <vfprintf+0x27a>
     5de:	14 fd       	sbrc	r17, 4
     5e0:	16 60       	ori	r17, 0x06	; 6
     5e2:	20 e1       	ldi	r18, 0x10	; 16
     5e4:	32 e0       	ldi	r19, 0x02	; 2
     5e6:	17 ff       	sbrs	r17, 7
     5e8:	08 c0       	rjmp	.+16     	; 0x5fa <vfprintf+0x28e>
     5ea:	f5 01       	movw	r30, r10
     5ec:	60 81       	ld	r22, Z
     5ee:	71 81       	ldd	r23, Z+1	; 0x01
     5f0:	82 81       	ldd	r24, Z+2	; 0x02
     5f2:	93 81       	ldd	r25, Z+3	; 0x03
     5f4:	44 e0       	ldi	r20, 0x04	; 4
     5f6:	50 e0       	ldi	r21, 0x00	; 0
     5f8:	08 c0       	rjmp	.+16     	; 0x60a <vfprintf+0x29e>
     5fa:	f5 01       	movw	r30, r10
     5fc:	80 81       	ld	r24, Z
     5fe:	91 81       	ldd	r25, Z+1	; 0x01
     600:	bc 01       	movw	r22, r24
     602:	80 e0       	ldi	r24, 0x00	; 0
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	42 e0       	ldi	r20, 0x02	; 2
     608:	50 e0       	ldi	r21, 0x00	; 0
     60a:	a4 0e       	add	r10, r20
     60c:	b5 1e       	adc	r11, r21
     60e:	a1 01       	movw	r20, r2
     610:	0e 94 d5 03 	call	0x7aa	; 0x7aa <__ultoa_invert>
     614:	d8 2e       	mov	r13, r24
     616:	d2 18       	sub	r13, r2
     618:	8f e7       	ldi	r24, 0x7F	; 127
     61a:	f8 2e       	mov	r15, r24
     61c:	f1 22       	and	r15, r17
     61e:	f6 fe       	sbrs	r15, 6
     620:	0b c0       	rjmp	.+22     	; 0x638 <vfprintf+0x2cc>
     622:	5e ef       	ldi	r21, 0xFE	; 254
     624:	f5 22       	and	r15, r21
     626:	d9 14       	cp	r13, r9
     628:	38 f4       	brcc	.+14     	; 0x638 <vfprintf+0x2cc>
     62a:	f4 fe       	sbrs	r15, 4
     62c:	07 c0       	rjmp	.+14     	; 0x63c <vfprintf+0x2d0>
     62e:	f2 fc       	sbrc	r15, 2
     630:	05 c0       	rjmp	.+10     	; 0x63c <vfprintf+0x2d0>
     632:	8f ee       	ldi	r24, 0xEF	; 239
     634:	f8 22       	and	r15, r24
     636:	02 c0       	rjmp	.+4      	; 0x63c <vfprintf+0x2d0>
     638:	1d 2d       	mov	r17, r13
     63a:	01 c0       	rjmp	.+2      	; 0x63e <vfprintf+0x2d2>
     63c:	19 2d       	mov	r17, r9
     63e:	f4 fe       	sbrs	r15, 4
     640:	0d c0       	rjmp	.+26     	; 0x65c <vfprintf+0x2f0>
     642:	fe 01       	movw	r30, r28
     644:	ed 0d       	add	r30, r13
     646:	f1 1d       	adc	r31, r1
     648:	80 81       	ld	r24, Z
     64a:	80 33       	cpi	r24, 0x30	; 48
     64c:	19 f4       	brne	.+6      	; 0x654 <vfprintf+0x2e8>
     64e:	99 ee       	ldi	r25, 0xE9	; 233
     650:	f9 22       	and	r15, r25
     652:	08 c0       	rjmp	.+16     	; 0x664 <vfprintf+0x2f8>
     654:	1f 5f       	subi	r17, 0xFF	; 255
     656:	f2 fe       	sbrs	r15, 2
     658:	05 c0       	rjmp	.+10     	; 0x664 <vfprintf+0x2f8>
     65a:	03 c0       	rjmp	.+6      	; 0x662 <vfprintf+0x2f6>
     65c:	8f 2d       	mov	r24, r15
     65e:	86 78       	andi	r24, 0x86	; 134
     660:	09 f0       	breq	.+2      	; 0x664 <vfprintf+0x2f8>
     662:	1f 5f       	subi	r17, 0xFF	; 255
     664:	0f 2d       	mov	r16, r15
     666:	f3 fc       	sbrc	r15, 3
     668:	14 c0       	rjmp	.+40     	; 0x692 <vfprintf+0x326>
     66a:	f0 fe       	sbrs	r15, 0
     66c:	0f c0       	rjmp	.+30     	; 0x68c <vfprintf+0x320>
     66e:	1e 15       	cp	r17, r14
     670:	10 f0       	brcs	.+4      	; 0x676 <vfprintf+0x30a>
     672:	9d 2c       	mov	r9, r13
     674:	0b c0       	rjmp	.+22     	; 0x68c <vfprintf+0x320>
     676:	9d 2c       	mov	r9, r13
     678:	9e 0c       	add	r9, r14
     67a:	91 1a       	sub	r9, r17
     67c:	1e 2d       	mov	r17, r14
     67e:	06 c0       	rjmp	.+12     	; 0x68c <vfprintf+0x320>
     680:	80 e2       	ldi	r24, 0x20	; 32
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	b3 01       	movw	r22, r6
     686:	0e 94 a9 03 	call	0x752	; 0x752 <fputc>
     68a:	1f 5f       	subi	r17, 0xFF	; 255
     68c:	1e 15       	cp	r17, r14
     68e:	c0 f3       	brcs	.-16     	; 0x680 <vfprintf+0x314>
     690:	04 c0       	rjmp	.+8      	; 0x69a <vfprintf+0x32e>
     692:	1e 15       	cp	r17, r14
     694:	10 f4       	brcc	.+4      	; 0x69a <vfprintf+0x32e>
     696:	e1 1a       	sub	r14, r17
     698:	01 c0       	rjmp	.+2      	; 0x69c <vfprintf+0x330>
     69a:	ee 24       	eor	r14, r14
     69c:	04 ff       	sbrs	r16, 4
     69e:	0f c0       	rjmp	.+30     	; 0x6be <vfprintf+0x352>
     6a0:	80 e3       	ldi	r24, 0x30	; 48
     6a2:	90 e0       	ldi	r25, 0x00	; 0
     6a4:	b3 01       	movw	r22, r6
     6a6:	0e 94 a9 03 	call	0x752	; 0x752 <fputc>
     6aa:	02 ff       	sbrs	r16, 2
     6ac:	1d c0       	rjmp	.+58     	; 0x6e8 <vfprintf+0x37c>
     6ae:	01 fd       	sbrc	r16, 1
     6b0:	03 c0       	rjmp	.+6      	; 0x6b8 <vfprintf+0x34c>
     6b2:	88 e7       	ldi	r24, 0x78	; 120
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	0e c0       	rjmp	.+28     	; 0x6d4 <vfprintf+0x368>
     6b8:	88 e5       	ldi	r24, 0x58	; 88
     6ba:	90 e0       	ldi	r25, 0x00	; 0
     6bc:	0b c0       	rjmp	.+22     	; 0x6d4 <vfprintf+0x368>
     6be:	80 2f       	mov	r24, r16
     6c0:	86 78       	andi	r24, 0x86	; 134
     6c2:	91 f0       	breq	.+36     	; 0x6e8 <vfprintf+0x37c>
     6c4:	01 ff       	sbrs	r16, 1
     6c6:	02 c0       	rjmp	.+4      	; 0x6cc <vfprintf+0x360>
     6c8:	8b e2       	ldi	r24, 0x2B	; 43
     6ca:	01 c0       	rjmp	.+2      	; 0x6ce <vfprintf+0x362>
     6cc:	80 e2       	ldi	r24, 0x20	; 32
     6ce:	f7 fc       	sbrc	r15, 7
     6d0:	8d e2       	ldi	r24, 0x2D	; 45
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	b3 01       	movw	r22, r6
     6d6:	0e 94 a9 03 	call	0x752	; 0x752 <fputc>
     6da:	06 c0       	rjmp	.+12     	; 0x6e8 <vfprintf+0x37c>
     6dc:	80 e3       	ldi	r24, 0x30	; 48
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	b3 01       	movw	r22, r6
     6e2:	0e 94 a9 03 	call	0x752	; 0x752 <fputc>
     6e6:	9a 94       	dec	r9
     6e8:	d9 14       	cp	r13, r9
     6ea:	c0 f3       	brcs	.-16     	; 0x6dc <vfprintf+0x370>
     6ec:	da 94       	dec	r13
     6ee:	f1 01       	movw	r30, r2
     6f0:	ed 0d       	add	r30, r13
     6f2:	f1 1d       	adc	r31, r1
     6f4:	80 81       	ld	r24, Z
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	b3 01       	movw	r22, r6
     6fa:	0e 94 a9 03 	call	0x752	; 0x752 <fputc>
     6fe:	dd 20       	and	r13, r13
     700:	a9 f7       	brne	.-22     	; 0x6ec <vfprintf+0x380>
     702:	06 c0       	rjmp	.+12     	; 0x710 <vfprintf+0x3a4>
     704:	80 e2       	ldi	r24, 0x20	; 32
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	b3 01       	movw	r22, r6
     70a:	0e 94 a9 03 	call	0x752	; 0x752 <fputc>
     70e:	ea 94       	dec	r14
     710:	ee 20       	and	r14, r14
     712:	c1 f7       	brne	.-16     	; 0x704 <vfprintf+0x398>
     714:	43 ce       	rjmp	.-890    	; 0x39c <vfprintf+0x30>
     716:	f3 01       	movw	r30, r6
     718:	66 81       	ldd	r22, Z+6	; 0x06
     71a:	77 81       	ldd	r23, Z+7	; 0x07
     71c:	cb 01       	movw	r24, r22
     71e:	2b 96       	adiw	r28, 0x0b	; 11
     720:	e2 e1       	ldi	r30, 0x12	; 18
     722:	0c 94 00 13 	jmp	0x2600	; 0x2600 <__epilogue_restores__>

00000726 <strnlen_P>:
     726:	fc 01       	movw	r30, r24
     728:	05 90       	lpm	r0, Z+
     72a:	61 50       	subi	r22, 0x01	; 1
     72c:	70 40       	sbci	r23, 0x00	; 0
     72e:	01 10       	cpse	r0, r1
     730:	d8 f7       	brcc	.-10     	; 0x728 <strnlen_P+0x2>
     732:	80 95       	com	r24
     734:	90 95       	com	r25
     736:	8e 0f       	add	r24, r30
     738:	9f 1f       	adc	r25, r31
     73a:	08 95       	ret

0000073c <strnlen>:
     73c:	fc 01       	movw	r30, r24
     73e:	61 50       	subi	r22, 0x01	; 1
     740:	70 40       	sbci	r23, 0x00	; 0
     742:	01 90       	ld	r0, Z+
     744:	01 10       	cpse	r0, r1
     746:	d8 f7       	brcc	.-10     	; 0x73e <strnlen+0x2>
     748:	80 95       	com	r24
     74a:	90 95       	com	r25
     74c:	8e 0f       	add	r24, r30
     74e:	9f 1f       	adc	r25, r31
     750:	08 95       	ret

00000752 <fputc>:
     752:	0f 93       	push	r16
     754:	1f 93       	push	r17
     756:	cf 93       	push	r28
     758:	df 93       	push	r29
     75a:	8c 01       	movw	r16, r24
     75c:	eb 01       	movw	r28, r22
     75e:	8b 81       	ldd	r24, Y+3	; 0x03
     760:	81 ff       	sbrs	r24, 1
     762:	1b c0       	rjmp	.+54     	; 0x79a <fputc+0x48>
     764:	82 ff       	sbrs	r24, 2
     766:	0d c0       	rjmp	.+26     	; 0x782 <fputc+0x30>
     768:	2e 81       	ldd	r18, Y+6	; 0x06
     76a:	3f 81       	ldd	r19, Y+7	; 0x07
     76c:	8c 81       	ldd	r24, Y+4	; 0x04
     76e:	9d 81       	ldd	r25, Y+5	; 0x05
     770:	28 17       	cp	r18, r24
     772:	39 07       	cpc	r19, r25
     774:	64 f4       	brge	.+24     	; 0x78e <fputc+0x3c>
     776:	e8 81       	ld	r30, Y
     778:	f9 81       	ldd	r31, Y+1	; 0x01
     77a:	01 93       	st	Z+, r16
     77c:	f9 83       	std	Y+1, r31	; 0x01
     77e:	e8 83       	st	Y, r30
     780:	06 c0       	rjmp	.+12     	; 0x78e <fputc+0x3c>
     782:	e8 85       	ldd	r30, Y+8	; 0x08
     784:	f9 85       	ldd	r31, Y+9	; 0x09
     786:	80 2f       	mov	r24, r16
     788:	09 95       	icall
     78a:	89 2b       	or	r24, r25
     78c:	31 f4       	brne	.+12     	; 0x79a <fputc+0x48>
     78e:	8e 81       	ldd	r24, Y+6	; 0x06
     790:	9f 81       	ldd	r25, Y+7	; 0x07
     792:	01 96       	adiw	r24, 0x01	; 1
     794:	9f 83       	std	Y+7, r25	; 0x07
     796:	8e 83       	std	Y+6, r24	; 0x06
     798:	02 c0       	rjmp	.+4      	; 0x79e <fputc+0x4c>
     79a:	0f ef       	ldi	r16, 0xFF	; 255
     79c:	1f ef       	ldi	r17, 0xFF	; 255
     79e:	c8 01       	movw	r24, r16
     7a0:	df 91       	pop	r29
     7a2:	cf 91       	pop	r28
     7a4:	1f 91       	pop	r17
     7a6:	0f 91       	pop	r16
     7a8:	08 95       	ret

000007aa <__ultoa_invert>:
     7aa:	fa 01       	movw	r30, r20
     7ac:	aa 27       	eor	r26, r26
     7ae:	28 30       	cpi	r18, 0x08	; 8
     7b0:	51 f1       	breq	.+84     	; 0x806 <__ultoa_invert+0x5c>
     7b2:	20 31       	cpi	r18, 0x10	; 16
     7b4:	81 f1       	breq	.+96     	; 0x816 <__ultoa_invert+0x6c>
     7b6:	e8 94       	clt
     7b8:	6f 93       	push	r22
     7ba:	6e 7f       	andi	r22, 0xFE	; 254
     7bc:	6e 5f       	subi	r22, 0xFE	; 254
     7be:	7f 4f       	sbci	r23, 0xFF	; 255
     7c0:	8f 4f       	sbci	r24, 0xFF	; 255
     7c2:	9f 4f       	sbci	r25, 0xFF	; 255
     7c4:	af 4f       	sbci	r26, 0xFF	; 255
     7c6:	b1 e0       	ldi	r27, 0x01	; 1
     7c8:	3e d0       	rcall	.+124    	; 0x846 <__ultoa_invert+0x9c>
     7ca:	b4 e0       	ldi	r27, 0x04	; 4
     7cc:	3c d0       	rcall	.+120    	; 0x846 <__ultoa_invert+0x9c>
     7ce:	67 0f       	add	r22, r23
     7d0:	78 1f       	adc	r23, r24
     7d2:	89 1f       	adc	r24, r25
     7d4:	9a 1f       	adc	r25, r26
     7d6:	a1 1d       	adc	r26, r1
     7d8:	68 0f       	add	r22, r24
     7da:	79 1f       	adc	r23, r25
     7dc:	8a 1f       	adc	r24, r26
     7de:	91 1d       	adc	r25, r1
     7e0:	a1 1d       	adc	r26, r1
     7e2:	6a 0f       	add	r22, r26
     7e4:	71 1d       	adc	r23, r1
     7e6:	81 1d       	adc	r24, r1
     7e8:	91 1d       	adc	r25, r1
     7ea:	a1 1d       	adc	r26, r1
     7ec:	20 d0       	rcall	.+64     	; 0x82e <__ultoa_invert+0x84>
     7ee:	09 f4       	brne	.+2      	; 0x7f2 <__ultoa_invert+0x48>
     7f0:	68 94       	set
     7f2:	3f 91       	pop	r19
     7f4:	2a e0       	ldi	r18, 0x0A	; 10
     7f6:	26 9f       	mul	r18, r22
     7f8:	11 24       	eor	r1, r1
     7fa:	30 19       	sub	r19, r0
     7fc:	30 5d       	subi	r19, 0xD0	; 208
     7fe:	31 93       	st	Z+, r19
     800:	de f6       	brtc	.-74     	; 0x7b8 <__ultoa_invert+0xe>
     802:	cf 01       	movw	r24, r30
     804:	08 95       	ret
     806:	46 2f       	mov	r20, r22
     808:	47 70       	andi	r20, 0x07	; 7
     80a:	40 5d       	subi	r20, 0xD0	; 208
     80c:	41 93       	st	Z+, r20
     80e:	b3 e0       	ldi	r27, 0x03	; 3
     810:	0f d0       	rcall	.+30     	; 0x830 <__ultoa_invert+0x86>
     812:	c9 f7       	brne	.-14     	; 0x806 <__ultoa_invert+0x5c>
     814:	f6 cf       	rjmp	.-20     	; 0x802 <__ultoa_invert+0x58>
     816:	46 2f       	mov	r20, r22
     818:	4f 70       	andi	r20, 0x0F	; 15
     81a:	40 5d       	subi	r20, 0xD0	; 208
     81c:	4a 33       	cpi	r20, 0x3A	; 58
     81e:	18 f0       	brcs	.+6      	; 0x826 <__ultoa_invert+0x7c>
     820:	49 5d       	subi	r20, 0xD9	; 217
     822:	31 fd       	sbrc	r19, 1
     824:	40 52       	subi	r20, 0x20	; 32
     826:	41 93       	st	Z+, r20
     828:	02 d0       	rcall	.+4      	; 0x82e <__ultoa_invert+0x84>
     82a:	a9 f7       	brne	.-22     	; 0x816 <__ultoa_invert+0x6c>
     82c:	ea cf       	rjmp	.-44     	; 0x802 <__ultoa_invert+0x58>
     82e:	b4 e0       	ldi	r27, 0x04	; 4
     830:	a6 95       	lsr	r26
     832:	97 95       	ror	r25
     834:	87 95       	ror	r24
     836:	77 95       	ror	r23
     838:	67 95       	ror	r22
     83a:	ba 95       	dec	r27
     83c:	c9 f7       	brne	.-14     	; 0x830 <__ultoa_invert+0x86>
     83e:	00 97       	sbiw	r24, 0x00	; 0
     840:	61 05       	cpc	r22, r1
     842:	71 05       	cpc	r23, r1
     844:	08 95       	ret
     846:	9b 01       	movw	r18, r22
     848:	ac 01       	movw	r20, r24
     84a:	0a 2e       	mov	r0, r26
     84c:	06 94       	lsr	r0
     84e:	57 95       	ror	r21
     850:	47 95       	ror	r20
     852:	37 95       	ror	r19
     854:	27 95       	ror	r18
     856:	ba 95       	dec	r27
     858:	c9 f7       	brne	.-14     	; 0x84c <__ultoa_invert+0xa2>
     85a:	62 0f       	add	r22, r18
     85c:	73 1f       	adc	r23, r19
     85e:	84 1f       	adc	r24, r20
     860:	95 1f       	adc	r25, r21
     862:	a0 1d       	adc	r26, r0
     864:	08 95       	ret

00000866 <_ZN14ADS1298_Driver13_unset_ss_pinEv>:
 * Unset ss pin
 */
void ADS1298_Driver::_unset_ss_pin(){

	//! We assert low the ss pin
	digitalWrite(ADS1298_DEVICE, LOW);
     866:	8d e0       	ldi	r24, 0x0D	; 13
     868:	60 e0       	ldi	r22, 0x00	; 0
     86a:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <digitalWrite>
}
     86e:	08 95       	ret

00000870 <_ZN14ADS1298_Driver11_set_ss_pinEv>:
 * Set SS pin high
 */
void ADS1298_Driver::_set_ss_pin(){

	//! We trigger the CS
	digitalWrite(ADS1298_DEVICE, HIGH);
     870:	8d e0       	ldi	r24, 0x0D	; 13
     872:	61 e0       	ldi	r22, 0x01	; 1
     874:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <digitalWrite>
}
     878:	08 95       	ret

0000087a <_ZN14ADS1298_Driver12send_commandEh>:
/**
 * This method sends a command to the ADS1298
 *
 * @param cmd							- The command to send
 */
void ADS1298_Driver::send_command(uint8_t cmd){
     87a:	1f 93       	push	r17
     87c:	cf 93       	push	r28
     87e:	df 93       	push	r29
     880:	ec 01       	movw	r28, r24
     882:	16 2f       	mov	r17, r22

	//! We send the command
	//! Start listening
	this->_unset_ss_pin();
     884:	0e 94 33 04 	call	0x866	; 0x866 <_ZN14ADS1298_Driver13_unset_ss_pinEv>
     888:	1e bd       	out	0x2e, r17	; 46
     88a:	0d b4       	in	r0, 0x2d	; 45
     88c:	07 fe       	sbrs	r0, 7
     88e:	fd cf       	rjmp	.-6      	; 0x88a <_ZN14ADS1298_Driver12send_commandEh+0x10>
     890:	8e b5       	in	r24, 0x2e	; 46

	//! Send the data byte
	SPI.transfer(cmd);

	//! Stop listening
	this->_set_ss_pin();
     892:	ce 01       	movw	r24, r28
     894:	0e 94 38 04 	call	0x870	; 0x870 <_ZN14ADS1298_Driver11_set_ss_pinEv>
}
     898:	df 91       	pop	r29
     89a:	cf 91       	pop	r28
     89c:	1f 91       	pop	r17
     89e:	08 95       	ret

000008a0 <_ZN14ADS1298_Driver13_stop_ads1298Ev>:
 * This stops the ADS1298 Conversions
 */
void ADS1298_Driver::_stop_ads1298(){

	//! We stop the conversions
	digitalWrite(PIN_START, LOW);
     8a0:	88 e0       	ldi	r24, 0x08	; 8
     8a2:	60 e0       	ldi	r22, 0x00	; 0
     8a4:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <digitalWrite>
}
     8a8:	08 95       	ret

000008aa <_ZN14ADS1298_Driver14_start_ads1298Ev>:
 * This starts the ADS1298 Conversions
 */
void ADS1298_Driver::_start_ads1298(){

	//! We start the conversions
	digitalWrite(PIN_START, HIGH);
     8aa:	88 e0       	ldi	r24, 0x08	; 8
     8ac:	61 e0       	ldi	r22, 0x01	; 1
     8ae:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <digitalWrite>
}
     8b2:	08 95       	ret

000008b4 <_ZN14ADS1298_Driver10_init_pinsEv>:
//! Init methods

/**
 * This sets up the pins
 */
void ADS1298_Driver::_init_pins(){
     8b4:	0f 93       	push	r16
     8b6:	1f 93       	push	r17
     8b8:	8c 01       	movw	r16, r24

	//! We setup the pins

	//! SPI BUS
	pinMode(PIN_SCLK, 		OUTPUT);
     8ba:	8a e0       	ldi	r24, 0x0A	; 10
     8bc:	61 e0       	ldi	r22, 0x01	; 1
     8be:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <pinMode>
	pinMode(PIN_MISO, 		OUTPUT);
     8c2:	8c e0       	ldi	r24, 0x0C	; 12
     8c4:	61 e0       	ldi	r22, 0x01	; 1
     8c6:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <pinMode>
	pinMode(PIN_MOSI, 		OUTPUT);
     8ca:	8b e0       	ldi	r24, 0x0B	; 11
     8cc:	61 e0       	ldi	r22, 0x01	; 1
     8ce:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <pinMode>
	pinMode(PIN_SS,			OUTPUT);
     8d2:	8d e0       	ldi	r24, 0x0D	; 13
     8d4:	61 e0       	ldi	r22, 0x01	; 1
     8d6:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <pinMode>

	//! SIGNALS
	pinMode(PIN_LED, 		OUTPUT);
     8da:	86 e0       	ldi	r24, 0x06	; 6
     8dc:	61 e0       	ldi	r22, 0x01	; 1
     8de:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <pinMode>
	pinMode(PIN_RESET, 		OUTPUT);
     8e2:	89 e0       	ldi	r24, 0x09	; 9
     8e4:	61 e0       	ldi	r22, 0x01	; 1
     8e6:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <pinMode>
	pinMode(PIN_START, 		OUTPUT);
     8ea:	88 e0       	ldi	r24, 0x08	; 8
     8ec:	61 e0       	ldi	r22, 0x01	; 1
     8ee:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <pinMode>
	pinMode(PIN_DRDY, 		INPUT);
     8f2:	82 e0       	ldi	r24, 0x02	; 2
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <pinMode>

	this->_set_ss_pin();
     8fa:	c8 01       	movw	r24, r16
     8fc:	0e 94 38 04 	call	0x870	; 0x870 <_ZN14ADS1298_Driver11_set_ss_pinEv>

	//! We stop the conversions
	this->_stop_ads1298();
     900:	c8 01       	movw	r24, r16
     902:	0e 94 50 04 	call	0x8a0	; 0x8a0 <_ZN14ADS1298_Driver13_stop_ads1298Ev>

	//! Delay until done setting up
	delay(1);
     906:	61 e0       	ldi	r22, 0x01	; 1
     908:	70 e0       	ldi	r23, 0x00	; 0
     90a:	80 e0       	ldi	r24, 0x00	; 0
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	0e 94 65 0c 	call	0x18ca	; 0x18ca <delay>
}
     912:	1f 91       	pop	r17
     914:	0f 91       	pop	r16
     916:	08 95       	ret

00000918 <_ZN14ADS1298_Driver10write_byteEih>:
 * This method writes a byte to the ADS1298
 *
 * @param reg_address					- The register address
 * @param val_hex						- The value in hex
 */
void ADS1298_Driver::write_byte(int reg_address, uint8_t val_hex){
     918:	0f 93       	push	r16
     91a:	1f 93       	push	r17
     91c:	cf 93       	push	r28
     91e:	df 93       	push	r29
     920:	ec 01       	movw	r28, r24
     922:	16 2f       	mov	r17, r22
     924:	04 2f       	mov	r16, r20

	//! Activate the SPI device
	this->_unset_ss_pin();
     926:	0e 94 33 04 	call	0x866	; 0x866 <_ZN14ADS1298_Driver13_unset_ss_pinEv>

	//! Send the address to write to
	SPI.transfer(WREG | reg_address);
     92a:	10 64       	ori	r17, 0x40	; 64
     92c:	1e bd       	out	0x2e, r17	; 46
     92e:	0d b4       	in	r0, 0x2d	; 45
     930:	07 fe       	sbrs	r0, 7
     932:	fd cf       	rjmp	.-6      	; 0x92e <_ZN14ADS1298_Driver10write_byteEih+0x16>
     934:	8e b5       	in	r24, 0x2e	; 46
	delayMicroseconds(5);
     936:	85 e0       	ldi	r24, 0x05	; 5
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	0e 94 be 0c 	call	0x197c	; 0x197c <delayMicroseconds>
     93e:	1e bc       	out	0x2e, r1	; 46
     940:	0d b4       	in	r0, 0x2d	; 45
     942:	07 fe       	sbrs	r0, 7
     944:	fd cf       	rjmp	.-6      	; 0x940 <_ZN14ADS1298_Driver10write_byteEih+0x28>
     946:	8e b5       	in	r24, 0x2e	; 46

	//! Send the number of bytes to write - 1
	SPI.transfer(0);
	delayMicroseconds(5);
     948:	85 e0       	ldi	r24, 0x05	; 5
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	0e 94 be 0c 	call	0x197c	; 0x197c <delayMicroseconds>
     950:	0e bd       	out	0x2e, r16	; 46
     952:	0d b4       	in	r0, 0x2d	; 45
     954:	07 fe       	sbrs	r0, 7
     956:	fd cf       	rjmp	.-6      	; 0x952 <_ZN14ADS1298_Driver10write_byteEih+0x3a>
     958:	8e b5       	in	r24, 0x2e	; 46

	//! Transfer the value to write
	SPI.transfer(val_hex);
	delayMicroseconds(1);
     95a:	81 e0       	ldi	r24, 0x01	; 1
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	0e 94 be 0c 	call	0x197c	; 0x197c <delayMicroseconds>

	//! Deactivate the SPI device
	this->_set_ss_pin();
     962:	ce 01       	movw	r24, r28
     964:	0e 94 38 04 	call	0x870	; 0x870 <_ZN14ADS1298_Driver11_set_ss_pinEv>

}
     968:	df 91       	pop	r29
     96a:	cf 91       	pop	r28
     96c:	1f 91       	pop	r17
     96e:	0f 91       	pop	r16
     970:	08 95       	ret

00000972 <_ZN14ADS1298_Driver9read_byteEi>:
 * This method reads a byte from the ADS1298 chip
 *
 * @param reg_address					- The address to read
 * @return byte							- The byte read
 */
uint8_t ADS1298_Driver::read_byte(int reg_address){
     972:	1f 93       	push	r17
     974:	cf 93       	push	r28
     976:	df 93       	push	r29
     978:	ec 01       	movw	r28, r24
     97a:	16 2f       	mov	r17, r22

	  uint8_t out = 0;

	  //! Activate the SPI device
		this->_unset_ss_pin();
     97c:	0e 94 33 04 	call	0x866	; 0x866 <_ZN14ADS1298_Driver13_unset_ss_pinEv>

	  //! Send the address to read
	  SPI.transfer(RREG | reg_address);
     980:	10 62       	ori	r17, 0x20	; 32
     982:	1e bd       	out	0x2e, r17	; 46
     984:	0d b4       	in	r0, 0x2d	; 45
     986:	07 fe       	sbrs	r0, 7
     988:	fd cf       	rjmp	.-6      	; 0x984 <_ZN14ADS1298_Driver9read_byteEi+0x12>
     98a:	8e b5       	in	r24, 0x2e	; 46
	  delayMicroseconds(5);
     98c:	85 e0       	ldi	r24, 0x05	; 5
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	0e 94 be 0c 	call	0x197c	; 0x197c <delayMicroseconds>
     994:	1e bc       	out	0x2e, r1	; 46
     996:	0d b4       	in	r0, 0x2d	; 45
     998:	07 fe       	sbrs	r0, 7
     99a:	fd cf       	rjmp	.-6      	; 0x996 <_ZN14ADS1298_Driver9read_byteEi+0x24>
     99c:	8e b5       	in	r24, 0x2e	; 46

	  //! Send the number of bytes to read - 1
	  SPI.transfer(0);
	  delayMicroseconds(5);
     99e:	85 e0       	ldi	r24, 0x05	; 5
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	0e 94 be 0c 	call	0x197c	; 0x197c <delayMicroseconds>
     9a6:	1e bc       	out	0x2e, r1	; 46
     9a8:	0d b4       	in	r0, 0x2d	; 45
     9aa:	07 fe       	sbrs	r0, 7
     9ac:	fd cf       	rjmp	.-6      	; 0x9a8 <_ZN14ADS1298_Driver9read_byteEi+0x36>
     9ae:	1e b5       	in	r17, 0x2e	; 46

	  //! Send the read command @ byte 0
	  out = SPI.transfer(0);
	  delayMicroseconds(1);
     9b0:	81 e0       	ldi	r24, 0x01	; 1
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	0e 94 be 0c 	call	0x197c	; 0x197c <delayMicroseconds>

	  //! Deactivate the SPI Device
	  this->_set_ss_pin();
     9b8:	ce 01       	movw	r24, r28
     9ba:	0e 94 38 04 	call	0x870	; 0x870 <_ZN14ADS1298_Driver11_set_ss_pinEv>
	  return(out);
}
     9be:	81 2f       	mov	r24, r17
     9c0:	df 91       	pop	r29
     9c2:	cf 91       	pop	r28
     9c4:	1f 91       	pop	r17
     9c6:	08 95       	ret

000009c8 <_ZN14ADS1298_Driver21check_active_channelsEv>:
}

/**
 * This method checks which channels are active.
 */
void ADS1298_Driver::check_active_channels(){
     9c8:	8f 92       	push	r8
     9ca:	9f 92       	push	r9
     9cc:	af 92       	push	r10
     9ce:	bf 92       	push	r11
     9d0:	cf 92       	push	r12
     9d2:	df 92       	push	r13
     9d4:	ff 92       	push	r15
     9d6:	0f 93       	push	r16
     9d8:	1f 93       	push	r17
     9da:	cf 93       	push	r28
     9dc:	df 93       	push	r29
     9de:	ec 01       	movw	r28, r24

	//! Check if we are in read mode or if we do not have a channel available
	//! We return if that is the case.
	if(this->_configs._active || (this->_configs._channels < 1))
     9e0:	c3 5d       	subi	r28, 0xD3	; 211
     9e2:	de 4f       	sbci	r29, 0xFE	; 254
     9e4:	88 81       	ld	r24, Y
     9e6:	cd 52       	subi	r28, 0x2D	; 45
     9e8:	d1 40       	sbci	r29, 0x01	; 1
     9ea:	88 23       	and	r24, r24
     9ec:	09 f0       	breq	.+2      	; 0x9f0 <_ZN14ADS1298_Driver21check_active_channelsEv+0x28>
     9ee:	43 c0       	rjmp	.+134    	; 0xa76 <_ZN14ADS1298_Driver21check_active_channelsEv+0xae>
     9f0:	9e 01       	movw	r18, r28
     9f2:	26 5d       	subi	r18, 0xD6	; 214
     9f4:	3e 4f       	sbci	r19, 0xFE	; 254
     9f6:	f9 01       	movw	r30, r18
     9f8:	80 81       	ld	r24, Z
     9fa:	88 23       	and	r24, r24
     9fc:	e1 f1       	breq	.+120    	; 0xa76 <_ZN14ADS1298_Driver21check_active_channelsEv+0xae>
		return;

	//! We reset the internal active channels
	this->_configs._active_channels.channel_byte = NONE;
     9fe:	de 01       	movw	r26, r28
     a00:	a4 5d       	subi	r26, 0xD4	; 212
     a02:	be 4f       	sbci	r27, 0xFE	; 254
     a04:	1c 92       	st	X, r1
	this->_configs._num_active_channels = NONE;
     a06:	fe 01       	movw	r30, r28
     a08:	e5 5d       	subi	r30, 0xD5	; 213
     a0a:	fe 4f       	sbci	r31, 0xFE	; 254
     a0c:	10 82       	st	Z, r1
     a0e:	ff 24       	eor	r15, r15
     a10:	f3 94       	inc	r15

	//! We loop the channels to see which ones are active and which are not
	for(register uint8_t i = 1; i <= this->_configs._channels; i++){
     a12:	49 01       	movw	r8, r18

		delayMicroseconds(1);
		uint8_t temp = this->read_byte(CHnSET + i);

		//! We added the active channel to the struct
		this->_configs._active_channels.channel_byte |= ((temp & 0x07) != SHORTED) << i;
     a14:	5d 01       	movw	r10, r26
		if(this->_configs._active_channels.channel_byte & (0x01 << i))
			this->_configs._num_active_channels ++;
     a16:	6f 01       	movw	r12, r30
     a18:	2a c0       	rjmp	.+84     	; 0xa6e <_ZN14ADS1298_Driver21check_active_channelsEv+0xa6>
	this->_configs._num_active_channels = NONE;

	//! We loop the channels to see which ones are active and which are not
	for(register uint8_t i = 1; i <= this->_configs._channels; i++){

		delayMicroseconds(1);
     a1a:	81 e0       	ldi	r24, 0x01	; 1
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	0e 94 be 0c 	call	0x197c	; 0x197c <delayMicroseconds>
		uint8_t temp = this->read_byte(CHnSET + i);
     a22:	0f 2d       	mov	r16, r15
     a24:	10 e0       	ldi	r17, 0x00	; 0
     a26:	b8 01       	movw	r22, r16
     a28:	6c 5f       	subi	r22, 0xFC	; 252
     a2a:	7f 4f       	sbci	r23, 0xFF	; 255
     a2c:	ce 01       	movw	r24, r28
     a2e:	0e 94 b9 04 	call	0x972	; 0x972 <_ZN14ADS1298_Driver9read_byteEi>

		//! We added the active channel to the struct
		this->_configs._active_channels.channel_byte |= ((temp & 0x07) != SHORTED) << i;
     a32:	20 e0       	ldi	r18, 0x00	; 0
     a34:	30 e0       	ldi	r19, 0x00	; 0
     a36:	87 70       	andi	r24, 0x07	; 7
     a38:	81 30       	cpi	r24, 0x01	; 1
     a3a:	11 f0       	breq	.+4      	; 0xa40 <_ZN14ADS1298_Driver21check_active_channelsEv+0x78>
     a3c:	21 e0       	ldi	r18, 0x01	; 1
     a3e:	30 e0       	ldi	r19, 0x00	; 0
     a40:	00 2e       	mov	r0, r16
     a42:	02 c0       	rjmp	.+4      	; 0xa48 <_ZN14ADS1298_Driver21check_active_channelsEv+0x80>
     a44:	22 0f       	add	r18, r18
     a46:	33 1f       	adc	r19, r19
     a48:	0a 94       	dec	r0
     a4a:	e2 f7       	brpl	.-8      	; 0xa44 <_ZN14ADS1298_Driver21check_active_channelsEv+0x7c>
     a4c:	f5 01       	movw	r30, r10
     a4e:	80 81       	ld	r24, Z
     a50:	82 2b       	or	r24, r18
     a52:	80 83       	st	Z, r24
		if(this->_configs._active_channels.channel_byte & (0x01 << i))
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	02 c0       	rjmp	.+4      	; 0xa5c <_ZN14ADS1298_Driver21check_active_channelsEv+0x94>
     a58:	95 95       	asr	r25
     a5a:	87 95       	ror	r24
     a5c:	0a 95       	dec	r16
     a5e:	e2 f7       	brpl	.-8      	; 0xa58 <_ZN14ADS1298_Driver21check_active_channelsEv+0x90>
     a60:	80 ff       	sbrs	r24, 0
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <_ZN14ADS1298_Driver21check_active_channelsEv+0xa4>
			this->_configs._num_active_channels ++;
     a64:	f6 01       	movw	r30, r12
     a66:	80 81       	ld	r24, Z
     a68:	8f 5f       	subi	r24, 0xFF	; 255
     a6a:	80 83       	st	Z, r24
	//! We reset the internal active channels
	this->_configs._active_channels.channel_byte = NONE;
	this->_configs._num_active_channels = NONE;

	//! We loop the channels to see which ones are active and which are not
	for(register uint8_t i = 1; i <= this->_configs._channels; i++){
     a6c:	f3 94       	inc	r15
     a6e:	f4 01       	movw	r30, r8
     a70:	80 81       	ld	r24, Z
     a72:	8f 15       	cp	r24, r15
     a74:	90 f6       	brcc	.-92     	; 0xa1a <_ZN14ADS1298_Driver21check_active_channelsEv+0x52>
		//! We added the active channel to the struct
		this->_configs._active_channels.channel_byte |= ((temp & 0x07) != SHORTED) << i;
		if(this->_configs._active_channels.channel_byte & (0x01 << i))
			this->_configs._num_active_channels ++;
	}
}
     a76:	df 91       	pop	r29
     a78:	cf 91       	pop	r28
     a7a:	1f 91       	pop	r17
     a7c:	0f 91       	pop	r16
     a7e:	ff 90       	pop	r15
     a80:	df 90       	pop	r13
     a82:	cf 90       	pop	r12
     a84:	bf 90       	pop	r11
     a86:	af 90       	pop	r10
     a88:	9f 90       	pop	r9
     a8a:	8f 90       	pop	r8
     a8c:	08 95       	ret

00000a8e <_ZN14ADS1298_Driver9_init_adsEPS_>:
}

/**
 * This sets up the ADS1298 chip to function
 */
void ADS1298_Driver::_init_ads(ADS1298_Driver* driver){
     a8e:	0f 93       	push	r16
     a90:	1f 93       	push	r17
     a92:	cf 93       	push	r28
     a94:	df 93       	push	r29
     a96:	ec 01       	movw	r28, r24

	//! Let the ads1298 time to boot up
	delay(ONE_MILLI);
     a98:	61 e0       	ldi	r22, 0x01	; 1
     a9a:	70 e0       	ldi	r23, 0x00	; 0
     a9c:	80 e0       	ldi	r24, 0x00	; 0
     a9e:	90 e0       	ldi	r25, 0x00	; 0
     aa0:	0e 94 65 0c 	call	0x18ca	; 0x18ca <delay>

	//! Start read command is written
	driver->send_command(SDATAC);
     aa4:	ce 01       	movw	r24, r28
     aa6:	61 e1       	ldi	r22, 0x11	; 17
     aa8:	0e 94 3d 04 	call	0x87a	; 0x87a <_ZN14ADS1298_Driver12send_commandEh>

	//! Wait 10 milliseconds
	delay(ONE_MILLI * 10);
     aac:	6a e0       	ldi	r22, 0x0A	; 10
     aae:	70 e0       	ldi	r23, 0x00	; 0
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	90 e0       	ldi	r25, 0x00	; 0
     ab4:	0e 94 65 0c 	call	0x18ca	; 0x18ca <delay>

	//! Check the model number and the available channels
	driver->_configs._id = driver->read_byte(ID);
     ab8:	ce 01       	movw	r24, r28
     aba:	60 e0       	ldi	r22, 0x00	; 0
     abc:	70 e0       	ldi	r23, 0x00	; 0
     abe:	0e 94 b9 04 	call	0x972	; 0x972 <_ZN14ADS1298_Driver9read_byteEi>
     ac2:	c7 5d       	subi	r28, 0xD7	; 215
     ac4:	de 4f       	sbci	r29, 0xFE	; 254
     ac6:	88 83       	st	Y, r24
     ac8:	c9 52       	subi	r28, 0x29	; 41
     aca:	d1 40       	sbci	r29, 0x01	; 1

	//! We check the number of channels available
	switch (driver->_configs._id & B00011111) {
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	8f 71       	andi	r24, 0x1F	; 31
     ad0:	90 70       	andi	r25, 0x00	; 0
     ad2:	81 31       	cpi	r24, 0x11	; 17
     ad4:	91 05       	cpc	r25, r1
     ad6:	81 f0       	breq	.+32     	; 0xaf8 <_ZN14ADS1298_Driver9_init_adsEPS_+0x6a>
     ad8:	82 31       	cpi	r24, 0x12	; 18
     ada:	91 05       	cpc	r25, r1
     adc:	1c f4       	brge	.+6      	; 0xae4 <_ZN14ADS1298_Driver9_init_adsEPS_+0x56>
     ade:	40 97       	sbiw	r24, 0x10	; 16
     ae0:	a1 f4       	brne	.+40     	; 0xb0a <_ZN14ADS1298_Driver9_init_adsEPS_+0x7c>
     ae2:	06 c0       	rjmp	.+12     	; 0xaf0 <_ZN14ADS1298_Driver9_init_adsEPS_+0x62>
     ae4:	82 31       	cpi	r24, 0x12	; 18
     ae6:	91 05       	cpc	r25, r1
     ae8:	59 f0       	breq	.+22     	; 0xb00 <_ZN14ADS1298_Driver9_init_adsEPS_+0x72>
     aea:	4e 97       	sbiw	r24, 0x1e	; 30
     aec:	71 f4       	brne	.+28     	; 0xb0a <_ZN14ADS1298_Driver9_init_adsEPS_+0x7c>
     aee:	08 c0       	rjmp	.+16     	; 0xb00 <_ZN14ADS1298_Driver9_init_adsEPS_+0x72>

		//! ADS1294
		case  B10000: //16
	        driver->_configs._channels = 4;
     af0:	c6 5d       	subi	r28, 0xD6	; 214
     af2:	de 4f       	sbci	r29, 0xFE	; 254
     af4:	84 e0       	ldi	r24, 0x04	; 4
     af6:	07 c0       	rjmp	.+14     	; 0xb06 <_ZN14ADS1298_Driver9_init_adsEPS_+0x78>
	        break;

	    //! ADS1296
		case B10001: //17
			driver->_configs._channels = 6;
     af8:	c6 5d       	subi	r28, 0xD6	; 214
     afa:	de 4f       	sbci	r29, 0xFE	; 254
     afc:	86 e0       	ldi	r24, 0x06	; 6
     afe:	03 c0       	rjmp	.+6      	; 0xb06 <_ZN14ADS1298_Driver9_init_adsEPS_+0x78>
			driver->_configs._channels = 8;
	        break;

	    //! ADS1299
		case B11110: //30
			driver->_configs._channels = 8;
     b00:	c6 5d       	subi	r28, 0xD6	; 214
     b02:	de 4f       	sbci	r29, 0xFE	; 254
     b04:	88 e0       	ldi	r24, 0x08	; 8
     b06:	88 83       	st	Y, r24
     b08:	03 c0       	rjmp	.+6      	; 0xb10 <_ZN14ADS1298_Driver9_init_adsEPS_+0x82>
	        break;

		default:
			driver->_configs._channels = 0;
     b0a:	c6 5d       	subi	r28, 0xD6	; 214
     b0c:	de 4f       	sbci	r29, 0xFE	; 254
     b0e:	18 82       	st	Y, r1
     b10:	ca 52       	subi	r28, 0x2A	; 42
     b12:	d1 40       	sbci	r29, 0x01	; 1
	        break;
	  }

    //! All GPIO set to output 0x0000: (floating CMOS inputs can flicker on and off, creating noise)
	driver->write_byte(GPIO, EMPTY);
     b14:	ce 01       	movw	r24, r28
     b16:	64 e1       	ldi	r22, 0x14	; 20
     b18:	70 e0       	ldi	r23, 0x00	; 0
     b1a:	40 e0       	ldi	r20, 0x00	; 0
     b1c:	0e 94 8c 04 	call	0x918	; 0x918 <_ZN14ADS1298_Driver10write_byteEih>
	driver->write_byte(CONFIG3, PD_REFBUF | CONFIG3_const);
     b20:	ce 01       	movw	r24, r28
     b22:	63 e0       	ldi	r22, 0x03	; 3
     b24:	70 e0       	ldi	r23, 0x00	; 0
     b26:	40 ec       	ldi	r20, 0xC0	; 192
     b28:	0e 94 8c 04 	call	0x918	; 0x918 <_ZN14ADS1298_Driver10write_byteEih>

	//! Setup sampling rate
	driver->write_byte(CONFIG1, HIGH_RES_1k_SPS);
     b2c:	ce 01       	movw	r24, r28
     b2e:	61 e0       	ldi	r22, 0x01	; 1
     b30:	70 e0       	ldi	r23, 0x00	; 0
     b32:	45 e8       	ldi	r20, 0x85	; 133
     b34:	0e 94 8c 04 	call	0x918	; 0x918 <_ZN14ADS1298_Driver10write_byteEih>
     b38:	05 e0       	ldi	r16, 0x05	; 5
     b3a:	10 e0       	ldi	r17, 0x00	; 0

	//! Set the 8 channels to input signal
	//! Set each channel to have 12x gain
	for (register uint8_t i = 1; i < 9; i++) {
		driver->write_byte(CHnSET + i, ELECTRODE_INPUT | GAIN_12X); //report this channel with x12 gain
     b3c:	ce 01       	movw	r24, r28
     b3e:	b8 01       	movw	r22, r16
     b40:	40 e6       	ldi	r20, 0x60	; 96
     b42:	0e 94 8c 04 	call	0x918	; 0x918 <_ZN14ADS1298_Driver10write_byteEih>
     b46:	0f 5f       	subi	r16, 0xFF	; 255
     b48:	1f 4f       	sbci	r17, 0xFF	; 255
	//! Setup sampling rate
	driver->write_byte(CONFIG1, HIGH_RES_1k_SPS);

	//! Set the 8 channels to input signal
	//! Set each channel to have 12x gain
	for (register uint8_t i = 1; i < 9; i++) {
     b4a:	0d 30       	cpi	r16, 0x0D	; 13
     b4c:	11 05       	cpc	r17, r1
     b4e:	b1 f7       	brne	.-20     	; 0xb3c <_ZN14ADS1298_Driver9_init_adsEPS_+0xae>
		driver->write_byte(CHnSET + i, ELECTRODE_INPUT | GAIN_12X); //report this channel with x12 gain
	}

	//! Check active channels
	driver->check_active_channels();
     b50:	ce 01       	movw	r24, r28
     b52:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <_ZN14ADS1298_Driver21check_active_channelsEv>

	//! We start the ads1298
	driver->_start_ads1298();
     b56:	ce 01       	movw	r24, r28
     b58:	0e 94 55 04 	call	0x8aa	; 0x8aa <_ZN14ADS1298_Driver14_start_ads1298Ev>
}
     b5c:	df 91       	pop	r29
     b5e:	cf 91       	pop	r28
     b60:	1f 91       	pop	r17
     b62:	0f 91       	pop	r16
     b64:	08 95       	ret

00000b66 <_ZN14ADS1298_DriverC1EP10RingBuff_tPhP14spi_settings_tPFvPS_E>:
 * @param spi_settings					- The SPI settings
 */
ADS1298_Driver::ADS1298_Driver(RingBuff_t* buff, 
							    uint8_t* devices,
							   spi_settings_t* spi_settings,
							   void (*setup_method)(ADS1298_Driver* driver)) : GHID_SPI(spi_settings){
     b66:	af 92       	push	r10
     b68:	bf 92       	push	r11
     b6a:	cf 92       	push	r12
     b6c:	df 92       	push	r13
     b6e:	ef 92       	push	r14
     b70:	ff 92       	push	r15
     b72:	0f 93       	push	r16
     b74:	1f 93       	push	r17
     b76:	7c 01       	movw	r14, r24
     b78:	6b 01       	movw	r12, r22
     b7a:	5a 01       	movw	r10, r20
     b7c:	b9 01       	movw	r22, r18
     b7e:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <_ZN8GHID_SPIC2EP14spi_settings_t>

	//! Assign the global ring buffer type internally
	this->_buff = buff;
     b82:	89 e0       	ldi	r24, 0x09	; 9
     b84:	91 e0       	ldi	r25, 0x01	; 1
     b86:	e8 0e       	add	r14, r24
     b88:	f9 1e       	adc	r15, r25
     b8a:	f7 01       	movw	r30, r14
     b8c:	d1 82       	std	Z+1, r13	; 0x01
     b8e:	c0 82       	st	Z, r12
	this->_settings;
	this->_devices = devices;
     b90:	85 e2       	ldi	r24, 0x25	; 37
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	e8 0e       	add	r14, r24
     b96:	f9 1e       	adc	r15, r25
     b98:	f7 01       	movw	r30, r14
     b9a:	b1 82       	std	Z+1, r11	; 0x01
     b9c:	a0 82       	st	Z, r10
     b9e:	82 ed       	ldi	r24, 0xD2	; 210
     ba0:	9e ef       	ldi	r25, 0xFE	; 254
     ba2:	e8 0e       	add	r14, r24
     ba4:	f9 1e       	adc	r15, r25
     ba6:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     ba8:	f8 94       	cli
     baa:	f6 01       	movw	r30, r12
     bac:	ea 57       	subi	r30, 0x7A	; 122
     bae:	fe 4f       	sbci	r31, 0xFE	; 254
     bb0:	c0 82       	st	Z, r12
     bb2:	d1 82       	std	Z+1, r13	; 0x01
     bb4:	f6 01       	movw	r30, r12
     bb6:	e8 57       	subi	r30, 0x78	; 120
     bb8:	fe 4f       	sbci	r31, 0xFE	; 254
     bba:	c0 82       	st	Z, r12
     bbc:	d1 82       	std	Z+1, r13	; 0x01
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     bbe:	8f bf       	out	0x3f, r24	; 63
	
	//! We then init the buffer
	RingBuffer_InitBuffer(this->_buff);

	//! Here we setup the pins
	this->_init_pins();
     bc0:	c7 01       	movw	r24, r14
     bc2:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <_ZN14ADS1298_Driver10_init_pinsEv>
	
	//! We setup the ADS1298
	//! Set the setup method
	setup_method(this);
     bc6:	c7 01       	movw	r24, r14
     bc8:	f8 01       	movw	r30, r16
     bca:	09 95       	icall
}
     bcc:	1f 91       	pop	r17
     bce:	0f 91       	pop	r16
     bd0:	ff 90       	pop	r15
     bd2:	ef 90       	pop	r14
     bd4:	df 90       	pop	r13
     bd6:	cf 90       	pop	r12
     bd8:	bf 90       	pop	r11
     bda:	af 90       	pop	r10
     bdc:	08 95       	ret

00000bde <_ZN20Bluetooth_Dispatcher12get_responseEv>:
}

/**
 * Get access to the response entity.
 */
response_t* Bluetooth_Dispatcher::get_response(){
     bde:	fc 01       	movw	r30, r24
	return this->_response;
}
     be0:	86 8d       	ldd	r24, Z+30	; 0x1e
     be2:	97 8d       	ldd	r25, Z+31	; 0x1f
     be4:	08 95       	ret

00000be6 <_ZN20Bluetooth_Dispatcher12run_dispatchEv>:
/**
 * This is the run dispatch method
 *
 * @return success							- If the dispatch was successful
 */
bool Bluetooth_Dispatcher::run_dispatch(){
     be6:	0f 93       	push	r16
     be8:	1f 93       	push	r17
     bea:	8c 01       	movw	r16, r24

	//! We send the dispatch and we listen for a response
	this->_send_dispatch(&this->_dispatch);
     bec:	bc 01       	movw	r22, r24
     bee:	6c 5f       	subi	r22, 0xFC	; 252
     bf0:	7f 4f       	sbci	r23, 0xFF	; 255
     bf2:	0e 94 0d 0a 	call	0x141a	; 0x141a <_ZN10Dispatcher14_send_dispatchEP10dispatch_t>

	//! We check for the ack from the CC2540
	this->_response = this->_receive_dispatch_answer(BLUETOOTH_TIMEOUT);
     bf6:	c8 01       	movw	r24, r16
     bf8:	62 e3       	ldi	r22, 0x32	; 50
     bfa:	0e 94 21 0a 	call	0x1442	; 0x1442 <_ZN10Dispatcher24_receive_dispatch_answerEh>
     bfe:	fc 01       	movw	r30, r24
     c00:	d8 01       	movw	r26, r16
     c02:	5f 96       	adiw	r26, 0x1f	; 31
     c04:	9c 93       	st	X, r25
     c06:	8e 93       	st	-X, r24
     c08:	5e 97       	sbiw	r26, 0x1e	; 30
     c0a:	84 89       	ldd	r24, Z+20	; 0x14
     c0c:	81 11       	cpse	r24, r1
     c0e:	81 e0       	ldi	r24, 0x01	; 1
	//! Check if we got something.
	if(this->_response->response_length > EMPTY){
		return true;
	}
	return false;
}
     c10:	1f 91       	pop	r17
     c12:	0f 91       	pop	r16
     c14:	08 95       	ret

00000c16 <_ZN20Bluetooth_Dispatcher14setup_dispatchEPhh>:
 * This is the virtual setup method for the class
 */
void Bluetooth_Dispatcher::setup_dispatch(uint8_t* command_ptr, uint8_t length){

	//! We create a dispatch
	this->_create_dispatch(command_ptr, length);
     c16:	0e 94 08 0a 	call	0x1410	; 0x1410 <_ZN10Dispatcher16_create_dispatchEPhh>
}
     c1a:	08 95       	ret

00000c1c <_ZN20Bluetooth_DispatcherC1EP14HardwareSerial>:
#include "BluetoothCommandDispatcher.h"

/**
 * The default constructor for the class
 */
Bluetooth_Dispatcher::Bluetooth_Dispatcher(HardwareSerial* serial){
     c1c:	fc 01       	movw	r30, r24
     c1e:	cb 01       	movw	r24, r22
     c20:	2d e3       	ldi	r18, 0x3D	; 61
     c22:	31 e0       	ldi	r19, 0x01	; 1
     c24:	31 83       	std	Z+1, r19	; 0x01
     c26:	20 83       	st	Z, r18

	//! We set the internal Serial entry
	this->_serial = serial;
     c28:	75 8f       	std	Z+29, r23	; 0x1d
     c2a:	64 8f       	std	Z+28, r22	; 0x1c
	this->_response = 0x00;
     c2c:	17 8e       	std	Z+31, r1	; 0x1f
     c2e:	16 8e       	std	Z+30, r1	; 0x1e

	//! We set the appropriate baud rate
	this->_serial->begin(BLUETOOTH_BAUDRATE);
     c30:	40 e0       	ldi	r20, 0x00	; 0
     c32:	52 ec       	ldi	r21, 0xC2	; 194
     c34:	61 e0       	ldi	r22, 0x01	; 1
     c36:	70 e0       	ldi	r23, 0x00	; 0
     c38:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <_ZN14HardwareSerial5beginEm>
}
     c3c:	08 95       	ret

00000c3e <_ZN28Bluetooth_Connection_Handler5writeEP8buffer_t>:
 * This is the generic write method that writes a buffer type structure
 * to the connection.
 *
 * @param buf							- the buffer structure to write
 */
void Bluetooth_Connection_Handler::write(buffer_t* buf){
     c3e:	cf 93       	push	r28
     c40:	df 93       	push	r29
     c42:	db 01       	movw	r26, r22

	//! We write raw data
	this->_serial->write(buf->data, buf->length);
     c44:	ec 01       	movw	r28, r24
     c46:	e8 a1       	ldd	r30, Y+32	; 0x20
     c48:	f9 a1       	ldd	r31, Y+33	; 0x21
     c4a:	80 81       	ld	r24, Z
     c4c:	91 81       	ldd	r25, Z+1	; 0x01
     c4e:	4d 91       	ld	r20, X+
     c50:	ec 01       	movw	r28, r24
     c52:	2a 81       	ldd	r18, Y+2	; 0x02
     c54:	3b 81       	ldd	r19, Y+3	; 0x03
     c56:	cf 01       	movw	r24, r30
     c58:	bd 01       	movw	r22, r26
     c5a:	50 e0       	ldi	r21, 0x00	; 0
     c5c:	f9 01       	movw	r30, r18
     c5e:	09 95       	icall
}
     c60:	df 91       	pop	r29
     c62:	cf 91       	pop	r28
     c64:	08 95       	ret

00000c66 <_ZN28Bluetooth_Connection_Handler14_read_responseEv>:
 * it will be a simple '@' character to signal the all ok state,
 * while a '!' signifies and error state.
 *
 * @return success						- the command success
 */
bool Bluetooth_Connection_Handler::_read_response(){
     c66:	1f 93       	push	r17
     c68:	cf 93       	push	r28
     c6a:	df 93       	push	r29
     c6c:	ec 01       	movw	r28, r24
     c6e:	1a e0       	ldi	r17, 0x0A	; 10
     c70:	1c c0       	rjmp	.+56     	; 0xcaa <_ZN28Bluetooth_Connection_Handler14_read_responseEv+0x44>

	uint8_t timeout = TIMEOUT;
	while(timeout --){
		if(this->_serial->available()){
     c72:	e8 a1       	ldd	r30, Y+32	; 0x20
     c74:	f9 a1       	ldd	r31, Y+33	; 0x21
     c76:	a0 81       	ld	r26, Z
     c78:	b1 81       	ldd	r27, Z+1	; 0x01
     c7a:	14 96       	adiw	r26, 0x04	; 4
     c7c:	2d 91       	ld	r18, X+
     c7e:	3c 91       	ld	r19, X
     c80:	15 97       	sbiw	r26, 0x05	; 5
     c82:	cf 01       	movw	r24, r30
     c84:	f9 01       	movw	r30, r18
     c86:	09 95       	icall
     c88:	89 2b       	or	r24, r25
     c8a:	79 f0       	breq	.+30     	; 0xcaa <_ZN28Bluetooth_Connection_Handler14_read_responseEv+0x44>
			uint8_t response = this->_serial->read();
     c8c:	e8 a1       	ldd	r30, Y+32	; 0x20
     c8e:	f9 a1       	ldd	r31, Y+33	; 0x21
     c90:	a0 81       	ld	r26, Z
     c92:	b1 81       	ldd	r27, Z+1	; 0x01
     c94:	16 96       	adiw	r26, 0x06	; 6
     c96:	2d 91       	ld	r18, X+
     c98:	3c 91       	ld	r19, X
     c9a:	17 97       	sbiw	r26, 0x07	; 7
     c9c:	cf 01       	movw	r24, r30
     c9e:	f9 01       	movw	r30, r18
     ca0:	09 95       	icall

			if(response == OK){
     ca2:	80 34       	cpi	r24, 0x40	; 64
     ca4:	11 f4       	brne	.+4      	; 0xcaa <_ZN28Bluetooth_Connection_Handler14_read_responseEv+0x44>
     ca6:	81 e0       	ldi	r24, 0x01	; 1
     ca8:	03 c0       	rjmp	.+6      	; 0xcb0 <_ZN28Bluetooth_Connection_Handler14_read_responseEv+0x4a>
 * @return success						- the command success
 */
bool Bluetooth_Connection_Handler::_read_response(){

	uint8_t timeout = TIMEOUT;
	while(timeout --){
     caa:	11 50       	subi	r17, 0x01	; 1
     cac:	10 f7       	brcc	.-60     	; 0xc72 <_ZN28Bluetooth_Connection_Handler14_read_responseEv+0xc>
     cae:	80 e0       	ldi	r24, 0x00	; 0
				return true;
			}
		}
	}
	return false;
}
     cb0:	df 91       	pop	r29
     cb2:	cf 91       	pop	r28
     cb4:	1f 91       	pop	r17
     cb6:	08 95       	ret

00000cb8 <_ZN28Bluetooth_Connection_Handler14_write_commandEh>:
/**
 * This writes a command to the remote host device.
 *
 * @param command						- the command
 */
bool Bluetooth_Connection_Handler::_write_command(uint8_t command){
     cb8:	0f 93       	push	r16
     cba:	1f 93       	push	r17
     cbc:	8c 01       	movw	r16, r24

	//! We send the command.
	this->_serial->write(command);
     cbe:	fc 01       	movw	r30, r24
     cc0:	a0 a1       	ldd	r26, Z+32	; 0x20
     cc2:	b1 a1       	ldd	r27, Z+33	; 0x21
     cc4:	ed 91       	ld	r30, X+
     cc6:	fc 91       	ld	r31, X
     cc8:	11 97       	sbiw	r26, 0x01	; 1
     cca:	01 90       	ld	r0, Z+
     ccc:	f0 81       	ld	r31, Z
     cce:	e0 2d       	mov	r30, r0
     cd0:	cd 01       	movw	r24, r26
     cd2:	09 95       	icall

	//! We check the host device's response
	return this->_read_response();
     cd4:	c8 01       	movw	r24, r16
     cd6:	0e 94 33 06 	call	0xc66	; 0xc66 <_ZN28Bluetooth_Connection_Handler14_read_responseEv>
}
     cda:	1f 91       	pop	r17
     cdc:	0f 91       	pop	r16
     cde:	08 95       	ret

00000ce0 <_ZN28Bluetooth_Connection_Handler10disconnectEv>:
 * @return success						- if the disconnection was successful
 */
bool Bluetooth_Connection_Handler::disconnect(){

	//! This sends a disconnect command to the host device
	return this->_write_command(DISCONNECT);
     ce0:	64 e4       	ldi	r22, 0x44	; 68
     ce2:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <_ZN28Bluetooth_Connection_Handler14_write_commandEh>
}
     ce6:	08 95       	ret

00000ce8 <_ZN28Bluetooth_Connection_Handler7connectEv>:
 * @return success						- if the connection was successful
 */
bool Bluetooth_Connection_Handler::connect(){

	//! This sends a connect command to the host device
	return this->_write_command(CONNECT);
     ce8:	63 e4       	ldi	r22, 0x43	; 67
     cea:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <_ZN28Bluetooth_Connection_Handler14_write_commandEh>
}
     cee:	08 95       	ret

00000cf0 <_ZN28Bluetooth_Connection_Handler4readEh>:
 * of data and returns a buffer_t structure.
 *
 * @param length						- the buffer length to read
 * @return buffer_t						- the data container
 */
buffer_t* Bluetooth_Connection_Handler::read(byte length){
     cf0:	0f 93       	push	r16
     cf2:	1f 93       	push	r17
     cf4:	cf 93       	push	r28
     cf6:	df 93       	push	r29
     cf8:	ec 01       	movw	r28, r24

	byte i = 0;

	this->_buf.length = length;
     cfa:	6e a3       	std	Y+38, r22	; 0x26

	//! First we see of the host device is ok
	if(!this->_read_response()){
     cfc:	0e 94 33 06 	call	0xc66	; 0xc66 <_ZN28Bluetooth_Connection_Handler14_read_responseEv>
     d00:	88 23       	and	r24, r24
     d02:	19 f0       	breq	.+6      	; 0xd0a <_ZN28Bluetooth_Connection_Handler4readEh+0x1a>
     d04:	00 e0       	ldi	r16, 0x00	; 0
     d06:	1a e0       	ldi	r17, 0x0A	; 10
     d08:	23 c0       	rjmp	.+70     	; 0xd50 <_ZN28Bluetooth_Connection_Handler4readEh+0x60>
		 this->_buf.valid = false;
     d0a:	cf 5b       	subi	r28, 0xBF	; 191
     d0c:	df 4f       	sbci	r29, 0xFF	; 255
     d0e:	18 82       	st	Y, r1
		 return &this->_buf;
     d10:	9e 01       	movw	r18, r28
     d12:	2b 51       	subi	r18, 0x1B	; 27
     d14:	30 40       	sbci	r19, 0x00	; 0
     d16:	2b c0       	rjmp	.+86     	; 0xd6e <_ZN28Bluetooth_Connection_Handler4readEh+0x7e>
	}

	uint8_t timeout = TIMEOUT;
	//! We read a raw response
	while(timeout --){
		if(this->_serial->available()){
     d18:	e8 a1       	ldd	r30, Y+32	; 0x20
     d1a:	f9 a1       	ldd	r31, Y+33	; 0x21
     d1c:	a0 81       	ld	r26, Z
     d1e:	b1 81       	ldd	r27, Z+1	; 0x01
     d20:	14 96       	adiw	r26, 0x04	; 4
     d22:	2d 91       	ld	r18, X+
     d24:	3c 91       	ld	r19, X
     d26:	15 97       	sbiw	r26, 0x05	; 5
     d28:	cf 01       	movw	r24, r30
     d2a:	f9 01       	movw	r30, r18
     d2c:	09 95       	icall
     d2e:	89 2b       	or	r24, r25
     d30:	79 f0       	breq	.+30     	; 0xd50 <_ZN28Bluetooth_Connection_Handler4readEh+0x60>
			this->_buf.data[i] = this->_serial->read();
     d32:	a8 a1       	ldd	r26, Y+32	; 0x20
     d34:	b9 a1       	ldd	r27, Y+33	; 0x21
     d36:	ed 91       	ld	r30, X+
     d38:	fc 91       	ld	r31, X
     d3a:	11 97       	sbiw	r26, 0x01	; 1
     d3c:	06 80       	ldd	r0, Z+6	; 0x06
     d3e:	f7 81       	ldd	r31, Z+7	; 0x07
     d40:	e0 2d       	mov	r30, r0
     d42:	cd 01       	movw	r24, r26
     d44:	09 95       	icall
     d46:	fe 01       	movw	r30, r28
     d48:	e0 0f       	add	r30, r16
     d4a:	f1 1d       	adc	r31, r1
     d4c:	87 a3       	std	Z+39, r24	; 0x27
			i ++;
     d4e:	0f 5f       	subi	r16, 0xFF	; 255
		 return &this->_buf;
	}

	uint8_t timeout = TIMEOUT;
	//! We read a raw response
	while(timeout --){
     d50:	11 50       	subi	r17, 0x01	; 1
     d52:	10 f7       	brcc	.-60     	; 0xd18 <_ZN28Bluetooth_Connection_Handler4readEh+0x28>
			i ++;
		}
	}
	
	//! We check if we got the ok signal
	if(this->_buf.data[HEADER_INDEX] == HEADER_ID){	
     d54:	8f a1       	ldd	r24, Y+39	; 0x27
     d56:	fe 01       	movw	r30, r28
     d58:	ef 5b       	subi	r30, 0xBF	; 191
     d5a:	ff 4f       	sbci	r31, 0xFF	; 255
     d5c:	83 32       	cpi	r24, 0x23	; 35
     d5e:	19 f4       	brne	.+6      	; 0xd66 <_ZN28Bluetooth_Connection_Handler4readEh+0x76>
		this->_buf.valid = true;
     d60:	81 e0       	ldi	r24, 0x01	; 1
     d62:	80 83       	st	Z, r24
     d64:	01 c0       	rjmp	.+2      	; 0xd68 <_ZN28Bluetooth_Connection_Handler4readEh+0x78>
	}else{
		this->_buf.valid = false;
     d66:	10 82       	st	Z, r1
	}
	return &this->_buf;
     d68:	9e 01       	movw	r18, r28
     d6a:	2a 5d       	subi	r18, 0xDA	; 218
     d6c:	3f 4f       	sbci	r19, 0xFF	; 255
}
     d6e:	c9 01       	movw	r24, r18
     d70:	df 91       	pop	r29
     d72:	cf 91       	pop	r28
     d74:	1f 91       	pop	r17
     d76:	0f 91       	pop	r16
     d78:	08 95       	ret

00000d7a <_ZN28Bluetooth_Connection_Handler17_run_stream_basedEv>:
}

/**
 * We run the stream based method... No callbacks
 */
void Bluetooth_Connection_Handler::_run_stream_based(){
     d7a:	cf 93       	push	r28
     d7c:	df 93       	push	r29
     d7e:	ec 01       	movw	r28, r24
     d80:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     d82:	f8 94       	cli
     d84:	ec a1       	ldd	r30, Y+36	; 0x24
     d86:	fd a1       	ldd	r31, Y+37	; 0x25
     d88:	e6 57       	subi	r30, 0x76	; 118
     d8a:	fe 4f       	sbci	r31, 0xFE	; 254
     d8c:	20 81       	ld	r18, Z
     d8e:	31 81       	ldd	r19, Z+1	; 0x01
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     d90:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
     d92:	be 01       	movw	r22, r28
     d94:	6a 5d       	subi	r22, 0xDA	; 218
     d96:	7f 4f       	sbci	r23, 0xFF	; 255

	//! Container
	buffer_t* buff;

	//! New values?
	if(!RingBuffer_IsEmpty(this->_buff)){
     d98:	23 2b       	or	r18, r19
     d9a:	29 f0       	breq	.+10     	; 0xda6 <_ZN28Bluetooth_Connection_Handler17_run_stream_basedEv+0x2c>

		//! We process the data to be sent
		buff = Data_Processor::process_data(this->_buff, &this->_buf);
     d9c:	8c a1       	ldd	r24, Y+36	; 0x24
     d9e:	9d a1       	ldd	r25, Y+37	; 0x25
     da0:	0e 94 9e 09 	call	0x133c	; 0x133c <_ZN14Data_Processor12process_dataEP10RingBuff_tP8buffer_t>
     da4:	01 c0       	rjmp	.+2      	; 0xda8 <_ZN28Bluetooth_Connection_Handler17_run_stream_basedEv+0x2e>
		
	//! No new values
	}else{

		//! We get the last values processed
		buff = Data_Processor::get_last_values(&this->_buf);
     da6:	cb 01       	movw	r24, r22
     da8:	bc 01       	movw	r22, r24
	}

	//! We send them
	this->write(buff);
     daa:	e8 81       	ld	r30, Y
     dac:	f9 81       	ldd	r31, Y+1	; 0x01
     dae:	00 84       	ldd	r0, Z+8	; 0x08
     db0:	f1 85       	ldd	r31, Z+9	; 0x09
     db2:	e0 2d       	mov	r30, r0
     db4:	ce 01       	movw	r24, r28
     db6:	09 95       	icall
}
     db8:	df 91       	pop	r29
     dba:	cf 91       	pop	r28
     dbc:	08 95       	ret

00000dbe <_ZN28Bluetooth_Connection_Handler3runEv>:
}

/**
 *  This is the run method
 */ 
void Bluetooth_Connection_Handler::run(void){
     dbe:	fc 01       	movw	r30, r24
	
	//! We set the pointer to the right method.
	switch(this->_type){
     dc0:	ee 5b       	subi	r30, 0xBE	; 190
     dc2:	ff 4f       	sbci	r31, 0xFF	; 255
     dc4:	80 81       	ld	r24, Z
     dc6:	91 81       	ldd	r25, Z+1	; 0x01
     dc8:	e2 54       	subi	r30, 0x42	; 66
     dca:	f0 40       	sbci	r31, 0x00	; 0
     dcc:	01 97       	sbiw	r24, 0x01	; 1
     dce:	39 f4       	brne	.+14     	; 0xdde <_ZN28Bluetooth_Connection_Handler3runEv+0x20>
 * We run the request based method... Using callbacks
 */
void Bluetooth_Connection_Handler::_run_request_based(){

	//! All we do is poll the protocol handler
	this->_handler->poll();
     dd0:	ec 5b       	subi	r30, 0xBC	; 188
     dd2:	ff 4f       	sbci	r31, 0xFF	; 255
     dd4:	80 81       	ld	r24, Z
     dd6:	91 81       	ldd	r25, Z+1	; 0x01
     dd8:	0e 94 1e 09 	call	0x123c	; 0x123c <_ZN25ConnectionProtocolHandler4pollEv>
     ddc:	08 95       	ret
			break;

		//! Stream based - Default method
		case DATA_STREAM_BASED:
		default:
			this->_run_stream_based();
     dde:	cf 01       	movw	r24, r30
     de0:	0e 94 bd 06 	call	0xd7a	; 0xd7a <_ZN28Bluetooth_Connection_Handler17_run_stream_basedEv>
     de4:	08 95       	ret

00000de6 <_ZN28Bluetooth_Connection_Handler6rebootEv>:
}

/**
 * A reboot method to reset the connection device.
 */
void Bluetooth_Connection_Handler::reboot(){
     de6:	0f 93       	push	r16
     de8:	1f 93       	push	r17
     dea:	8c 01       	movw	r16, r24

	//! Send reboot command
	this->_write_command(REBOOT);
     dec:	62 e5       	ldi	r22, 0x52	; 82
     dee:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <_ZN28Bluetooth_Connection_Handler14_write_commandEh>

	//! This reboots the device
	this->_utils->reboot();
     df2:	0a 5b       	subi	r16, 0xBA	; 186
     df4:	1f 4f       	sbci	r17, 0xFF	; 255
     df6:	f8 01       	movw	r30, r16
     df8:	80 81       	ld	r24, Z
     dfa:	91 81       	ldd	r25, Z+1	; 0x01
     dfc:	0e 94 9c 0b 	call	0x1738	; 0x1738 <_ZN9utilities6rebootEv>
}
     e00:	1f 91       	pop	r17
     e02:	0f 91       	pop	r16
     e04:	08 95       	ret

00000e06 <_ZN28Bluetooth_Connection_HandlerC1EP14HardwareSerial17connection_type_tP10RingBuff_tP25ConnectionProtocolHandlerP9utilities>:
/**
 * This is the default connection handler constructor.
 */
Bluetooth_Connection_Handler::Bluetooth_Connection_Handler(HardwareSerial* hw_serial,
						connection_type_t type, RingBuff_t* ring,
						ConnectionProtocolHandler* handler, utilities* utils){
     e06:	af 92       	push	r10
     e08:	bf 92       	push	r11
     e0a:	cf 92       	push	r12
     e0c:	df 92       	push	r13
     e0e:	ef 92       	push	r14
     e10:	ff 92       	push	r15
     e12:	0f 93       	push	r16
     e14:	1f 93       	push	r17
     e16:	6c 01       	movw	r12, r24
     e18:	cb 01       	movw	r24, r22
     e1a:	5a 01       	movw	r10, r20
     e1c:	45 e4       	ldi	r20, 0x45	; 69
     e1e:	51 e0       	ldi	r21, 0x01	; 1
     e20:	f6 01       	movw	r30, r12
     e22:	51 83       	std	Z+1, r21	; 0x01
     e24:	40 83       	st	Z, r20

	//! Set the internal serial port
	this->_serial = hw_serial;
     e26:	71 a3       	std	Z+33, r23	; 0x21
     e28:	60 a3       	std	Z+32, r22	; 0x20
	this->_con_type = type;
     e2a:	b3 82       	std	Z+3, r11	; 0x03
     e2c:	a2 82       	std	Z+2, r10	; 0x02
	this->_buff = ring;
     e2e:	35 a3       	std	Z+37, r19	; 0x25
     e30:	24 a3       	std	Z+36, r18	; 0x24
	this->_handler = handler;
     e32:	24 e4       	ldi	r18, 0x44	; 68
     e34:	30 e0       	ldi	r19, 0x00	; 0
     e36:	c2 0e       	add	r12, r18
     e38:	d3 1e       	adc	r13, r19
     e3a:	f6 01       	movw	r30, r12
     e3c:	01 93       	st	Z+, r16
     e3e:	11 93       	st	Z+, r17
     e40:	6f 01       	movw	r12, r30
	this->_utils = utils;
     e42:	f1 82       	std	Z+1, r15	; 0x01
     e44:	e0 82       	st	Z, r14
     e46:	2a eb       	ldi	r18, 0xBA	; 186
     e48:	3f ef       	ldi	r19, 0xFF	; 255
     e4a:	c2 0e       	add	r12, r18
     e4c:	d3 1e       	adc	r13, r19

	//! Initialize it
	this->_serial->begin(BAUDRATE);
     e4e:	40 e0       	ldi	r20, 0x00	; 0
     e50:	52 ec       	ldi	r21, 0xC2	; 194
     e52:	61 e0       	ldi	r22, 0x01	; 1
     e54:	70 e0       	ldi	r23, 0x00	; 0
     e56:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <_ZN14HardwareSerial5beginEm>
	this->_serial->flush();
     e5a:	f6 01       	movw	r30, r12
     e5c:	a0 a1       	ldd	r26, Z+32	; 0x20
     e5e:	b1 a1       	ldd	r27, Z+33	; 0x21
     e60:	ed 91       	ld	r30, X+
     e62:	fc 91       	ld	r31, X
     e64:	11 97       	sbiw	r26, 0x01	; 1
     e66:	02 84       	ldd	r0, Z+10	; 0x0a
     e68:	f3 85       	ldd	r31, Z+11	; 0x0b
     e6a:	e0 2d       	mov	r30, r0
     e6c:	cd 01       	movw	r24, r26
     e6e:	09 95       	icall

	//! We set the run type
	this->_type = type;
     e70:	22 e4       	ldi	r18, 0x42	; 66
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	c2 0e       	add	r12, r18
     e76:	d3 1e       	adc	r13, r19
     e78:	f6 01       	movw	r30, r12
     e7a:	b1 82       	std	Z+1, r11	; 0x01
     e7c:	a0 82       	st	Z, r10
}
     e7e:	1f 91       	pop	r17
     e80:	0f 91       	pop	r16
     e82:	ff 90       	pop	r15
     e84:	ef 90       	pop	r14
     e86:	df 90       	pop	r13
     e88:	cf 90       	pop	r12
     e8a:	bf 90       	pop	r11
     e8c:	af 90       	pop	r10
     e8e:	08 95       	ret

00000e90 <_ZN13CC2540_DriverC1EPcS0_P20Bluetooth_DispatcherPFvPS_E>:
 * @param setup								- The setup type
 */
CC2540_Driver::CC2540_Driver(char* device_name,
							char* command_table,
							Bluetooth_Dispatcher* serial,
							void (*setup_method)(CC2540_Driver* driver)){
     e90:	0f 93       	push	r16
     e92:	1f 93       	push	r17
     e94:	fc 01       	movw	r30, r24

	//! Set the internal access points
	this->_command_table = command_table;
     e96:	51 83       	std	Z+1, r21	; 0x01
     e98:	40 83       	st	Z, r20
	this->_name = device_name;
     e9a:	73 83       	std	Z+3, r23	; 0x03
     e9c:	62 83       	std	Z+2, r22	; 0x02
	this->_dispacher = serial;
     e9e:	35 83       	std	Z+5, r19	; 0x05
     ea0:	24 83       	std	Z+4, r18	; 0x04
	setup_method(this);
     ea2:	f8 01       	movw	r30, r16
     ea4:	09 95       	icall
}
     ea6:	1f 91       	pop	r17
     ea8:	0f 91       	pop	r16
     eaa:	08 95       	ret

00000eac <_ZN13CC2540_Driver18_check_ok_responseEv>:
/**
 * This method checks for an ok return signal
 *
 * @return success							- If OK was received
 */
bool CC2540_Driver::_check_ok_response(){
     eac:	cf 93       	push	r28
     eae:	df 93       	push	r29
     eb0:	ec 01       	movw	r28, r24

	//! We check the response
	if(this->_dispacher->run_dispatch()){
     eb2:	ec 81       	ldd	r30, Y+4	; 0x04
     eb4:	fd 81       	ldd	r31, Y+5	; 0x05
     eb6:	a0 81       	ld	r26, Z
     eb8:	b1 81       	ldd	r27, Z+1	; 0x01
     eba:	12 96       	adiw	r26, 0x02	; 2
     ebc:	2d 91       	ld	r18, X+
     ebe:	3c 91       	ld	r19, X
     ec0:	13 97       	sbiw	r26, 0x03	; 3
     ec2:	cf 01       	movw	r24, r30
     ec4:	f9 01       	movw	r30, r18
     ec6:	09 95       	icall
     ec8:	88 23       	and	r24, r24
     eca:	69 f0       	breq	.+26     	; 0xee6 <_ZN13CC2540_Driver18_check_ok_responseEv+0x3a>
		if(strcmp((char*)this->_dispacher->get_response()->response, OK) == SUCCESS){
     ecc:	8c 81       	ldd	r24, Y+4	; 0x04
     ece:	9d 81       	ldd	r25, Y+5	; 0x05
     ed0:	0e 94 ef 05 	call	0xbde	; 0xbde <_ZN20Bluetooth_Dispatcher12get_responseEv>
     ed4:	60 e0       	ldi	r22, 0x00	; 0
     ed6:	71 e0       	ldi	r23, 0x01	; 1
     ed8:	0e 94 82 01 	call	0x304	; 0x304 <strcmp>
     edc:	9c 01       	movw	r18, r24
     ede:	80 e0       	ldi	r24, 0x00	; 0
     ee0:	23 2b       	or	r18, r19
     ee2:	09 f4       	brne	.+2      	; 0xee6 <_ZN13CC2540_Driver18_check_ok_responseEv+0x3a>
     ee4:	81 e0       	ldi	r24, 0x01	; 1
			return true;
		}
	}
	return false;
}
     ee6:	df 91       	pop	r29
     ee8:	cf 91       	pop	r28
     eea:	08 95       	ret

00000eec <_ZN13CC2540_Driver12_get_commandEh>:
 * This gets the command from the eeprom base.
 *
 * @param command							- The command index
 * @return char*							- The command string
 */
char* CC2540_Driver::_get_command(uint8_t command){
     eec:	0f 93       	push	r16
     eee:	1f 93       	push	r17
     ef0:	df 93       	push	r29
     ef2:	cf 93       	push	r28
     ef4:	cd b7       	in	r28, 0x3d	; 61
     ef6:	de b7       	in	r29, 0x3e	; 62
     ef8:	6e 97       	sbiw	r28, 0x1e	; 30
     efa:	0f b6       	in	r0, 0x3f	; 63
     efc:	f8 94       	cli
     efe:	de bf       	out	0x3e, r29	; 62
     f00:	0f be       	out	0x3f, r0	; 63
     f02:	cd bf       	out	0x3d, r28	; 61
     f04:	fc 01       	movw	r30, r24

	//! Reset the default buffer.
	char command_buffer[MAX_COMMAND_LENGTH];
	memset(command_buffer, '\0', sizeof(command_buffer));
     f06:	8e 01       	movw	r16, r28
     f08:	0f 5f       	subi	r16, 0xFF	; 255
     f0a:	1f 4f       	sbci	r17, 0xFF	; 255
     f0c:	8e e1       	ldi	r24, 0x1E	; 30
     f0e:	d8 01       	movw	r26, r16
     f10:	1d 92       	st	X+, r1
     f12:	8a 95       	dec	r24
     f14:	e9 f7       	brne	.-6      	; 0xf10 <_ZN13CC2540_Driver12_get_commandEh+0x24>

	//! Copy the command over
	strcpy_P((char*)command_buffer, (char*)pgm_read_word(&(this->_command_table[command])));
     f16:	01 90       	ld	r0, Z+
     f18:	f0 81       	ld	r31, Z
     f1a:	e0 2d       	mov	r30, r0
     f1c:	e6 0f       	add	r30, r22
     f1e:	f1 1d       	adc	r31, r1
     f20:	65 91       	lpm	r22, Z+
     f22:	74 91       	lpm	r23, Z+
     f24:	c8 01       	movw	r24, r16
     f26:	0e 94 72 01 	call	0x2e4	; 0x2e4 <strcpy_P>
	return command_buffer;
}
     f2a:	c8 01       	movw	r24, r16
     f2c:	6e 96       	adiw	r28, 0x1e	; 30
     f2e:	0f b6       	in	r0, 0x3f	; 63
     f30:	f8 94       	cli
     f32:	de bf       	out	0x3e, r29	; 62
     f34:	0f be       	out	0x3f, r0	; 63
     f36:	cd bf       	out	0x3d, r28	; 61
     f38:	cf 91       	pop	r28
     f3a:	df 91       	pop	r29
     f3c:	1f 91       	pop	r17
     f3e:	0f 91       	pop	r16
     f40:	08 95       	ret

00000f42 <_ZN13CC2540_Driver7_rebootEv>:
 *  This method reboots the ble chip.
 *  	- Command = AT+RESTART
 *
 * @return success							- If the dispatch was successful
 */
bool CC2540_Driver::_reboot(){
     f42:	ef 92       	push	r14
     f44:	ff 92       	push	r15
     f46:	0f 93       	push	r16
     f48:	1f 93       	push	r17
     f4a:	df 93       	push	r29
     f4c:	cf 93       	push	r28
     f4e:	cd b7       	in	r28, 0x3d	; 61
     f50:	de b7       	in	r29, 0x3e	; 62
     f52:	27 97       	sbiw	r28, 0x07	; 7
     f54:	0f b6       	in	r0, 0x3f	; 63
     f56:	f8 94       	cli
     f58:	de bf       	out	0x3e, r29	; 62
     f5a:	0f be       	out	0x3f, r0	; 63
     f5c:	cd bf       	out	0x3d, r28	; 61
     f5e:	8c 01       	movw	r16, r24

	//! Get the command
	String command = (this->_get_command(REBOOT));
     f60:	66 e1       	ldi	r22, 0x16	; 22
     f62:	0e 94 76 07 	call	0xeec	; 0xeec <_ZN13CC2540_Driver12_get_commandEh>
     f66:	bc 01       	movw	r22, r24
     f68:	7e 01       	movw	r14, r28
     f6a:	08 94       	sec
     f6c:	e1 1c       	adc	r14, r1
     f6e:	f1 1c       	adc	r15, r1
     f70:	c7 01       	movw	r24, r14
     f72:	0e 94 86 10 	call	0x210c	; 0x210c <_ZN6StringC1EPKc>

	//! We setup a dispatch
	this->_dispacher->setup_dispatch((uint8_t*)command.c_str(), command.length());
     f76:	f8 01       	movw	r30, r16
     f78:	a4 81       	ldd	r26, Z+4	; 0x04
     f7a:	b5 81       	ldd	r27, Z+5	; 0x05
     f7c:	ed 91       	ld	r30, X+
     f7e:	fc 91       	ld	r31, X
     f80:	11 97       	sbiw	r26, 0x01	; 1
     f82:	69 81       	ldd	r22, Y+1	; 0x01
     f84:	7a 81       	ldd	r23, Y+2	; 0x02
     f86:	01 90       	ld	r0, Z+
     f88:	f0 81       	ld	r31, Z
     f8a:	e0 2d       	mov	r30, r0
     f8c:	cd 01       	movw	r24, r26
     f8e:	4d 81       	ldd	r20, Y+5	; 0x05
     f90:	09 95       	icall
	this->_dispacher->run_dispatch();
     f92:	f8 01       	movw	r30, r16
     f94:	a4 81       	ldd	r26, Z+4	; 0x04
     f96:	b5 81       	ldd	r27, Z+5	; 0x05
     f98:	ed 91       	ld	r30, X+
     f9a:	fc 91       	ld	r31, X
     f9c:	11 97       	sbiw	r26, 0x01	; 1
     f9e:	02 80       	ldd	r0, Z+2	; 0x02
     fa0:	f3 81       	ldd	r31, Z+3	; 0x03
     fa2:	e0 2d       	mov	r30, r0
     fa4:	cd 01       	movw	r24, r26
     fa6:	09 95       	icall
	return this->_check_ok_response();
     fa8:	c8 01       	movw	r24, r16
     faa:	0e 94 56 07 	call	0xeac	; 0xeac <_ZN13CC2540_Driver18_check_ok_responseEv>
     fae:	18 2f       	mov	r17, r24
     fb0:	c7 01       	movw	r24, r14
     fb2:	0e 94 a0 10 	call	0x2140	; 0x2140 <_ZN6StringD1Ev>
}
     fb6:	81 2f       	mov	r24, r17
     fb8:	27 96       	adiw	r28, 0x07	; 7
     fba:	0f b6       	in	r0, 0x3f	; 63
     fbc:	f8 94       	cli
     fbe:	de bf       	out	0x3e, r29	; 62
     fc0:	0f be       	out	0x3f, r0	; 63
     fc2:	cd bf       	out	0x3d, r28	; 61
     fc4:	cf 91       	pop	r28
     fc6:	df 91       	pop	r29
     fc8:	1f 91       	pop	r17
     fca:	0f 91       	pop	r16
     fcc:	ff 90       	pop	r15
     fce:	ef 90       	pop	r14
     fd0:	08 95       	ret

00000fd2 <_ZN13CC2540_Driver12_set_settingEh>:
 * Sets the setting of the BLE chip
 *
 * @param mode								- The eeprom pointer of the setting
 * @return success							- If the dispatch was successful
 */
bool CC2540_Driver::_set_setting(uint8_t mode){
     fd2:	df 92       	push	r13
     fd4:	ef 92       	push	r14
     fd6:	ff 92       	push	r15
     fd8:	0f 93       	push	r16
     fda:	1f 93       	push	r17
     fdc:	df 93       	push	r29
     fde:	cf 93       	push	r28
     fe0:	cd b7       	in	r28, 0x3d	; 61
     fe2:	de b7       	in	r29, 0x3e	; 62
     fe4:	27 97       	sbiw	r28, 0x07	; 7
     fe6:	0f b6       	in	r0, 0x3f	; 63
     fe8:	f8 94       	cli
     fea:	de bf       	out	0x3e, r29	; 62
     fec:	0f be       	out	0x3f, r0	; 63
     fee:	cd bf       	out	0x3d, r28	; 61
     ff0:	8c 01       	movw	r16, r24
     ff2:	d6 2e       	mov	r13, r22

	//! Get the command
	String command = (this->_get_command(SETTING_CHANGE));
     ff4:	67 e1       	ldi	r22, 0x17	; 23
     ff6:	0e 94 76 07 	call	0xeec	; 0xeec <_ZN13CC2540_Driver12_get_commandEh>
     ffa:	bc 01       	movw	r22, r24
     ffc:	7e 01       	movw	r14, r28
     ffe:	08 94       	sec
    1000:	e1 1c       	adc	r14, r1
    1002:	f1 1c       	adc	r15, r1
    1004:	c7 01       	movw	r24, r14
    1006:	0e 94 86 10 	call	0x210c	; 0x210c <_ZN6StringC1EPKc>
	command.concat(this->_get_command(mode));
    100a:	c8 01       	movw	r24, r16
    100c:	6d 2d       	mov	r22, r13
    100e:	0e 94 76 07 	call	0xeec	; 0xeec <_ZN13CC2540_Driver12_get_commandEh>
    1012:	bc 01       	movw	r22, r24
    1014:	c7 01       	movw	r24, r14
    1016:	0e 94 43 10 	call	0x2086	; 0x2086 <_ZN6String6concatEPKc>

	//! We setup a dispatch
	this->_dispacher->setup_dispatch((uint8_t*)command.c_str(), command.length());
    101a:	f8 01       	movw	r30, r16
    101c:	a4 81       	ldd	r26, Z+4	; 0x04
    101e:	b5 81       	ldd	r27, Z+5	; 0x05
    1020:	ed 91       	ld	r30, X+
    1022:	fc 91       	ld	r31, X
    1024:	11 97       	sbiw	r26, 0x01	; 1
    1026:	69 81       	ldd	r22, Y+1	; 0x01
    1028:	7a 81       	ldd	r23, Y+2	; 0x02
    102a:	01 90       	ld	r0, Z+
    102c:	f0 81       	ld	r31, Z
    102e:	e0 2d       	mov	r30, r0
    1030:	cd 01       	movw	r24, r26
    1032:	4d 81       	ldd	r20, Y+5	; 0x05
    1034:	09 95       	icall
	this->_dispacher->run_dispatch();
    1036:	f8 01       	movw	r30, r16
    1038:	a4 81       	ldd	r26, Z+4	; 0x04
    103a:	b5 81       	ldd	r27, Z+5	; 0x05
    103c:	ed 91       	ld	r30, X+
    103e:	fc 91       	ld	r31, X
    1040:	11 97       	sbiw	r26, 0x01	; 1
    1042:	02 80       	ldd	r0, Z+2	; 0x02
    1044:	f3 81       	ldd	r31, Z+3	; 0x03
    1046:	e0 2d       	mov	r30, r0
    1048:	cd 01       	movw	r24, r26
    104a:	09 95       	icall
	return this->_check_ok_response();
    104c:	c8 01       	movw	r24, r16
    104e:	0e 94 56 07 	call	0xeac	; 0xeac <_ZN13CC2540_Driver18_check_ok_responseEv>
    1052:	18 2f       	mov	r17, r24
    1054:	c7 01       	movw	r24, r14
    1056:	0e 94 a0 10 	call	0x2140	; 0x2140 <_ZN6StringD1Ev>
}
    105a:	81 2f       	mov	r24, r17
    105c:	27 96       	adiw	r28, 0x07	; 7
    105e:	0f b6       	in	r0, 0x3f	; 63
    1060:	f8 94       	cli
    1062:	de bf       	out	0x3e, r29	; 62
    1064:	0f be       	out	0x3f, r0	; 63
    1066:	cd bf       	out	0x3d, r28	; 61
    1068:	cf 91       	pop	r28
    106a:	df 91       	pop	r29
    106c:	1f 91       	pop	r17
    106e:	0f 91       	pop	r16
    1070:	ff 90       	pop	r15
    1072:	ef 90       	pop	r14
    1074:	df 90       	pop	r13
    1076:	08 95       	ret

00001078 <_ZN13CC2540_Driver16_set_device_nameEPc>:
 * Sets the device name
 *
 * @param name								- The name string
 * @return success							- If the dispatch was successful
 */
bool CC2540_Driver::_set_device_name(char* name){
    1078:	af 92       	push	r10
    107a:	bf 92       	push	r11
    107c:	cf 92       	push	r12
    107e:	df 92       	push	r13
    1080:	ef 92       	push	r14
    1082:	ff 92       	push	r15
    1084:	0f 93       	push	r16
    1086:	1f 93       	push	r17
    1088:	df 93       	push	r29
    108a:	cf 93       	push	r28
    108c:	cd b7       	in	r28, 0x3d	; 61
    108e:	de b7       	in	r29, 0x3e	; 62
    1090:	61 97       	sbiw	r28, 0x11	; 17
    1092:	0f b6       	in	r0, 0x3f	; 63
    1094:	f8 94       	cli
    1096:	de bf       	out	0x3e, r29	; 62
    1098:	0f be       	out	0x3f, r0	; 63
    109a:	cd bf       	out	0x3d, r28	; 61
    109c:	7c 01       	movw	r14, r24
    109e:	5b 01       	movw	r10, r22

	char temp[10];

	//! Get the command
	String command = (this->_get_command(SET_DEVICE_NAME));
    10a0:	65 e1       	ldi	r22, 0x15	; 21
    10a2:	0e 94 76 07 	call	0xeec	; 0xeec <_ZN13CC2540_Driver12_get_commandEh>
    10a6:	bc 01       	movw	r22, r24
    10a8:	6e 01       	movw	r12, r28
    10aa:	08 94       	sec
    10ac:	c1 1c       	adc	r12, r1
    10ae:	d1 1c       	adc	r13, r1
    10b0:	c6 01       	movw	r24, r12
    10b2:	0e 94 86 10 	call	0x210c	; 0x210c <_ZN6StringC1EPKc>

	//! We format the arg
	sprintf(temp, this->_get_command(STRING_INPUT), name);
    10b6:	c7 01       	movw	r24, r14
    10b8:	62 e0       	ldi	r22, 0x02	; 2
    10ba:	0e 94 76 07 	call	0xeec	; 0xeec <_ZN13CC2540_Driver12_get_commandEh>
    10be:	00 d0       	rcall	.+0      	; 0x10c0 <_ZN13CC2540_Driver16_set_device_nameEPc+0x48>
    10c0:	00 d0       	rcall	.+0      	; 0x10c2 <_ZN13CC2540_Driver16_set_device_nameEPc+0x4a>
    10c2:	00 d0       	rcall	.+0      	; 0x10c4 <_ZN13CC2540_Driver16_set_device_nameEPc+0x4c>
    10c4:	ed b7       	in	r30, 0x3d	; 61
    10c6:	fe b7       	in	r31, 0x3e	; 62
    10c8:	31 96       	adiw	r30, 0x01	; 1
    10ca:	8e 01       	movw	r16, r28
    10cc:	08 5f       	subi	r16, 0xF8	; 248
    10ce:	1f 4f       	sbci	r17, 0xFF	; 255
    10d0:	ad b7       	in	r26, 0x3d	; 61
    10d2:	be b7       	in	r27, 0x3e	; 62
    10d4:	12 96       	adiw	r26, 0x02	; 2
    10d6:	1c 93       	st	X, r17
    10d8:	0e 93       	st	-X, r16
    10da:	11 97       	sbiw	r26, 0x01	; 1
    10dc:	93 83       	std	Z+3, r25	; 0x03
    10de:	82 83       	std	Z+2, r24	; 0x02
    10e0:	b5 82       	std	Z+5, r11	; 0x05
    10e2:	a4 82       	std	Z+4, r10	; 0x04
    10e4:	0e 94 92 01 	call	0x324	; 0x324 <sprintf>
	command.concat(temp);
    10e8:	ed b7       	in	r30, 0x3d	; 61
    10ea:	fe b7       	in	r31, 0x3e	; 62
    10ec:	36 96       	adiw	r30, 0x06	; 6
    10ee:	0f b6       	in	r0, 0x3f	; 63
    10f0:	f8 94       	cli
    10f2:	fe bf       	out	0x3e, r31	; 62
    10f4:	0f be       	out	0x3f, r0	; 63
    10f6:	ed bf       	out	0x3d, r30	; 61
    10f8:	c6 01       	movw	r24, r12
    10fa:	b8 01       	movw	r22, r16
    10fc:	0e 94 43 10 	call	0x2086	; 0x2086 <_ZN6String6concatEPKc>

	//! We setup a dispatch
	this->_dispacher->setup_dispatch((uint8_t*)command.c_str(), command.length());
    1100:	f7 01       	movw	r30, r14
    1102:	a4 81       	ldd	r26, Z+4	; 0x04
    1104:	b5 81       	ldd	r27, Z+5	; 0x05
    1106:	ed 91       	ld	r30, X+
    1108:	fc 91       	ld	r31, X
    110a:	11 97       	sbiw	r26, 0x01	; 1
    110c:	69 81       	ldd	r22, Y+1	; 0x01
    110e:	7a 81       	ldd	r23, Y+2	; 0x02
    1110:	01 90       	ld	r0, Z+
    1112:	f0 81       	ld	r31, Z
    1114:	e0 2d       	mov	r30, r0
    1116:	cd 01       	movw	r24, r26
    1118:	4d 81       	ldd	r20, Y+5	; 0x05
    111a:	09 95       	icall
	this->_dispacher->run_dispatch();
    111c:	f7 01       	movw	r30, r14
    111e:	a4 81       	ldd	r26, Z+4	; 0x04
    1120:	b5 81       	ldd	r27, Z+5	; 0x05
    1122:	ed 91       	ld	r30, X+
    1124:	fc 91       	ld	r31, X
    1126:	11 97       	sbiw	r26, 0x01	; 1
    1128:	02 80       	ldd	r0, Z+2	; 0x02
    112a:	f3 81       	ldd	r31, Z+3	; 0x03
    112c:	e0 2d       	mov	r30, r0
    112e:	cd 01       	movw	r24, r26
    1130:	09 95       	icall
	return this->_check_ok_response();
    1132:	c7 01       	movw	r24, r14
    1134:	0e 94 56 07 	call	0xeac	; 0xeac <_ZN13CC2540_Driver18_check_ok_responseEv>
    1138:	18 2f       	mov	r17, r24
    113a:	c6 01       	movw	r24, r12
    113c:	0e 94 a0 10 	call	0x2140	; 0x2140 <_ZN6StringD1Ev>
}
    1140:	81 2f       	mov	r24, r17
    1142:	61 96       	adiw	r28, 0x11	; 17
    1144:	0f b6       	in	r0, 0x3f	; 63
    1146:	f8 94       	cli
    1148:	de bf       	out	0x3e, r29	; 62
    114a:	0f be       	out	0x3f, r0	; 63
    114c:	cd bf       	out	0x3d, r28	; 61
    114e:	cf 91       	pop	r28
    1150:	df 91       	pop	r29
    1152:	1f 91       	pop	r17
    1154:	0f 91       	pop	r16
    1156:	ff 90       	pop	r15
    1158:	ef 90       	pop	r14
    115a:	df 90       	pop	r13
    115c:	cf 90       	pop	r12
    115e:	bf 90       	pop	r11
    1160:	af 90       	pop	r10
    1162:	08 95       	ret

00001164 <_ZN13CC2540_Driver15_send_at_commadEv>:
 * Sends the AT Interrupt Command to enter the AT Command Mode
 * 		- Command = +++
 *
 * @return success							- If the dispatch was successful
 */
bool CC2540_Driver::_send_at_commad(){
    1164:	ef 92       	push	r14
    1166:	ff 92       	push	r15
    1168:	0f 93       	push	r16
    116a:	1f 93       	push	r17
    116c:	df 93       	push	r29
    116e:	cf 93       	push	r28
    1170:	cd b7       	in	r28, 0x3d	; 61
    1172:	de b7       	in	r29, 0x3e	; 62
    1174:	27 97       	sbiw	r28, 0x07	; 7
    1176:	0f b6       	in	r0, 0x3f	; 63
    1178:	f8 94       	cli
    117a:	de bf       	out	0x3e, r29	; 62
    117c:	0f be       	out	0x3f, r0	; 63
    117e:	cd bf       	out	0x3d, r28	; 61
    1180:	8c 01       	movw	r16, r24

	//! Get the command
	String command = (this->_get_command(AT_MODE));
    1182:	60 e0       	ldi	r22, 0x00	; 0
    1184:	0e 94 76 07 	call	0xeec	; 0xeec <_ZN13CC2540_Driver12_get_commandEh>
    1188:	bc 01       	movw	r22, r24
    118a:	7e 01       	movw	r14, r28
    118c:	08 94       	sec
    118e:	e1 1c       	adc	r14, r1
    1190:	f1 1c       	adc	r15, r1
    1192:	c7 01       	movw	r24, r14
    1194:	0e 94 86 10 	call	0x210c	; 0x210c <_ZN6StringC1EPKc>

	//! We setup a dispatch
	this->_dispacher->setup_dispatch((uint8_t*)command.c_str(), command.length());
    1198:	f8 01       	movw	r30, r16
    119a:	a4 81       	ldd	r26, Z+4	; 0x04
    119c:	b5 81       	ldd	r27, Z+5	; 0x05
    119e:	ed 91       	ld	r30, X+
    11a0:	fc 91       	ld	r31, X
    11a2:	11 97       	sbiw	r26, 0x01	; 1
    11a4:	69 81       	ldd	r22, Y+1	; 0x01
    11a6:	7a 81       	ldd	r23, Y+2	; 0x02
    11a8:	01 90       	ld	r0, Z+
    11aa:	f0 81       	ld	r31, Z
    11ac:	e0 2d       	mov	r30, r0
    11ae:	cd 01       	movw	r24, r26
    11b0:	4d 81       	ldd	r20, Y+5	; 0x05
    11b2:	09 95       	icall
	this->_dispacher->run_dispatch();
    11b4:	f8 01       	movw	r30, r16
    11b6:	a4 81       	ldd	r26, Z+4	; 0x04
    11b8:	b5 81       	ldd	r27, Z+5	; 0x05
    11ba:	ed 91       	ld	r30, X+
    11bc:	fc 91       	ld	r31, X
    11be:	11 97       	sbiw	r26, 0x01	; 1
    11c0:	02 80       	ldd	r0, Z+2	; 0x02
    11c2:	f3 81       	ldd	r31, Z+3	; 0x03
    11c4:	e0 2d       	mov	r30, r0
    11c6:	cd 01       	movw	r24, r26
    11c8:	09 95       	icall
	return this->_check_ok_response();
    11ca:	c8 01       	movw	r24, r16
    11cc:	0e 94 56 07 	call	0xeac	; 0xeac <_ZN13CC2540_Driver18_check_ok_responseEv>
    11d0:	18 2f       	mov	r17, r24
    11d2:	c7 01       	movw	r24, r14
    11d4:	0e 94 a0 10 	call	0x2140	; 0x2140 <_ZN6StringD1Ev>
}
    11d8:	81 2f       	mov	r24, r17
    11da:	27 96       	adiw	r28, 0x07	; 7
    11dc:	0f b6       	in	r0, 0x3f	; 63
    11de:	f8 94       	cli
    11e0:	de bf       	out	0x3e, r29	; 62
    11e2:	0f be       	out	0x3f, r0	; 63
    11e4:	cd bf       	out	0x3d, r28	; 61
    11e6:	cf 91       	pop	r28
    11e8:	df 91       	pop	r29
    11ea:	1f 91       	pop	r17
    11ec:	0f 91       	pop	r16
    11ee:	ff 90       	pop	r15
    11f0:	ef 90       	pop	r14
    11f2:	08 95       	ret

000011f4 <_ZN13CC2540_Driver14_default_setupEPS_>:
/**
 * This is the default setup method.
 *
 * @return success							- If the dispatch was successful
 */
void CC2540_Driver::_default_setup(CC2540_Driver* driver){
    11f4:	cf 93       	push	r28
    11f6:	df 93       	push	r29
    11f8:	ec 01       	movw	r28, r24
	
	//! We send the at command break
	driver->_send_at_commad();
    11fa:	0e 94 b2 08 	call	0x1164	; 0x1164 <_ZN13CC2540_Driver15_send_at_commadEv>

	//! We set the name of the device
	if(driver->_set_device_name(driver->_name)){
    11fe:	6a 81       	ldd	r22, Y+2	; 0x02
    1200:	7b 81       	ldd	r23, Y+3	; 0x03
    1202:	ce 01       	movw	r24, r28
    1204:	0e 94 3c 08 	call	0x1078	; 0x1078 <_ZN13CC2540_Driver16_set_device_nameEPc>
    1208:	88 23       	and	r24, r24
    120a:	49 f0       	breq	.+18     	; 0x121e <_ZN13CC2540_Driver14_default_setupEPS_+0x2a>

		//! We set the default setting
		if(driver->_set_setting(SETTING_DEFAULT)){
    120c:	ce 01       	movw	r24, r28
    120e:	68 e1       	ldi	r22, 0x18	; 24
    1210:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <_ZN13CC2540_Driver12_set_settingEh>
    1214:	88 23       	and	r24, r24
    1216:	19 f0       	breq	.+6      	; 0x121e <_ZN13CC2540_Driver14_default_setupEPS_+0x2a>

			//! We reboot the device
			driver->_reboot();
    1218:	ce 01       	movw	r24, r28
    121a:	0e 94 a1 07 	call	0xf42	; 0xf42 <_ZN13CC2540_Driver7_rebootEv>
		}
	}
}
    121e:	df 91       	pop	r29
    1220:	cf 91       	pop	r28
    1222:	08 95       	ret

00001224 <_ZN25ConnectionProtocolHandlerC1EP10RingBuff_tP14HardwareSerialP9utilities>:
 *
 * @param buffer						- The ring buffer pointer
 * @param serial						- The Hardware serial to read and write
 * @param utils							- The global utilities
 */
ConnectionProtocolHandler::ConnectionProtocolHandler(RingBuff_t* buffer, HardwareSerial* serial, utilities* utils){
    1224:	fc 01       	movw	r30, r24

	//! Set internals
	this->_serial = serial;
    1226:	55 83       	std	Z+5, r21	; 0x05
    1228:	44 83       	std	Z+4, r20	; 0x04
	this->_buffer = buffer;
    122a:	71 83       	std	Z+1, r23	; 0x01
    122c:	60 83       	st	Z, r22
	this->_utils = utils;
    122e:	33 a3       	std	Z+35, r19	; 0x23
    1230:	22 a3       	std	Z+34, r18	; 0x22
}
    1232:	08 95       	ret

00001234 <_ZN25ConnectionProtocolHandler18set_callback_tableEP10callback_t>:
 *
 * @param table							- The callback table
 */
void ConnectionProtocolHandler::set_callback_table(callback_t* table){
	
	this->_table = table;
    1234:	fc 01       	movw	r30, r24
    1236:	73 83       	std	Z+3, r23	; 0x03
    1238:	62 83       	std	Z+2, r22	; 0x02
}
    123a:	08 95       	ret

0000123c <_ZN25ConnectionProtocolHandler4pollEv>:

/**
 * This method polls to see if there are some commands received.
 */
void ConnectionProtocolHandler::poll(){
    123c:	ff 92       	push	r15
    123e:	0f 93       	push	r16
    1240:	1f 93       	push	r17
    1242:	cf 93       	push	r28
    1244:	df 93       	push	r29
    1246:	ec 01       	movw	r28, r24

	//! We check if we got a command
	if(this->_serial->available()){
    1248:	ec 81       	ldd	r30, Y+4	; 0x04
    124a:	fd 81       	ldd	r31, Y+5	; 0x05
    124c:	a0 81       	ld	r26, Z
    124e:	b1 81       	ldd	r27, Z+1	; 0x01
    1250:	14 96       	adiw	r26, 0x04	; 4
    1252:	2d 91       	ld	r18, X+
    1254:	3c 91       	ld	r19, X
    1256:	15 97       	sbiw	r26, 0x05	; 5
    1258:	cf 01       	movw	r24, r30
    125a:	f9 01       	movw	r30, r18
    125c:	09 95       	icall
    125e:	89 2b       	or	r24, r25
    1260:	21 f1       	breq	.+72     	; 0x12aa <_ZN25ConnectionProtocolHandler4pollEv+0x6e>

		//! We read the command
		uint8_t command = this->_serial->read();
    1262:	ec 81       	ldd	r30, Y+4	; 0x04
    1264:	fd 81       	ldd	r31, Y+5	; 0x05
    1266:	a0 81       	ld	r26, Z
    1268:	b1 81       	ldd	r27, Z+1	; 0x01
    126a:	16 96       	adiw	r26, 0x06	; 6
    126c:	2d 91       	ld	r18, X+
    126e:	3c 91       	ld	r19, X
    1270:	17 97       	sbiw	r26, 0x07	; 7
    1272:	cf 01       	movw	r24, r30
    1274:	f9 01       	movw	r30, r18
    1276:	09 95       	icall
    1278:	08 2f       	mov	r16, r24
    127a:	10 e0       	ldi	r17, 0x00	; 0

		for(register uint8_t i = 0; COMMAND_NULL != this->_table[i].command_id; i++){
    127c:	85 e0       	ldi	r24, 0x05	; 5
    127e:	f8 2e       	mov	r15, r24
    1280:	0a c0       	rjmp	.+20     	; 0x1296 <_ZN25ConnectionProtocolHandler4pollEv+0x5a>

			//! If we find the command within the table
			if(this->_table[i].command_id == command){
    1282:	80 17       	cp	r24, r16
    1284:	39 f4       	brne	.+14     	; 0x1294 <_ZN25ConnectionProtocolHandler4pollEv+0x58>

				//! We fire the particular function
				this->_table[i].callback(command, this->_table[i].object);
    1286:	63 81       	ldd	r22, Z+3	; 0x03
    1288:	74 81       	ldd	r23, Z+4	; 0x04
    128a:	01 80       	ldd	r0, Z+1	; 0x01
    128c:	f2 81       	ldd	r31, Z+2	; 0x02
    128e:	e0 2d       	mov	r30, r0
    1290:	80 2f       	mov	r24, r16
    1292:	09 95       	icall
	if(this->_serial->available()){

		//! We read the command
		uint8_t command = this->_serial->read();

		for(register uint8_t i = 0; COMMAND_NULL != this->_table[i].command_id; i++){
    1294:	1f 5f       	subi	r17, 0xFF	; 255
    1296:	1f 9d       	mul	r17, r15
    1298:	c0 01       	movw	r24, r0
    129a:	11 24       	eor	r1, r1
    129c:	ea 81       	ldd	r30, Y+2	; 0x02
    129e:	fb 81       	ldd	r31, Y+3	; 0x03
    12a0:	e8 0f       	add	r30, r24
    12a2:	f9 1f       	adc	r31, r25
    12a4:	80 81       	ld	r24, Z
    12a6:	8f 3f       	cpi	r24, 0xFF	; 255
    12a8:	61 f7       	brne	.-40     	; 0x1282 <_ZN25ConnectionProtocolHandler4pollEv+0x46>
				//! We fire the particular function
				this->_table[i].callback(command, this->_table[i].object);
			}
		}
	}
}
    12aa:	df 91       	pop	r29
    12ac:	cf 91       	pop	r28
    12ae:	1f 91       	pop	r17
    12b0:	0f 91       	pop	r16
    12b2:	ff 90       	pop	r15
    12b4:	08 95       	ret

000012b6 <_ZN25ConnectionProtocolHandler7requestEhPv>:
/**
 * This method is used when the request connection type is used.
 *
 * @param command						- The issued command
 */
void ConnectionProtocolHandler::request(uint8_t command, void* object){
    12b6:	cf 93       	push	r28
    12b8:	df 93       	push	r29

	//! Cast the object
	ConnectionProtocolHandler* access = (ConnectionProtocolHandler*) object;
    12ba:	eb 01       	movw	r28, r22
    12bc:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    12be:	f8 94       	cli
    12c0:	e8 81       	ld	r30, Y
    12c2:	f9 81       	ldd	r31, Y+1	; 0x01
    12c4:	e6 57       	subi	r30, 0x76	; 118
    12c6:	fe 4f       	sbci	r31, 0xFE	; 254
    12c8:	80 81       	ld	r24, Z
    12ca:	91 81       	ldd	r25, Z+1	; 0x01
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    12cc:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    12ce:	6a 5f       	subi	r22, 0xFA	; 250
    12d0:	7f 4f       	sbci	r23, 0xFF	; 255

	//! Container
	buffer_t* buff;

	if(!RingBuffer_IsEmpty(access->_buffer)){
    12d2:	89 2b       	or	r24, r25
    12d4:	29 f0       	breq	.+10     	; 0x12e0 <_ZN25ConnectionProtocolHandler7requestEhPv+0x2a>

		//! We process the data to be sent
		buff = Data_Processor::process_data(access->_buffer, &access->_buff);
    12d6:	88 81       	ld	r24, Y
    12d8:	99 81       	ldd	r25, Y+1	; 0x01
    12da:	0e 94 9e 09 	call	0x133c	; 0x133c <_ZN14Data_Processor12process_dataEP10RingBuff_tP8buffer_t>
    12de:	bc 01       	movw	r22, r24
		//! We get the last values processed
		buff = Data_Processor::get_last_values(&access->_buff);
	}

	//! We send them
	access->_serial->write(buff->data, buff->length);
    12e0:	ec 81       	ldd	r30, Y+4	; 0x04
    12e2:	fd 81       	ldd	r31, Y+5	; 0x05
    12e4:	a0 81       	ld	r26, Z
    12e6:	b1 81       	ldd	r27, Z+1	; 0x01
    12e8:	eb 01       	movw	r28, r22
    12ea:	49 91       	ld	r20, Y+
    12ec:	be 01       	movw	r22, r28
    12ee:	12 96       	adiw	r26, 0x02	; 2
    12f0:	2d 91       	ld	r18, X+
    12f2:	3c 91       	ld	r19, X
    12f4:	13 97       	sbiw	r26, 0x03	; 3
    12f6:	cf 01       	movw	r24, r30
    12f8:	50 e0       	ldi	r21, 0x00	; 0
    12fa:	f9 01       	movw	r30, r18
    12fc:	09 95       	icall
}
    12fe:	df 91       	pop	r29
    1300:	cf 91       	pop	r28
    1302:	08 95       	ret

00001304 <_ZN25ConnectionProtocolHandler7genericEhPv>:
 * @param command						- The issued command
 */
void ConnectionProtocolHandler::generic(uint8_t command, void* object){

	//! Cast the object
	ConnectionProtocolHandler* access = (ConnectionProtocolHandler*) object;
    1304:	fb 01       	movw	r30, r22
	
	//! We switch on the command
	switch(command){
    1306:	83 30       	cpi	r24, 0x03	; 3
    1308:	79 f0       	breq	.+30     	; 0x1328 <_ZN25ConnectionProtocolHandler7genericEhPv+0x24>
    130a:	84 30       	cpi	r24, 0x04	; 4
    130c:	18 f4       	brcc	.+6      	; 0x1314 <_ZN25ConnectionProtocolHandler7genericEhPv+0x10>
    130e:	81 30       	cpi	r24, 0x01	; 1
    1310:	a0 f0       	brcs	.+40     	; 0x133a <_ZN25ConnectionProtocolHandler7genericEhPv+0x36>
    1312:	05 c0       	rjmp	.+10     	; 0x131e <_ZN25ConnectionProtocolHandler7genericEhPv+0x1a>
    1314:	86 30       	cpi	r24, 0x06	; 6
    1316:	68 f0       	brcs	.+26     	; 0x1332 <_ZN25ConnectionProtocolHandler7genericEhPv+0x2e>
    1318:	86 30       	cpi	r24, 0x06	; 6
    131a:	79 f4       	brne	.+30     	; 0x133a <_ZN25ConnectionProtocolHandler7genericEhPv+0x36>
    131c:	05 c0       	rjmp	.+10     	; 0x1328 <_ZN25ConnectionProtocolHandler7genericEhPv+0x24>

		//! We reset the device
		case REBOOT:
		case RESET:
			access->_utils->reboot();
    131e:	82 a1       	ldd	r24, Z+34	; 0x22
    1320:	93 a1       	ldd	r25, Z+35	; 0x23
    1322:	0e 94 9c 0b 	call	0x1738	; 0x1738 <_ZN9utilities6rebootEv>
    1326:	08 95       	ret
			break;

		//! We stop the device
		case STOP:
		case SUSPEND:
			access->_utils->stop_device();
    1328:	82 a1       	ldd	r24, Z+34	; 0x22
    132a:	93 a1       	ldd	r25, Z+35	; 0x23
    132c:	0e 94 99 0b 	call	0x1732	; 0x1732 <_ZN9utilities11stop_deviceEv>
    1330:	08 95       	ret
			break;

		//! We start the device
		case RESUME:
		case START:
			access->_utils->start_device();
    1332:	82 a1       	ldd	r24, Z+34	; 0x22
    1334:	93 a1       	ldd	r25, Z+35	; 0x23
    1336:	0e 94 95 0b 	call	0x172a	; 0x172a <_ZN9utilities12start_deviceEv>
    133a:	08 95       	ret

0000133c <_ZN14Data_Processor12process_dataEP10RingBuff_tP8buffer_t>:
 * passed to this method and returns an axis buffer type structure.
 *
 * @param buf								- the buffer type structure
 * @return buffer_t							- the axis type structure returned
 */
buffer_t* Data_Processor::process_data(RingBuff_t* buf, buffer_t* _buff){
    133c:	bf 92       	push	r11
    133e:	cf 92       	push	r12
    1340:	df 92       	push	r13
    1342:	ef 92       	push	r14
    1344:	ff 92       	push	r15
    1346:	0f 93       	push	r16
    1348:	1f 93       	push	r17
    134a:	cf 93       	push	r28
    134c:	df 93       	push	r29
    134e:	ac 01       	movw	r20, r24

	//! First we memset the buffer to reset it
	memset(_buff->data, 0x00, sizeof(_buff->data));
    1350:	cb 01       	movw	r24, r22
    1352:	01 96       	adiw	r24, 0x01	; 1
    1354:	fc 01       	movw	r30, r24
    1356:	8a e1       	ldi	r24, 0x1A	; 26
    1358:	df 01       	movw	r26, r30
    135a:	1d 92       	st	X+, r1
    135c:	8a 95       	dec	r24
    135e:	e9 f7       	brne	.-6      	; 0x135a <_ZN14Data_Processor12process_dataEP10RingBuff_tP8buffer_t+0x1e>
    1360:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1362:	f8 94       	cli
    1364:	fa 01       	movw	r30, r20
    1366:	e6 57       	subi	r30, 0x76	; 118
    1368:	fe 4f       	sbci	r31, 0xFE	; 254
    136a:	80 81       	ld	r24, Z
    136c:	91 81       	ldd	r25, Z+1	; 0x01
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    136e:	2f bf       	out	0x3f, r18	; 63

	//! We get the count
	RingBuff_Count_t buff_count = RingBuffer_GetCount(buf);

	//! Then we remove an object from the ring buffer.
	if(buff_count >= sizeof(_buff->data)){
    1370:	4a 97       	sbiw	r24, 0x1a	; 26
    1372:	08 f4       	brcc	.+2      	; 0x1376 <_ZN14Data_Processor12process_dataEP10RingBuff_tP8buffer_t+0x3a>
    1374:	42 c0       	rjmp	.+132    	; 0x13fa <_ZN14Data_Processor12process_dataEP10RingBuff_tP8buffer_t+0xbe>
    1376:	86 e8       	ldi	r24, 0x86	; 134
    1378:	e8 2e       	mov	r14, r24
    137a:	81 e0       	ldi	r24, 0x01	; 1
    137c:	f8 2e       	mov	r15, r24
    137e:	e4 0e       	add	r14, r20
    1380:	f5 1e       	adc	r15, r21
    1382:	c4 2e       	mov	r12, r20
    1384:	b5 2e       	mov	r11, r21
    1386:	eb 01       	movw	r28, r22
    1388:	30 e0       	ldi	r19, 0x00	; 0
    138a:	da 01       	movw	r26, r20
    138c:	a8 57       	subi	r26, 0x78	; 120
    138e:	be 4f       	sbci	r27, 0xFE	; 254
    1390:	8f 01       	movw	r16, r30
    1392:	ed 91       	ld	r30, X+
    1394:	fc 91       	ld	r31, X
    1396:	11 97       	sbiw	r26, 0x01	; 1
    1398:	d1 90       	ld	r13, Z+
    139a:	11 96       	adiw	r26, 0x01	; 1
    139c:	fc 93       	st	X, r31
    139e:	ee 93       	st	-X, r30
    13a0:	ee 15       	cp	r30, r14
    13a2:	ff 05       	cpc	r31, r15
    13a4:	21 f4       	brne	.+8      	; 0x13ae <_ZN14Data_Processor12process_dataEP10RingBuff_tP8buffer_t+0x72>
    13a6:	cc 92       	st	X, r12
    13a8:	11 96       	adiw	r26, 0x01	; 1
    13aa:	bc 92       	st	X, r11
    13ac:	11 97       	sbiw	r26, 0x01	; 1
    13ae:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    13b0:	f8 94       	cli
    13b2:	f8 01       	movw	r30, r16
    13b4:	80 81       	ld	r24, Z
    13b6:	91 81       	ldd	r25, Z+1	; 0x01
    13b8:	01 97       	sbiw	r24, 0x01	; 1
    13ba:	91 83       	std	Z+1, r25	; 0x01
    13bc:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    13be:	2f bf       	out	0x3f, r18	; 63
		for(register uint8_t i = 0; i < sizeof(_buff->data); i++){

			((uint8_t*)&_buff->data)[i] = RingBuffer_Remove(buf);
    13c0:	d9 82       	std	Y+1, r13	; 0x01
	//! We get the count
	RingBuff_Count_t buff_count = RingBuffer_GetCount(buf);

	//! Then we remove an object from the ring buffer.
	if(buff_count >= sizeof(_buff->data)){
		for(register uint8_t i = 0; i < sizeof(_buff->data); i++){
    13c2:	3f 5f       	subi	r19, 0xFF	; 255
    13c4:	21 96       	adiw	r28, 0x01	; 1
    13c6:	3a 31       	cpi	r19, 0x1A	; 26
    13c8:	21 f7       	brne	.-56     	; 0x1392 <_ZN14Data_Processor12process_dataEP10RingBuff_tP8buffer_t+0x56>
    13ca:	fa 01       	movw	r30, r20
    13cc:	e8 57       	subi	r30, 0x78	; 120
    13ce:	fe 4f       	sbci	r31, 0xFE	; 254
    13d0:	80 81       	ld	r24, Z
    13d2:	91 81       	ldd	r25, Z+1	; 0x01
    13d4:	01 96       	adiw	r24, 0x01	; 1
    13d6:	91 83       	std	Z+1, r25	; 0x01
    13d8:	80 83       	st	Z, r24
    13da:	8e 15       	cp	r24, r14
    13dc:	9f 05       	cpc	r25, r15
    13de:	11 f4       	brne	.+4      	; 0x13e4 <_ZN14Data_Processor12process_dataEP10RingBuff_tP8buffer_t+0xa8>
    13e0:	c0 82       	st	Z, r12
    13e2:	b1 82       	std	Z+1, r11	; 0x01
    13e4:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    13e6:	f8 94       	cli
    13e8:	fa 01       	movw	r30, r20
    13ea:	e6 57       	subi	r30, 0x76	; 118
    13ec:	fe 4f       	sbci	r31, 0xFE	; 254
    13ee:	80 81       	ld	r24, Z
    13f0:	91 81       	ldd	r25, Z+1	; 0x01
    13f2:	01 97       	sbiw	r24, 0x01	; 1
    13f4:	91 83       	std	Z+1, r25	; 0x01
    13f6:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    13f8:	2f bf       	out	0x3f, r18	; 63

		//! We remove the spacer
		RingBuffer_Remove(buf);
	}
	return _buff;
}
    13fa:	cb 01       	movw	r24, r22
    13fc:	df 91       	pop	r29
    13fe:	cf 91       	pop	r28
    1400:	1f 91       	pop	r17
    1402:	0f 91       	pop	r16
    1404:	ff 90       	pop	r15
    1406:	ef 90       	pop	r14
    1408:	df 90       	pop	r13
    140a:	cf 90       	pop	r12
    140c:	bf 90       	pop	r11
    140e:	08 95       	ret

00001410 <_ZN10Dispatcher16_create_dispatchEPhh>:
 * This method creates a dispatch item.
 *
 * @param command_ptr							- The command pointer
 * @param length								- The command length
 */
void Dispatcher::_create_dispatch(uint8_t* command_ptr, uint8_t length){
    1410:	fc 01       	movw	r30, r24

	//! We create a dispatch item
	this->_dispatch.command_pointer = command_ptr;
    1412:	76 83       	std	Z+6, r23	; 0x06
    1414:	65 83       	std	Z+5, r22	; 0x05
	this->_dispatch.command_length = length;
    1416:	44 83       	std	Z+4, r20	; 0x04
}
    1418:	08 95       	ret

0000141a <_ZN10Dispatcher14_send_dispatchEP10dispatch_t>:
/**
 * This method sends a dispatch item.
 *
 * @param dispatch								- The dispatch item
 */
void Dispatcher::_send_dispatch(dispatch_t* dispatch){
    141a:	cf 93       	push	r28
    141c:	df 93       	push	r29
    141e:	fc 01       	movw	r30, r24

	//! We write the dispatch
	this->_serial->write(this->_dispatch.command_pointer, this->_dispatch.command_length);
    1420:	a2 81       	ldd	r26, Z+2	; 0x02
    1422:	b3 81       	ldd	r27, Z+3	; 0x03
    1424:	8d 91       	ld	r24, X+
    1426:	9c 91       	ld	r25, X
    1428:	11 97       	sbiw	r26, 0x01	; 1
    142a:	65 81       	ldd	r22, Z+5	; 0x05
    142c:	76 81       	ldd	r23, Z+6	; 0x06
    142e:	44 81       	ldd	r20, Z+4	; 0x04
    1430:	ec 01       	movw	r28, r24
    1432:	ea 81       	ldd	r30, Y+2	; 0x02
    1434:	fb 81       	ldd	r31, Y+3	; 0x03
    1436:	cd 01       	movw	r24, r26
    1438:	50 e0       	ldi	r21, 0x00	; 0
    143a:	09 95       	icall
}
    143c:	df 91       	pop	r29
    143e:	cf 91       	pop	r28
    1440:	08 95       	ret

00001442 <_ZN10Dispatcher24_receive_dispatch_answerEh>:
/**
 * This method reads a response
 * @param timeout 								- The connection timeout (ms)
 * @return response_t							- The response from the device
 */
response_t* Dispatcher::_receive_dispatch_answer(uint8_t timeout){
    1442:	0f 93       	push	r16
    1444:	1f 93       	push	r17
    1446:	cf 93       	push	r28
    1448:	df 93       	push	r29
    144a:	ec 01       	movw	r28, r24
    144c:	06 2f       	mov	r16, r22
    144e:	10 e0       	ldi	r17, 0x00	; 0
    1450:	26 c0       	rjmp	.+76     	; 0x149e <_ZN10Dispatcher24_receive_dispatch_answerEh+0x5c>
	//! Index
	uint8_t index = 0;
	while(timeout --){
		//! We loop to get info in the buffers
		while(this->_serial->available()){
			this->_response.response[index] = this->_serial->read();
    1452:	aa 81       	ldd	r26, Y+2	; 0x02
    1454:	bb 81       	ldd	r27, Y+3	; 0x03
    1456:	ed 91       	ld	r30, X+
    1458:	fc 91       	ld	r31, X
    145a:	11 97       	sbiw	r26, 0x01	; 1
    145c:	06 80       	ldd	r0, Z+6	; 0x06
    145e:	f7 81       	ldd	r31, Z+7	; 0x07
    1460:	e0 2d       	mov	r30, r0
    1462:	cd 01       	movw	r24, r26
    1464:	09 95       	icall
    1466:	fe 01       	movw	r30, r28
    1468:	e1 0f       	add	r30, r17
    146a:	f1 1d       	adc	r31, r1
    146c:	87 83       	std	Z+7, r24	; 0x07
			this->_response.response_length ++;
    146e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1470:	8f 5f       	subi	r24, 0xFF	; 255
    1472:	8b 8f       	std	Y+27, r24	; 0x1b
			index ++;
    1474:	1f 5f       	subi	r17, 0xFF	; 255

	//! Index
	uint8_t index = 0;
	while(timeout --){
		//! We loop to get info in the buffers
		while(this->_serial->available()){
    1476:	ea 81       	ldd	r30, Y+2	; 0x02
    1478:	fb 81       	ldd	r31, Y+3	; 0x03
    147a:	a0 81       	ld	r26, Z
    147c:	b1 81       	ldd	r27, Z+1	; 0x01
    147e:	14 96       	adiw	r26, 0x04	; 4
    1480:	2d 91       	ld	r18, X+
    1482:	3c 91       	ld	r19, X
    1484:	15 97       	sbiw	r26, 0x05	; 5
    1486:	cf 01       	movw	r24, r30
    1488:	f9 01       	movw	r30, r18
    148a:	09 95       	icall
    148c:	89 2b       	or	r24, r25
    148e:	09 f7       	brne	.-62     	; 0x1452 <_ZN10Dispatcher24_receive_dispatch_answerEh+0x10>
			this->_response.response[index] = this->_serial->read();
			this->_response.response_length ++;
			index ++;
		}
		delay(100);
    1490:	64 e6       	ldi	r22, 0x64	; 100
    1492:	70 e0       	ldi	r23, 0x00	; 0
    1494:	80 e0       	ldi	r24, 0x00	; 0
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	0e 94 65 0c 	call	0x18ca	; 0x18ca <delay>
    149c:	01 50       	subi	r16, 0x01	; 1
 */
response_t* Dispatcher::_receive_dispatch_answer(uint8_t timeout){

	//! Index
	uint8_t index = 0;
	while(timeout --){
    149e:	00 23       	and	r16, r16
    14a0:	51 f7       	brne	.-44     	; 0x1476 <_ZN10Dispatcher24_receive_dispatch_answerEh+0x34>
    14a2:	9e 01       	movw	r18, r28
    14a4:	29 5f       	subi	r18, 0xF9	; 249
    14a6:	3f 4f       	sbci	r19, 0xFF	; 255
		}
		delay(100);
	}

	return &this->_response;
}
    14a8:	c9 01       	movw	r24, r18
    14aa:	df 91       	pop	r29
    14ac:	cf 91       	pop	r28
    14ae:	1f 91       	pop	r17
    14b0:	0f 91       	pop	r16
    14b2:	08 95       	ret

000014b4 <_ZN8GHID_SPI13transfer_bulkEhPhh>:
	digitalWrite(device, HIGH);

}

//! Transfer bulk data
void GHID_SPI::transfer_bulk(byte device, byte* data, byte length){
    14b4:	ff 92       	push	r15
    14b6:	0f 93       	push	r16
    14b8:	1f 93       	push	r17
    14ba:	cf 93       	push	r28
    14bc:	df 93       	push	r29
    14be:	08 2f       	mov	r16, r24
    14c0:	eb 01       	movw	r28, r22
    14c2:	f4 2e       	mov	r15, r20

	//! Start listening
	digitalWrite(device, LOW);
    14c4:	60 e0       	ldi	r22, 0x00	; 0
    14c6:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <digitalWrite>
    14ca:	10 e0       	ldi	r17, 0x00	; 0
    14cc:	0c c0       	rjmp	.+24     	; 0x14e6 <_ZN8GHID_SPI13transfer_bulkEhPhh+0x32>

	for(register byte i = 0; i < length; i ++){

		//! Send the data byte
		SPI.transfer((*data) + i);
    14ce:	88 81       	ld	r24, Y
    14d0:	81 0f       	add	r24, r17
    14d2:	8e bd       	out	0x2e, r24	; 46
    14d4:	0d b4       	in	r0, 0x2d	; 45
    14d6:	07 fe       	sbrs	r0, 7
    14d8:	fd cf       	rjmp	.-6      	; 0x14d4 <_ZN8GHID_SPI13transfer_bulkEhPhh+0x20>
    14da:	8e b5       	in	r24, 0x2e	; 46
		delayMicroseconds(ONE_MICRO_SEC);
    14dc:	81 e0       	ldi	r24, 0x01	; 1
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	0e 94 be 0c 	call	0x197c	; 0x197c <delayMicroseconds>
void GHID_SPI::transfer_bulk(byte device, byte* data, byte length){

	//! Start listening
	digitalWrite(device, LOW);

	for(register byte i = 0; i < length; i ++){
    14e4:	1f 5f       	subi	r17, 0xFF	; 255
    14e6:	1f 15       	cp	r17, r15
    14e8:	90 f3       	brcs	.-28     	; 0x14ce <_ZN8GHID_SPI13transfer_bulkEhPhh+0x1a>
		//! Send the data byte
		SPI.transfer((*data) + i);
		delayMicroseconds(ONE_MICRO_SEC);
	}
	//! Stop listening
	digitalWrite(device, HIGH);
    14ea:	80 2f       	mov	r24, r16
    14ec:	61 e0       	ldi	r22, 0x01	; 1
    14ee:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <digitalWrite>
}
    14f2:	df 91       	pop	r29
    14f4:	cf 91       	pop	r28
    14f6:	1f 91       	pop	r17
    14f8:	0f 91       	pop	r16
    14fa:	ff 90       	pop	r15
    14fc:	08 95       	ret

000014fe <_ZN8GHID_SPIC2EP14spi_settings_t>:
 */

#include "GHID_SPI.h"

//! Default constructor
GHID_SPI::GHID_SPI(spi_settings_t* settings) {
    14fe:	cf 92       	push	r12
    1500:	df 92       	push	r13
    1502:	ef 92       	push	r14
    1504:	ff 92       	push	r15
    1506:	1f 93       	push	r17
    1508:	cf 93       	push	r28
    150a:	df 93       	push	r29
    150c:	ec 01       	movw	r28, r24
    150e:	6b 01       	movw	r12, r22

	//! We copy the settings into our internal class.
	memcpy(&this->settings, settings, sizeof(this->settings));
    1510:	dc 01       	movw	r26, r24
    1512:	a0 50       	subi	r26, 0x00	; 0
    1514:	bf 4f       	sbci	r27, 0xFF	; 255
    1516:	fb 01       	movw	r30, r22
    1518:	89 e0       	ldi	r24, 0x09	; 9
    151a:	01 90       	ld	r0, Z+
    151c:	0d 92       	st	X+, r0
    151e:	81 50       	subi	r24, 0x01	; 1
    1520:	e1 f7       	brne	.-8      	; 0x151a <_ZN8GHID_SPIC2EP14spi_settings_t+0x1c>
    1522:	10 e0       	ldi	r17, 0x00	; 0

	//! We set the SS pins to outputs
	for(register byte i = 0; i != settings->num_devices; i ++){
		//! We set the ss pin as an output.
		pinMode(this->settings.devices[i], OUTPUT);
    1524:	97 e0       	ldi	r25, 0x07	; 7
    1526:	e9 2e       	mov	r14, r25
    1528:	91 e0       	ldi	r25, 0x01	; 1
    152a:	f9 2e       	mov	r15, r25
    152c:	ec 0e       	add	r14, r28
    152e:	fd 1e       	adc	r15, r29
    1530:	0a c0       	rjmp	.+20     	; 0x1546 <_ZN8GHID_SPIC2EP14spi_settings_t+0x48>
    1532:	d7 01       	movw	r26, r14
    1534:	ed 91       	ld	r30, X+
    1536:	fc 91       	ld	r31, X
    1538:	e1 0f       	add	r30, r17
    153a:	f1 1d       	adc	r31, r1
    153c:	80 81       	ld	r24, Z
    153e:	61 e0       	ldi	r22, 0x01	; 1
    1540:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <pinMode>

	//! We copy the settings into our internal class.
	memcpy(&this->settings, settings, sizeof(this->settings));

	//! We set the SS pins to outputs
	for(register byte i = 0; i != settings->num_devices; i ++){
    1544:	1f 5f       	subi	r17, 0xFF	; 255
    1546:	f6 01       	movw	r30, r12
    1548:	86 81       	ldd	r24, Z+6	; 0x06
    154a:	18 17       	cp	r17, r24
    154c:	91 f7       	brne	.-28     	; 0x1532 <_ZN8GHID_SPIC2EP14spi_settings_t+0x34>
		//! We set the ss pin as an output.
		pinMode(this->settings.devices[i], OUTPUT);
	}

	//! We start the SPI engine
	SPI.begin();
    154e:	0e 94 6f 0b 	call	0x16de	; 0x16de <_ZN8SPIClass5beginEv>

	//! We set the SPI bit order
	SPI.setBitOrder(this->settings.bit_order);
    1552:	cc 5f       	subi	r28, 0xFC	; 252
    1554:	de 4f       	sbci	r29, 0xFE	; 254
    1556:	89 91       	ld	r24, Y+
    1558:	0e 94 76 0b 	call	0x16ec	; 0x16ec <_ZN8SPIClass11setBitOrderEh>

	//! We set the clock divider
	SPI.setClockDivider(this->settings.clock_divider);
    155c:	88 81       	ld	r24, Y
    155e:	0e 94 84 0b 	call	0x1708	; 0x1708 <_ZN8SPIClass15setClockDividerEh>

	//! We set the data mode of the bus
	SPI.setDataMode(this->settings.data_mode);
    1562:	22 97       	sbiw	r28, 0x02	; 2
    1564:	88 81       	ld	r24, Y
    1566:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <_ZN8SPIClass11setDataModeEh>

	//! We setup the interrupt
	if(this->settings.attach_interrupt == 0x01){
    156a:	23 97       	sbiw	r28, 0x03	; 3
    156c:	88 81       	ld	r24, Y
    156e:	81 30       	cpi	r24, 0x01	; 1
    1570:	19 f4       	brne	.+6      	; 0x1578 <_ZN8GHID_SPIC2EP14spi_settings_t+0x7a>
    1572:	8c b5       	in	r24, 0x2c	; 44
    1574:	80 68       	ori	r24, 0x80	; 128
    1576:	8c bd       	out	0x2c, r24	; 44

	#ifdef SLAVE_MODE
	//! We reset the buffer position
	spi_buffer.length = 0;
	#endif
}
    1578:	df 91       	pop	r29
    157a:	cf 91       	pop	r28
    157c:	1f 91       	pop	r17
    157e:	ff 90       	pop	r15
    1580:	ef 90       	pop	r14
    1582:	df 90       	pop	r13
    1584:	cf 90       	pop	r12
    1586:	08 95       	ret

00001588 <_GLOBAL__I_fsm_mode_change>:

	uint8_t size = DATA_PACKET_SIZE;
	while(size --)
		//! Then we input the data into the ring buffer
		RingBuffer_Insert(ads1298_driver._buff, ads1298_driver._rx_buff.data.packet._data[size]);
}
    1588:	6f 92       	push	r6
    158a:	7f 92       	push	r7
    158c:	8f 92       	push	r8
    158e:	9f 92       	push	r9
    1590:	af 92       	push	r10
    1592:	bf 92       	push	r11
    1594:	cf 92       	push	r12
    1596:	df 92       	push	r13
    1598:	ef 92       	push	r14
    159a:	ff 92       	push	r15
    159c:	0f 93       	push	r16
    159e:	1f 93       	push	r17
						NUMBER_OF_SPI_DEVICES,	//! Only one device on
						devices				//! Address of the device
						};

//! A protocol handler
ConnectionProtocolHandler protocol_handler(&buffer, &Serial, &global_utilities);
    15a0:	4d ee       	ldi	r20, 0xED	; 237
    15a2:	64 2e       	mov	r6, r20
    15a4:	42 e0       	ldi	r20, 0x02	; 2
    15a6:	74 2e       	mov	r7, r20
    15a8:	31 e6       	ldi	r19, 0x61	; 97
    15aa:	c3 2e       	mov	r12, r19
    15ac:	31 e0       	ldi	r19, 0x01	; 1
    15ae:	d3 2e       	mov	r13, r19
    15b0:	26 e4       	ldi	r18, 0x46	; 70
    15b2:	e2 2e       	mov	r14, r18
    15b4:	25 e0       	ldi	r18, 0x05	; 5
    15b6:	f2 2e       	mov	r15, r18
    15b8:	90 e6       	ldi	r25, 0x60	; 96
    15ba:	89 2e       	mov	r8, r25
    15bc:	91 e0       	ldi	r25, 0x01	; 1
    15be:	99 2e       	mov	r9, r25
    15c0:	c3 01       	movw	r24, r6
    15c2:	b6 01       	movw	r22, r12
    15c4:	a7 01       	movw	r20, r14
    15c6:	94 01       	movw	r18, r8
    15c8:	0e 94 12 09 	call	0x1224	; 0x1224 <_ZN25ConnectionProtocolHandlerC1EP10RingBuff_tP14HardwareSerialP9utilities>
		//! We using the request based method
		GET,					ConnectionProtocolHandler::request,			(void*)&protocol_handler
};

//! The Bluetooth Command dispatcher
Bluetooth_Dispatcher dispatcher(&Serial);
    15cc:	81 e1       	ldi	r24, 0x11	; 17
    15ce:	a8 2e       	mov	r10, r24
    15d0:	83 e0       	ldi	r24, 0x03	; 3
    15d2:	b8 2e       	mov	r11, r24
    15d4:	c5 01       	movw	r24, r10
    15d6:	b7 01       	movw	r22, r14
    15d8:	0e 94 0e 06 	call	0xc1c	; 0xc1c <_ZN20Bluetooth_DispatcherC1EP14HardwareSerial>

//! The ADS1298 Driver object
//! 	- Here we use the default setup function.... We could change it
ADS1298_Driver ads1298_driver(&buffer, devices, &spi_settings);
    15dc:	81 e3       	ldi	r24, 0x31	; 49
    15de:	93 e0       	ldi	r25, 0x03	; 3
    15e0:	b6 01       	movw	r22, r12
    15e2:	4b e0       	ldi	r20, 0x0B	; 11
    15e4:	51 e0       	ldi	r21, 0x01	; 1
    15e6:	2c e0       	ldi	r18, 0x0C	; 12
    15e8:	31 e0       	ldi	r19, 0x01	; 1
    15ea:	07 e4       	ldi	r16, 0x47	; 71
    15ec:	15 e0       	ldi	r17, 0x05	; 5
    15ee:	0e 94 b3 05 	call	0xb66	; 0xb66 <_ZN14ADS1298_DriverC1EP10RingBuff_tPhP14spi_settings_tPFvPS_E>

//! The CC2540 Driver
//! 	- Here we use the default setup function.... We could change it
CC2540_Driver cc2540_driver((char*)"ADS1298", (char*)command_pointers, &dispatcher);
    15f2:	83 e6       	ldi	r24, 0x63	; 99
    15f4:	94 e0       	ldi	r25, 0x04	; 4
    15f6:	63 e0       	ldi	r22, 0x03	; 3
    15f8:	71 e0       	ldi	r23, 0x01	; 1
    15fa:	49 ee       	ldi	r20, 0xE9	; 233
    15fc:	51 e0       	ldi	r21, 0x01	; 1
    15fe:	95 01       	movw	r18, r10
    1600:	0a ef       	ldi	r16, 0xFA	; 250
    1602:	18 e0       	ldi	r17, 0x08	; 8
    1604:	0e 94 48 07 	call	0xe90	; 0xe90 <_ZN13CC2540_DriverC1EPcS0_P20Bluetooth_DispatcherPFvPS_E>

//! The connection
Bluetooth_Connection_Handler connection(&Serial, DATA_REQUEST_BASED, &buffer, 
										&protocol_handler, &global_utilities);
    1608:	89 e6       	ldi	r24, 0x69	; 105
    160a:	94 e0       	ldi	r25, 0x04	; 4
    160c:	b7 01       	movw	r22, r14
    160e:	41 e0       	ldi	r20, 0x01	; 1
    1610:	50 e0       	ldi	r21, 0x00	; 0
    1612:	96 01       	movw	r18, r12
    1614:	83 01       	movw	r16, r6
    1616:	74 01       	movw	r14, r8
    1618:	0e 94 03 07 	call	0xe06	; 0xe06 <_ZN28Bluetooth_Connection_HandlerC1EP14HardwareSerial17connection_type_tP10RingBuff_tP25ConnectionProtocolHandlerP9utilities>

	uint8_t size = DATA_PACKET_SIZE;
	while(size --)
		//! Then we input the data into the ring buffer
		RingBuffer_Insert(ads1298_driver._buff, ads1298_driver._rx_buff.data.packet._data[size]);
}
    161c:	1f 91       	pop	r17
    161e:	0f 91       	pop	r16
    1620:	ff 90       	pop	r15
    1622:	ef 90       	pop	r14
    1624:	df 90       	pop	r13
    1626:	cf 90       	pop	r12
    1628:	bf 90       	pop	r11
    162a:	af 90       	pop	r10
    162c:	9f 90       	pop	r9
    162e:	8f 90       	pop	r8
    1630:	7f 90       	pop	r7
    1632:	6f 90       	pop	r6
    1634:	08 95       	ret

00001636 <_Z11execute_isrv>:
	//! We create a buffer object to contain our data.
	//! Format of the packet:
	//! 	- 24 bit header + 24 bit * active channels [3 bytes + 3 * # bytes]

	//! We add the spacer at the end of the data array
	ads1298_driver._rx_buff.data.packet._data[sizeof(ads1298_driver._rx_buff.data.packet._data)] = SPACER;
    1636:	10 92 58 04 	sts	0x0458, r1

	//! We get the data and store it within the buffer
	GHID_SPI::transfer_bulk(ADS1298_DEVICE,
			ads1298_driver._rx_buff.data.packet_array,
			DATA_PACKET_SIZE);
    163a:	8d e0       	ldi	r24, 0x0D	; 13
    163c:	6c e3       	ldi	r22, 0x3C	; 60
    163e:	74 e0       	ldi	r23, 0x04	; 4
    1640:	4b e1       	ldi	r20, 0x1B	; 27
    1642:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <_ZN8GHID_SPI13transfer_bulkEhPhh>
    1646:	6b e1       	ldi	r22, 0x1B	; 27

	uint8_t size = DATA_PACKET_SIZE;
	while(size --)
    1648:	61 50       	subi	r22, 0x01	; 1
		//! Then we input the data into the ring buffer
		RingBuffer_Insert(ads1298_driver._buff, ads1298_driver._rx_buff.data.packet._data[size]);
    164a:	40 91 3a 04 	lds	r20, 0x043A
    164e:	50 91 3b 04 	lds	r21, 0x043B
    1652:	da 01       	movw	r26, r20
    1654:	aa 57       	subi	r26, 0x7A	; 122
    1656:	be 4f       	sbci	r27, 0xFE	; 254
    1658:	2d 91       	ld	r18, X+
    165a:	3c 91       	ld	r19, X
    165c:	11 97       	sbiw	r26, 0x01	; 1
    165e:	e6 2f       	mov	r30, r22
    1660:	f0 e0       	ldi	r31, 0x00	; 0
    1662:	e1 5c       	subi	r30, 0xC1	; 193
    1664:	fb 4f       	sbci	r31, 0xFB	; 251
    1666:	80 81       	ld	r24, Z
    1668:	f9 01       	movw	r30, r18
    166a:	80 83       	st	Z, r24
    166c:	ed 91       	ld	r30, X+
    166e:	fc 91       	ld	r31, X
    1670:	11 97       	sbiw	r26, 0x01	; 1
    1672:	cf 01       	movw	r24, r30
    1674:	01 96       	adiw	r24, 0x01	; 1
    1676:	11 96       	adiw	r26, 0x01	; 1
    1678:	9c 93       	st	X, r25
    167a:	8e 93       	st	-X, r24
    167c:	8a 17       	cp	r24, r26
    167e:	9b 07       	cpc	r25, r27
    1680:	11 f4       	brne	.+4      	; 0x1686 <_Z11execute_isrv+0x50>
    1682:	52 83       	std	Z+2, r21	; 0x02
    1684:	41 83       	std	Z+1, r20	; 0x01
    1686:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1688:	f8 94       	cli
    168a:	fa 01       	movw	r30, r20
    168c:	e6 57       	subi	r30, 0x76	; 118
    168e:	fe 4f       	sbci	r31, 0xFE	; 254
    1690:	80 81       	ld	r24, Z
    1692:	91 81       	ldd	r25, Z+1	; 0x01
    1694:	01 96       	adiw	r24, 0x01	; 1
    1696:	91 83       	std	Z+1, r25	; 0x01
    1698:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    169a:	2f bf       	out	0x3f, r18	; 63
	GHID_SPI::transfer_bulk(ADS1298_DEVICE,
			ads1298_driver._rx_buff.data.packet_array,
			DATA_PACKET_SIZE);

	uint8_t size = DATA_PACKET_SIZE;
	while(size --)
    169c:	66 23       	and	r22, r22
    169e:	a1 f6       	brne	.-88     	; 0x1648 <_Z11execute_isrv+0x12>
		//! Then we input the data into the ring buffer
		RingBuffer_Insert(ads1298_driver._buff, ads1298_driver._rx_buff.data.packet._data[size]);
}
    16a0:	08 95       	ret

000016a2 <loop>:
	//==========================================
	// INSERT WORKER CODE HERE
	//==========================================
	
	//1 We we are good to go
	if(global_utilities.start_engine){
    16a2:	80 91 60 01 	lds	r24, 0x0160
    16a6:	88 23       	and	r24, r24
    16a8:	21 f0       	breq	.+8      	; 0x16b2 <loop+0x10>
		connection.run(); //! We run the engine
    16aa:	89 e6       	ldi	r24, 0x69	; 105
    16ac:	94 e0       	ldi	r25, 0x04	; 4
    16ae:	0e 94 df 06 	call	0xdbe	; 0xdbe <_ZN28Bluetooth_Connection_Handler3runEv>
    16b2:	08 95       	ret

000016b4 <setup>:
	// INSERT SETUP CODE HERE
	//=========================================

	//! SETUP ADS1298
	//! We trigger the ISR on the LOW change of the ADS1298 DRDY pin
	attachInterrupt(PIN_DRDY, execute_isr, LOW);
    16b4:	82 e0       	ldi	r24, 0x02	; 2
    16b6:	6b e1       	ldi	r22, 0x1B	; 27
    16b8:	7b e0       	ldi	r23, 0x0B	; 11
    16ba:	40 e0       	ldi	r20, 0x00	; 0
    16bc:	50 e0       	ldi	r21, 0x00	; 0
    16be:	0e 94 a0 0b 	call	0x1740	; 0x1740 <attachInterrupt>

	//! SETUP BLUETOOTH
	//! Set the callback table within the connection protocol handler
	protocol_handler.set_callback_table(callback_table);
    16c2:	8d ee       	ldi	r24, 0xED	; 237
    16c4:	92 e0       	ldi	r25, 0x02	; 2
    16c6:	65 e1       	ldi	r22, 0x15	; 21
    16c8:	71 e0       	ldi	r23, 0x01	; 1
    16ca:	0e 94 1a 09 	call	0x1234	; 0x1234 <_ZN25ConnectionProtocolHandler18set_callback_tableEP10callback_t>
	
	//! We connect to the host device
	connection.connect();
    16ce:	89 e6       	ldi	r24, 0x69	; 105
    16d0:	94 e0       	ldi	r25, 0x04	; 4
    16d2:	0e 94 74 06 	call	0xce8	; 0xce8 <_ZN28Bluetooth_Connection_Handler7connectEv>
	
	//! We set the global lock to true
	global_utilities.start_engine = true;
    16d6:	81 e0       	ldi	r24, 0x01	; 1
    16d8:	80 93 60 01 	sts	0x0160, r24
}
    16dc:	08 95       	ret

000016de <_ZN8SPIClass5beginEv>:
//  pinMode(SS, OUTPUT);

  // Warning: if the SS pin ever becomes a LOW INPUT then SPI
  // automatically switches to Slave, so the data direction of
  // the SS pin MUST be kept as OUTPUT.
  SPCR |= _BV(MSTR);
    16de:	8c b5       	in	r24, 0x2c	; 44
    16e0:	80 61       	ori	r24, 0x10	; 16
    16e2:	8c bd       	out	0x2c, r24	; 44
  SPCR |= _BV(SPE);
    16e4:	8c b5       	in	r24, 0x2c	; 44
    16e6:	80 64       	ori	r24, 0x40	; 64
    16e8:	8c bd       	out	0x2c, r24	; 44
//  // clocking in a single bit since the lines go directly
//  // from "input" to SPI control.
//  // http://code.google.com/p/arduino/issues/detail?id=888
//  pinMode(SCK, OUTPUT);
//  pinMode(MOSI, OUTPUT);
}
    16ea:	08 95       	ret

000016ec <_ZN8SPIClass11setBitOrderEh>:
  SPCR &= ~_BV(SPE);
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
  if(bitOrder == LSBFIRST) {
    16ec:	88 23       	and	r24, r24
    16ee:	19 f4       	brne	.+6      	; 0x16f6 <_ZN8SPIClass11setBitOrderEh+0xa>
    SPCR |= _BV(DORD);
    16f0:	8c b5       	in	r24, 0x2c	; 44
    16f2:	80 62       	ori	r24, 0x20	; 32
    16f4:	02 c0       	rjmp	.+4      	; 0x16fa <_ZN8SPIClass11setBitOrderEh+0xe>
  } else {
    SPCR &= ~(_BV(DORD));
    16f6:	8c b5       	in	r24, 0x2c	; 44
    16f8:	8f 7d       	andi	r24, 0xDF	; 223
    16fa:	8c bd       	out	0x2c, r24	; 44
    16fc:	08 95       	ret

000016fe <_ZN8SPIClass11setDataModeEh>:
  }
}

void SPIClass::setDataMode(uint8_t mode)
{
  SPCR = (SPCR & ~SPI_MODE_MASK) | mode;
    16fe:	9c b5       	in	r25, 0x2c	; 44
    1700:	93 7f       	andi	r25, 0xF3	; 243
    1702:	98 2b       	or	r25, r24
    1704:	9c bd       	out	0x2c, r25	; 44
}
    1706:	08 95       	ret

00001708 <_ZN8SPIClass15setClockDividerEh>:

void SPIClass::setClockDivider(uint8_t rate)
{
  SPCR = (SPCR & ~SPI_CLOCK_MASK) | (rate & SPI_CLOCK_MASK);
    1708:	2c b5       	in	r18, 0x2c	; 44
    170a:	38 2f       	mov	r19, r24
    170c:	33 70       	andi	r19, 0x03	; 3
    170e:	2c 7f       	andi	r18, 0xFC	; 252
    1710:	32 2b       	or	r19, r18
    1712:	3c bd       	out	0x2c, r19	; 44
  SPSR = (SPSR & ~SPI_2XCLOCK_MASK) | ((rate >> 2) & SPI_2XCLOCK_MASK);
    1714:	2d b5       	in	r18, 0x2d	; 45
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	95 95       	asr	r25
    171a:	87 95       	ror	r24
    171c:	95 95       	asr	r25
    171e:	87 95       	ror	r24
    1720:	81 70       	andi	r24, 0x01	; 1
    1722:	2e 7f       	andi	r18, 0xFE	; 254
    1724:	82 2b       	or	r24, r18
    1726:	8d bd       	out	0x2d, r24	; 45
}
    1728:	08 95       	ret

0000172a <_ZN9utilities12start_deviceEv>:

/**
 * This function simply acts as a boolean flag toggle. We use
 * it to start the device data acquisition.
 */
void utilities::start_device(void){
    172a:	fc 01       	movw	r30, r24
	start_engine = true;
    172c:	81 e0       	ldi	r24, 0x01	; 1
    172e:	80 83       	st	Z, r24
}
    1730:	08 95       	ret

00001732 <_ZN9utilities11stop_deviceEv>:

/**
 * This function simply acts as a boolean flag toggle. We use
 * it to stop the device data acquisition.
 */
void utilities::stop_device(void){
    1732:	fc 01       	movw	r30, r24
	start_engine = false;
    1734:	10 82       	st	Z, r1
}
    1736:	08 95       	ret

00001738 <_ZN9utilities6rebootEv>:
 * Reboot the device
 */
void utilities::reboot(){
	//! Reset the device
	void (*reset_device)(void) = 0;
	reset_device();
    1738:	e0 e0       	ldi	r30, 0x00	; 0
    173a:	f0 e0       	ldi	r31, 0x00	; 0
    173c:	09 95       	icall
    173e:	08 95       	ret

00001740 <attachInterrupt>:

static volatile voidFuncPtr intFunc[EXTERNAL_NUM_INTERRUPTS];
// volatile static voidFuncPtr twiIntFunc;

void attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
    1740:	82 30       	cpi	r24, 0x02	; 2
    1742:	00 f5       	brcc	.+64     	; 0x1784 <attachInterrupt+0x44>
    intFunc[interruptNum] = userFunc;
    1744:	e8 2f       	mov	r30, r24
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	ee 0f       	add	r30, r30
    174a:	ff 1f       	adc	r31, r31
    174c:	ef 54       	subi	r30, 0x4F	; 79
    174e:	fb 4f       	sbci	r31, 0xFB	; 251
    1750:	71 83       	std	Z+1, r23	; 0x01
    1752:	60 83       	st	Z, r22
    // to the configuration bits in the hardware register, so we simply shift
    // the mode into place.
      
    // Enable the interrupt.
      
    switch (interruptNum) {
    1754:	88 23       	and	r24, r24
    1756:	19 f0       	breq	.+6      	; 0x175e <attachInterrupt+0x1e>
    1758:	81 30       	cpi	r24, 0x01	; 1
    175a:	a1 f4       	brne	.+40     	; 0x1784 <attachInterrupt+0x44>
    175c:	08 c0       	rjmp	.+16     	; 0x176e <attachInterrupt+0x2e>
      EIMSK |= (1 << INT7);
      break;
#else		
    case 0:
    #if defined(EICRA) && defined(ISC00) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
    175e:	80 91 69 00 	lds	r24, 0x0069
    1762:	8c 7f       	andi	r24, 0xFC	; 252
    1764:	84 2b       	or	r24, r20
    1766:	80 93 69 00 	sts	0x0069, r24
      EIMSK |= (1 << INT0);
    176a:	e8 9a       	sbi	0x1d, 0	; 29
    176c:	08 95       	ret
    #endif
      break;

    case 1:
    #if defined(EICRA) && defined(ISC10) && defined(ISC11) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC10) | (1 << ISC11))) | (mode << ISC10);
    176e:	80 91 69 00 	lds	r24, 0x0069
    1772:	44 0f       	add	r20, r20
    1774:	55 1f       	adc	r21, r21
    1776:	44 0f       	add	r20, r20
    1778:	55 1f       	adc	r21, r21
    177a:	83 7f       	andi	r24, 0xF3	; 243
    177c:	84 2b       	or	r24, r20
    177e:	80 93 69 00 	sts	0x0069, r24
      EIMSK |= (1 << INT1);
    1782:	e9 9a       	sbi	0x1d, 1	; 29
    1784:	08 95       	ret

00001786 <__vector_1>:
    intFunc[EXTERNAL_INT_7]();
}

#else

ISR(INT0_vect) {
    1786:	1f 92       	push	r1
    1788:	0f 92       	push	r0
    178a:	0f b6       	in	r0, 0x3f	; 63
    178c:	0f 92       	push	r0
    178e:	11 24       	eor	r1, r1
    1790:	2f 93       	push	r18
    1792:	3f 93       	push	r19
    1794:	4f 93       	push	r20
    1796:	5f 93       	push	r21
    1798:	6f 93       	push	r22
    179a:	7f 93       	push	r23
    179c:	8f 93       	push	r24
    179e:	9f 93       	push	r25
    17a0:	af 93       	push	r26
    17a2:	bf 93       	push	r27
    17a4:	ef 93       	push	r30
    17a6:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_0])
    17a8:	80 91 b1 04 	lds	r24, 0x04B1
    17ac:	90 91 b2 04 	lds	r25, 0x04B2
    17b0:	89 2b       	or	r24, r25
    17b2:	29 f0       	breq	.+10     	; 0x17be <__vector_1+0x38>
    intFunc[EXTERNAL_INT_0]();
    17b4:	e0 91 b1 04 	lds	r30, 0x04B1
    17b8:	f0 91 b2 04 	lds	r31, 0x04B2
    17bc:	09 95       	icall
}
    17be:	ff 91       	pop	r31
    17c0:	ef 91       	pop	r30
    17c2:	bf 91       	pop	r27
    17c4:	af 91       	pop	r26
    17c6:	9f 91       	pop	r25
    17c8:	8f 91       	pop	r24
    17ca:	7f 91       	pop	r23
    17cc:	6f 91       	pop	r22
    17ce:	5f 91       	pop	r21
    17d0:	4f 91       	pop	r20
    17d2:	3f 91       	pop	r19
    17d4:	2f 91       	pop	r18
    17d6:	0f 90       	pop	r0
    17d8:	0f be       	out	0x3f, r0	; 63
    17da:	0f 90       	pop	r0
    17dc:	1f 90       	pop	r1
    17de:	18 95       	reti

000017e0 <__vector_2>:

ISR(INT1_vect) {
    17e0:	1f 92       	push	r1
    17e2:	0f 92       	push	r0
    17e4:	0f b6       	in	r0, 0x3f	; 63
    17e6:	0f 92       	push	r0
    17e8:	11 24       	eor	r1, r1
    17ea:	2f 93       	push	r18
    17ec:	3f 93       	push	r19
    17ee:	4f 93       	push	r20
    17f0:	5f 93       	push	r21
    17f2:	6f 93       	push	r22
    17f4:	7f 93       	push	r23
    17f6:	8f 93       	push	r24
    17f8:	9f 93       	push	r25
    17fa:	af 93       	push	r26
    17fc:	bf 93       	push	r27
    17fe:	ef 93       	push	r30
    1800:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_1])
    1802:	80 91 b3 04 	lds	r24, 0x04B3
    1806:	90 91 b4 04 	lds	r25, 0x04B4
    180a:	89 2b       	or	r24, r25
    180c:	29 f0       	breq	.+10     	; 0x1818 <__vector_2+0x38>
    intFunc[EXTERNAL_INT_1]();
    180e:	e0 91 b3 04 	lds	r30, 0x04B3
    1812:	f0 91 b4 04 	lds	r31, 0x04B4
    1816:	09 95       	icall
}
    1818:	ff 91       	pop	r31
    181a:	ef 91       	pop	r30
    181c:	bf 91       	pop	r27
    181e:	af 91       	pop	r26
    1820:	9f 91       	pop	r25
    1822:	8f 91       	pop	r24
    1824:	7f 91       	pop	r23
    1826:	6f 91       	pop	r22
    1828:	5f 91       	pop	r21
    182a:	4f 91       	pop	r20
    182c:	3f 91       	pop	r19
    182e:	2f 91       	pop	r18
    1830:	0f 90       	pop	r0
    1832:	0f be       	out	0x3f, r0	; 63
    1834:	0f 90       	pop	r0
    1836:	1f 90       	pop	r1
    1838:	18 95       	reti

0000183a <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    183a:	1f 92       	push	r1
    183c:	0f 92       	push	r0
    183e:	0f b6       	in	r0, 0x3f	; 63
    1840:	0f 92       	push	r0
    1842:	11 24       	eor	r1, r1
    1844:	2f 93       	push	r18
    1846:	3f 93       	push	r19
    1848:	8f 93       	push	r24
    184a:	9f 93       	push	r25
    184c:	af 93       	push	r26
    184e:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    1850:	80 91 b9 04 	lds	r24, 0x04B9
    1854:	90 91 ba 04 	lds	r25, 0x04BA
    1858:	a0 91 bb 04 	lds	r26, 0x04BB
    185c:	b0 91 bc 04 	lds	r27, 0x04BC
	unsigned char f = timer0_fract;
    1860:	30 91 bd 04 	lds	r19, 0x04BD

	m += MILLIS_INC;
    1864:	01 96       	adiw	r24, 0x01	; 1
    1866:	a1 1d       	adc	r26, r1
    1868:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
    186a:	23 2f       	mov	r18, r19
    186c:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
    186e:	2d 37       	cpi	r18, 0x7D	; 125
    1870:	20 f0       	brcs	.+8      	; 0x187a <__vector_16+0x40>
		f -= FRACT_MAX;
    1872:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
    1874:	01 96       	adiw	r24, 0x01	; 1
    1876:	a1 1d       	adc	r26, r1
    1878:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    187a:	20 93 bd 04 	sts	0x04BD, r18
	timer0_millis = m;
    187e:	80 93 b9 04 	sts	0x04B9, r24
    1882:	90 93 ba 04 	sts	0x04BA, r25
    1886:	a0 93 bb 04 	sts	0x04BB, r26
    188a:	b0 93 bc 04 	sts	0x04BC, r27
	timer0_overflow_count++;
    188e:	80 91 b5 04 	lds	r24, 0x04B5
    1892:	90 91 b6 04 	lds	r25, 0x04B6
    1896:	a0 91 b7 04 	lds	r26, 0x04B7
    189a:	b0 91 b8 04 	lds	r27, 0x04B8
    189e:	01 96       	adiw	r24, 0x01	; 1
    18a0:	a1 1d       	adc	r26, r1
    18a2:	b1 1d       	adc	r27, r1
    18a4:	80 93 b5 04 	sts	0x04B5, r24
    18a8:	90 93 b6 04 	sts	0x04B6, r25
    18ac:	a0 93 b7 04 	sts	0x04B7, r26
    18b0:	b0 93 b8 04 	sts	0x04B8, r27
}
    18b4:	bf 91       	pop	r27
    18b6:	af 91       	pop	r26
    18b8:	9f 91       	pop	r25
    18ba:	8f 91       	pop	r24
    18bc:	3f 91       	pop	r19
    18be:	2f 91       	pop	r18
    18c0:	0f 90       	pop	r0
    18c2:	0f be       	out	0x3f, r0	; 63
    18c4:	0f 90       	pop	r0
    18c6:	1f 90       	pop	r1
    18c8:	18 95       	reti

000018ca <delay>:
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
    18ca:	9b 01       	movw	r18, r22
    18cc:	ac 01       	movw	r20, r24
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    18ce:	7f b7       	in	r23, 0x3f	; 63
	
	cli();
    18d0:	f8 94       	cli
	m = timer0_overflow_count;
    18d2:	80 91 b5 04 	lds	r24, 0x04B5
    18d6:	90 91 b6 04 	lds	r25, 0x04B6
    18da:	a0 91 b7 04 	lds	r26, 0x04B7
    18de:	b0 91 b8 04 	lds	r27, 0x04B8
#if defined(TCNT0)
	t = TCNT0;
    18e2:	66 b5       	in	r22, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    18e4:	a8 9b       	sbis	0x15, 0	; 21
    18e6:	05 c0       	rjmp	.+10     	; 0x18f2 <delay+0x28>
    18e8:	6f 3f       	cpi	r22, 0xFF	; 255
    18ea:	19 f0       	breq	.+6      	; 0x18f2 <delay+0x28>
		m++;
    18ec:	01 96       	adiw	r24, 0x01	; 1
    18ee:	a1 1d       	adc	r26, r1
    18f0:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    18f2:	7f bf       	out	0x3f, r23	; 63
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();
    18f4:	ba 2f       	mov	r27, r26
    18f6:	a9 2f       	mov	r26, r25
    18f8:	98 2f       	mov	r25, r24
    18fa:	88 27       	eor	r24, r24
    18fc:	86 0f       	add	r24, r22
    18fe:	91 1d       	adc	r25, r1
    1900:	a1 1d       	adc	r26, r1
    1902:	b1 1d       	adc	r27, r1
    1904:	62 e0       	ldi	r22, 0x02	; 2
    1906:	88 0f       	add	r24, r24
    1908:	99 1f       	adc	r25, r25
    190a:	aa 1f       	adc	r26, r26
    190c:	bb 1f       	adc	r27, r27
    190e:	6a 95       	dec	r22
    1910:	d1 f7       	brne	.-12     	; 0x1906 <delay+0x3c>
    1912:	bc 01       	movw	r22, r24
    1914:	2d c0       	rjmp	.+90     	; 0x1970 <delay+0xa6>
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    1916:	ff b7       	in	r31, 0x3f	; 63
	
	cli();
    1918:	f8 94       	cli
	m = timer0_overflow_count;
    191a:	80 91 b5 04 	lds	r24, 0x04B5
    191e:	90 91 b6 04 	lds	r25, 0x04B6
    1922:	a0 91 b7 04 	lds	r26, 0x04B7
    1926:	b0 91 b8 04 	lds	r27, 0x04B8
#if defined(TCNT0)
	t = TCNT0;
    192a:	e6 b5       	in	r30, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    192c:	a8 9b       	sbis	0x15, 0	; 21
    192e:	05 c0       	rjmp	.+10     	; 0x193a <delay+0x70>
    1930:	ef 3f       	cpi	r30, 0xFF	; 255
    1932:	19 f0       	breq	.+6      	; 0x193a <delay+0x70>
		m++;
    1934:	01 96       	adiw	r24, 0x01	; 1
    1936:	a1 1d       	adc	r26, r1
    1938:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    193a:	ff bf       	out	0x3f, r31	; 63
void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
		if (((uint16_t)micros() - start) >= 1000) {
    193c:	ba 2f       	mov	r27, r26
    193e:	a9 2f       	mov	r26, r25
    1940:	98 2f       	mov	r25, r24
    1942:	88 27       	eor	r24, r24
    1944:	8e 0f       	add	r24, r30
    1946:	91 1d       	adc	r25, r1
    1948:	a1 1d       	adc	r26, r1
    194a:	b1 1d       	adc	r27, r1
    194c:	e2 e0       	ldi	r30, 0x02	; 2
    194e:	88 0f       	add	r24, r24
    1950:	99 1f       	adc	r25, r25
    1952:	aa 1f       	adc	r26, r26
    1954:	bb 1f       	adc	r27, r27
    1956:	ea 95       	dec	r30
    1958:	d1 f7       	brne	.-12     	; 0x194e <delay+0x84>
    195a:	86 1b       	sub	r24, r22
    195c:	97 0b       	sbc	r25, r23
    195e:	88 5e       	subi	r24, 0xE8	; 232
    1960:	93 40       	sbci	r25, 0x03	; 3
    1962:	c8 f2       	brcs	.-78     	; 0x1916 <delay+0x4c>
			ms--;
    1964:	21 50       	subi	r18, 0x01	; 1
    1966:	30 40       	sbci	r19, 0x00	; 0
    1968:	40 40       	sbci	r20, 0x00	; 0
    196a:	50 40       	sbci	r21, 0x00	; 0
			start += 1000;
    196c:	68 51       	subi	r22, 0x18	; 24
    196e:	7c 4f       	sbci	r23, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
    1970:	21 15       	cp	r18, r1
    1972:	31 05       	cpc	r19, r1
    1974:	41 05       	cpc	r20, r1
    1976:	51 05       	cpc	r21, r1
    1978:	71 f6       	brne	.-100    	; 0x1916 <delay+0x4c>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    197a:	08 95       	ret

0000197c <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call yields a delay of approximately 1 1/8 us.
	if (--us == 0)
    197c:	01 97       	sbiw	r24, 0x01	; 1
    197e:	39 f0       	breq	.+14     	; 0x198e <delayMicroseconds+0x12>
		return;

	// the following loop takes a quarter of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2;
    1980:	88 0f       	add	r24, r24
    1982:	99 1f       	adc	r25, r25
    1984:	88 0f       	add	r24, r24
    1986:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	us -= 2;
    1988:	02 97       	sbiw	r24, 0x02	; 2
	// we can't subtract any more than this or we'd overflow w/ small delays.
	us--;
#endif

	// busy wait
	__asm__ __volatile__ (
    198a:	01 97       	sbiw	r24, 0x01	; 1
    198c:	f1 f7       	brne	.-4      	; 0x198a <delayMicroseconds+0xe>
    198e:	08 95       	ret

00001990 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    1990:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    1992:	84 b5       	in	r24, 0x24	; 36
    1994:	82 60       	ori	r24, 0x02	; 2
    1996:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    1998:	84 b5       	in	r24, 0x24	; 36
    199a:	81 60       	ori	r24, 0x01	; 1
    199c:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    199e:	85 b5       	in	r24, 0x25	; 37
    19a0:	82 60       	ori	r24, 0x02	; 2
    19a2:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    19a4:	85 b5       	in	r24, 0x25	; 37
    19a6:	81 60       	ori	r24, 0x01	; 1
    19a8:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    19aa:	ee e6       	ldi	r30, 0x6E	; 110
    19ac:	f0 e0       	ldi	r31, 0x00	; 0
    19ae:	80 81       	ld	r24, Z
    19b0:	81 60       	ori	r24, 0x01	; 1
    19b2:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    19b4:	e1 e8       	ldi	r30, 0x81	; 129
    19b6:	f0 e0       	ldi	r31, 0x00	; 0
    19b8:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    19ba:	80 81       	ld	r24, Z
    19bc:	82 60       	ori	r24, 0x02	; 2
    19be:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    19c0:	80 81       	ld	r24, Z
    19c2:	81 60       	ori	r24, 0x01	; 1
    19c4:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    19c6:	e0 e8       	ldi	r30, 0x80	; 128
    19c8:	f0 e0       	ldi	r31, 0x00	; 0
    19ca:	80 81       	ld	r24, Z
    19cc:	81 60       	ori	r24, 0x01	; 1
    19ce:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    19d0:	e1 eb       	ldi	r30, 0xB1	; 177
    19d2:	f0 e0       	ldi	r31, 0x00	; 0
    19d4:	80 81       	ld	r24, Z
    19d6:	84 60       	ori	r24, 0x04	; 4
    19d8:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    19da:	e0 eb       	ldi	r30, 0xB0	; 176
    19dc:	f0 e0       	ldi	r31, 0x00	; 0
    19de:	80 81       	ld	r24, Z
    19e0:	81 60       	ori	r24, 0x01	; 1
    19e2:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    19e4:	ea e7       	ldi	r30, 0x7A	; 122
    19e6:	f0 e0       	ldi	r31, 0x00	; 0
    19e8:	80 81       	ld	r24, Z
    19ea:	84 60       	ori	r24, 0x04	; 4
    19ec:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    19ee:	80 81       	ld	r24, Z
    19f0:	82 60       	ori	r24, 0x02	; 2
    19f2:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    19f4:	80 81       	ld	r24, Z
    19f6:	81 60       	ori	r24, 0x01	; 1
    19f8:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    19fa:	80 81       	ld	r24, Z
    19fc:	80 68       	ori	r24, 0x80	; 128
    19fe:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1a00:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    1a04:	08 95       	ret

00001a06 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    1a06:	cf 93       	push	r28
    1a08:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    1a0a:	48 2f       	mov	r20, r24
    1a0c:	50 e0       	ldi	r21, 0x00	; 0
    1a0e:	ca 01       	movw	r24, r20
    1a10:	8d 59       	subi	r24, 0x9D	; 157
    1a12:	9d 4f       	sbci	r25, 0xFD	; 253
    1a14:	fc 01       	movw	r30, r24
    1a16:	34 91       	lpm	r19, Z+
	uint8_t port = digitalPinToPort(pin);
    1a18:	41 5b       	subi	r20, 0xB1	; 177
    1a1a:	5d 4f       	sbci	r21, 0xFD	; 253
    1a1c:	fa 01       	movw	r30, r20
    1a1e:	84 91       	lpm	r24, Z+
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    1a20:	88 23       	and	r24, r24
    1a22:	69 f1       	breq	.+90     	; 0x1a7e <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	88 0f       	add	r24, r24
    1a28:	99 1f       	adc	r25, r25
    1a2a:	fc 01       	movw	r30, r24
    1a2c:	ef 5c       	subi	r30, 0xCF	; 207
    1a2e:	fd 4f       	sbci	r31, 0xFD	; 253
    1a30:	a5 91       	lpm	r26, Z+
    1a32:	b4 91       	lpm	r27, Z+
	out = portOutputRegister(port);
    1a34:	fc 01       	movw	r30, r24
    1a36:	e5 5c       	subi	r30, 0xC5	; 197
    1a38:	fd 4f       	sbci	r31, 0xFD	; 253
    1a3a:	c5 91       	lpm	r28, Z+
    1a3c:	d4 91       	lpm	r29, Z+

	if (mode == INPUT) { 
    1a3e:	66 23       	and	r22, r22
    1a40:	51 f4       	brne	.+20     	; 0x1a56 <pinMode+0x50>
		uint8_t oldSREG = SREG;
    1a42:	2f b7       	in	r18, 0x3f	; 63
                cli();
    1a44:	f8 94       	cli
		*reg &= ~bit;
    1a46:	8c 91       	ld	r24, X
    1a48:	93 2f       	mov	r25, r19
    1a4a:	90 95       	com	r25
    1a4c:	89 23       	and	r24, r25
    1a4e:	8c 93       	st	X, r24
		*out &= ~bit;
    1a50:	88 81       	ld	r24, Y
    1a52:	89 23       	and	r24, r25
    1a54:	0b c0       	rjmp	.+22     	; 0x1a6c <pinMode+0x66>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    1a56:	62 30       	cpi	r22, 0x02	; 2
    1a58:	61 f4       	brne	.+24     	; 0x1a72 <pinMode+0x6c>
		uint8_t oldSREG = SREG;
    1a5a:	2f b7       	in	r18, 0x3f	; 63
                cli();
    1a5c:	f8 94       	cli
		*reg &= ~bit;
    1a5e:	8c 91       	ld	r24, X
    1a60:	93 2f       	mov	r25, r19
    1a62:	90 95       	com	r25
    1a64:	89 23       	and	r24, r25
    1a66:	8c 93       	st	X, r24
		*out |= bit;
    1a68:	88 81       	ld	r24, Y
    1a6a:	83 2b       	or	r24, r19
    1a6c:	88 83       	st	Y, r24
		SREG = oldSREG;
    1a6e:	2f bf       	out	0x3f, r18	; 63
    1a70:	06 c0       	rjmp	.+12     	; 0x1a7e <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
    1a72:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1a74:	f8 94       	cli
		*reg |= bit;
    1a76:	8c 91       	ld	r24, X
    1a78:	83 2b       	or	r24, r19
    1a7a:	8c 93       	st	X, r24
		SREG = oldSREG;
    1a7c:	9f bf       	out	0x3f, r25	; 63
	}
}
    1a7e:	df 91       	pop	r29
    1a80:	cf 91       	pop	r28
    1a82:	08 95       	ret

00001a84 <digitalWrite>:
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
    1a84:	48 2f       	mov	r20, r24
    1a86:	50 e0       	ldi	r21, 0x00	; 0
    1a88:	ca 01       	movw	r24, r20
    1a8a:	89 58       	subi	r24, 0x89	; 137
    1a8c:	9d 4f       	sbci	r25, 0xFD	; 253
    1a8e:	fc 01       	movw	r30, r24
    1a90:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    1a92:	ca 01       	movw	r24, r20
    1a94:	8d 59       	subi	r24, 0x9D	; 157
    1a96:	9d 4f       	sbci	r25, 0xFD	; 253
    1a98:	fc 01       	movw	r30, r24
    1a9a:	94 91       	lpm	r25, Z+
	uint8_t port = digitalPinToPort(pin);
    1a9c:	41 5b       	subi	r20, 0xB1	; 177
    1a9e:	5d 4f       	sbci	r21, 0xFD	; 253
    1aa0:	fa 01       	movw	r30, r20
    1aa2:	34 91       	lpm	r19, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1aa4:	33 23       	and	r19, r19
    1aa6:	09 f4       	brne	.+2      	; 0x1aaa <digitalWrite+0x26>
    1aa8:	40 c0       	rjmp	.+128    	; 0x1b2a <digitalWrite+0xa6>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1aaa:	22 23       	and	r18, r18
    1aac:	51 f1       	breq	.+84     	; 0x1b02 <digitalWrite+0x7e>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1aae:	23 30       	cpi	r18, 0x03	; 3
    1ab0:	71 f0       	breq	.+28     	; 0x1ace <digitalWrite+0x4a>
    1ab2:	24 30       	cpi	r18, 0x04	; 4
    1ab4:	28 f4       	brcc	.+10     	; 0x1ac0 <digitalWrite+0x3c>
    1ab6:	21 30       	cpi	r18, 0x01	; 1
    1ab8:	a1 f0       	breq	.+40     	; 0x1ae2 <digitalWrite+0x5e>
    1aba:	22 30       	cpi	r18, 0x02	; 2
    1abc:	11 f5       	brne	.+68     	; 0x1b02 <digitalWrite+0x7e>
    1abe:	14 c0       	rjmp	.+40     	; 0x1ae8 <digitalWrite+0x64>
    1ac0:	26 30       	cpi	r18, 0x06	; 6
    1ac2:	b1 f0       	breq	.+44     	; 0x1af0 <digitalWrite+0x6c>
    1ac4:	27 30       	cpi	r18, 0x07	; 7
    1ac6:	c1 f0       	breq	.+48     	; 0x1af8 <digitalWrite+0x74>
    1ac8:	24 30       	cpi	r18, 0x04	; 4
    1aca:	d9 f4       	brne	.+54     	; 0x1b02 <digitalWrite+0x7e>
    1acc:	04 c0       	rjmp	.+8      	; 0x1ad6 <digitalWrite+0x52>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1ace:	80 91 80 00 	lds	r24, 0x0080
    1ad2:	8f 77       	andi	r24, 0x7F	; 127
    1ad4:	03 c0       	rjmp	.+6      	; 0x1adc <digitalWrite+0x58>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1ad6:	80 91 80 00 	lds	r24, 0x0080
    1ada:	8f 7d       	andi	r24, 0xDF	; 223
    1adc:	80 93 80 00 	sts	0x0080, r24
    1ae0:	10 c0       	rjmp	.+32     	; 0x1b02 <digitalWrite+0x7e>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    1ae2:	84 b5       	in	r24, 0x24	; 36
    1ae4:	8f 77       	andi	r24, 0x7F	; 127
    1ae6:	02 c0       	rjmp	.+4      	; 0x1aec <digitalWrite+0x68>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    1ae8:	84 b5       	in	r24, 0x24	; 36
    1aea:	8f 7d       	andi	r24, 0xDF	; 223
    1aec:	84 bd       	out	0x24, r24	; 36
    1aee:	09 c0       	rjmp	.+18     	; 0x1b02 <digitalWrite+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1af0:	80 91 b0 00 	lds	r24, 0x00B0
    1af4:	8f 77       	andi	r24, 0x7F	; 127
    1af6:	03 c0       	rjmp	.+6      	; 0x1afe <digitalWrite+0x7a>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1af8:	80 91 b0 00 	lds	r24, 0x00B0
    1afc:	8f 7d       	andi	r24, 0xDF	; 223
    1afe:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
    1b02:	e3 2f       	mov	r30, r19
    1b04:	f0 e0       	ldi	r31, 0x00	; 0
    1b06:	ee 0f       	add	r30, r30
    1b08:	ff 1f       	adc	r31, r31
    1b0a:	e5 5c       	subi	r30, 0xC5	; 197
    1b0c:	fd 4f       	sbci	r31, 0xFD	; 253
    1b0e:	a5 91       	lpm	r26, Z+
    1b10:	b4 91       	lpm	r27, Z+

	uint8_t oldSREG = SREG;
    1b12:	2f b7       	in	r18, 0x3f	; 63
	cli();
    1b14:	f8 94       	cli

	if (val == LOW) {
    1b16:	66 23       	and	r22, r22
    1b18:	21 f4       	brne	.+8      	; 0x1b22 <digitalWrite+0x9e>
		*out &= ~bit;
    1b1a:	8c 91       	ld	r24, X
    1b1c:	90 95       	com	r25
    1b1e:	89 23       	and	r24, r25
    1b20:	02 c0       	rjmp	.+4      	; 0x1b26 <digitalWrite+0xa2>
	} else {
		*out |= bit;
    1b22:	8c 91       	ld	r24, X
    1b24:	89 2b       	or	r24, r25
    1b26:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
    1b28:	2f bf       	out	0x3f, r18	; 63
    1b2a:	08 95       	ret

00001b2c <_Z11serialEventv>:
#if !defined(USART_RX_vect) && !defined(USART0_RX_vect) && \
    !defined(USART_RXC_vect)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
    1b2c:	08 95       	ret

00001b2e <__vector_18>:
  #define serialEvent_implemented
#if defined(USART_RX_vect)
  ISR(USART_RX_vect)
    1b2e:	1f 92       	push	r1
    1b30:	0f 92       	push	r0
    1b32:	0f b6       	in	r0, 0x3f	; 63
    1b34:	0f 92       	push	r0
    1b36:	11 24       	eor	r1, r1
    1b38:	2f 93       	push	r18
    1b3a:	3f 93       	push	r19
    1b3c:	4f 93       	push	r20
    1b3e:	8f 93       	push	r24
    1b40:	9f 93       	push	r25
    1b42:	ef 93       	push	r30
    1b44:	ff 93       	push	r31
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#endif
  {
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
    1b46:	80 91 c0 00 	lds	r24, 0x00C0
    1b4a:	82 fd       	sbrc	r24, 2
    1b4c:	1d c0       	rjmp	.+58     	; 0x1b88 <__vector_18+0x5a>
      unsigned char c = UDR0;
    1b4e:	40 91 c6 00 	lds	r20, 0x00C6
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
    1b52:	20 91 fe 04 	lds	r18, 0x04FE
    1b56:	30 91 ff 04 	lds	r19, 0x04FF

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
    1b5a:	2f 5f       	subi	r18, 0xFF	; 255
    1b5c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b5e:	2f 73       	andi	r18, 0x3F	; 63
    1b60:	30 70       	andi	r19, 0x00	; 0
    1b62:	80 91 00 05 	lds	r24, 0x0500
    1b66:	90 91 01 05 	lds	r25, 0x0501
    1b6a:	28 17       	cp	r18, r24
    1b6c:	39 07       	cpc	r19, r25
    1b6e:	71 f0       	breq	.+28     	; 0x1b8c <__vector_18+0x5e>
    buffer->buffer[buffer->head] = c;
    1b70:	e0 91 fe 04 	lds	r30, 0x04FE
    1b74:	f0 91 ff 04 	lds	r31, 0x04FF
    1b78:	e2 54       	subi	r30, 0x42	; 66
    1b7a:	fb 4f       	sbci	r31, 0xFB	; 251
    1b7c:	40 83       	st	Z, r20
    buffer->head = i;
    1b7e:	30 93 ff 04 	sts	0x04FF, r19
    1b82:	20 93 fe 04 	sts	0x04FE, r18
    1b86:	02 c0       	rjmp	.+4      	; 0x1b8c <__vector_18+0x5e>
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
      unsigned char c = UDR0;
      store_char(c, &rx_buffer);
    } else {
      unsigned char c = UDR0;
    1b88:	80 91 c6 00 	lds	r24, 0x00C6
      unsigned char c = UDR;
    };
  #else
    #error UDR not defined
  #endif
  }
    1b8c:	ff 91       	pop	r31
    1b8e:	ef 91       	pop	r30
    1b90:	9f 91       	pop	r25
    1b92:	8f 91       	pop	r24
    1b94:	4f 91       	pop	r20
    1b96:	3f 91       	pop	r19
    1b98:	2f 91       	pop	r18
    1b9a:	0f 90       	pop	r0
    1b9c:	0f be       	out	0x3f, r0	; 63
    1b9e:	0f 90       	pop	r0
    1ba0:	1f 90       	pop	r1
    1ba2:	18 95       	reti

00001ba4 <_Z14serialEventRunv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    1ba4:	e0 91 52 05 	lds	r30, 0x0552
    1ba8:	f0 91 53 05 	lds	r31, 0x0553
    1bac:	e0 5c       	subi	r30, 0xC0	; 192
    1bae:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb0:	81 91       	ld	r24, Z+
    1bb2:	91 91       	ld	r25, Z+
    1bb4:	20 81       	ld	r18, Z
    1bb6:	31 81       	ldd	r19, Z+1	; 0x01
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
    1bb8:	82 1b       	sub	r24, r18
    1bba:	93 0b       	sbc	r25, r19
    1bbc:	8f 73       	andi	r24, 0x3F	; 63
    1bbe:	90 70       	andi	r25, 0x00	; 0
    1bc0:	89 2b       	or	r24, r25
    1bc2:	11 f0       	breq	.+4      	; 0x1bc8 <_Z14serialEventRunv+0x24>
    1bc4:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <_Z11serialEventv>
    1bc8:	08 95       	ret

00001bca <__vector_19>:
#elif defined(UART_UDRE_vect)
ISR(UART_UDRE_vect)
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
    1bca:	1f 92       	push	r1
    1bcc:	0f 92       	push	r0
    1bce:	0f b6       	in	r0, 0x3f	; 63
    1bd0:	0f 92       	push	r0
    1bd2:	11 24       	eor	r1, r1
    1bd4:	2f 93       	push	r18
    1bd6:	3f 93       	push	r19
    1bd8:	8f 93       	push	r24
    1bda:	9f 93       	push	r25
    1bdc:	ef 93       	push	r30
    1bde:	ff 93       	push	r31
#endif
{
  if (tx_buffer.head == tx_buffer.tail) {
    1be0:	20 91 42 05 	lds	r18, 0x0542
    1be4:	30 91 43 05 	lds	r19, 0x0543
    1be8:	80 91 44 05 	lds	r24, 0x0544
    1bec:	90 91 45 05 	lds	r25, 0x0545
    1bf0:	28 17       	cp	r18, r24
    1bf2:	39 07       	cpc	r19, r25
    1bf4:	31 f4       	brne	.+12     	; 0x1c02 <__vector_19+0x38>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
    1bf6:	80 91 c1 00 	lds	r24, 0x00C1
    1bfa:	8f 7d       	andi	r24, 0xDF	; 223
    1bfc:	80 93 c1 00 	sts	0x00C1, r24
    1c00:	14 c0       	rjmp	.+40     	; 0x1c2a <__vector_19+0x60>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
    1c02:	e0 91 44 05 	lds	r30, 0x0544
    1c06:	f0 91 45 05 	lds	r31, 0x0545
    1c0a:	ee 5f       	subi	r30, 0xFE	; 254
    1c0c:	fa 4f       	sbci	r31, 0xFA	; 250
    1c0e:	20 81       	ld	r18, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
    1c10:	80 91 44 05 	lds	r24, 0x0544
    1c14:	90 91 45 05 	lds	r25, 0x0545
    1c18:	01 96       	adiw	r24, 0x01	; 1
    1c1a:	8f 73       	andi	r24, 0x3F	; 63
    1c1c:	90 70       	andi	r25, 0x00	; 0
    1c1e:	90 93 45 05 	sts	0x0545, r25
    1c22:	80 93 44 05 	sts	0x0544, r24
	
  #if defined(UDR0)
    UDR0 = c;
    1c26:	20 93 c6 00 	sts	0x00C6, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
    1c2a:	ff 91       	pop	r31
    1c2c:	ef 91       	pop	r30
    1c2e:	9f 91       	pop	r25
    1c30:	8f 91       	pop	r24
    1c32:	3f 91       	pop	r19
    1c34:	2f 91       	pop	r18
    1c36:	0f 90       	pop	r0
    1c38:	0f be       	out	0x3f, r0	; 63
    1c3a:	0f 90       	pop	r0
    1c3c:	1f 90       	pop	r1
    1c3e:	18 95       	reti

00001c40 <_ZN14HardwareSerial5beginEm>:
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
    1c40:	af 92       	push	r10
    1c42:	bf 92       	push	r11
    1c44:	df 92       	push	r13
    1c46:	ef 92       	push	r14
    1c48:	ff 92       	push	r15
    1c4a:	0f 93       	push	r16
    1c4c:	1f 93       	push	r17
    1c4e:	cf 93       	push	r28
    1c50:	df 93       	push	r29
    1c52:	ec 01       	movw	r28, r24
    1c54:	7a 01       	movw	r14, r20
    1c56:	8b 01       	movw	r16, r22
    1c58:	dd 24       	eor	r13, r13
    1c5a:	40 30       	cpi	r20, 0x00	; 0
    1c5c:	81 ee       	ldi	r24, 0xE1	; 225
    1c5e:	58 07       	cpc	r21, r24
    1c60:	80 e0       	ldi	r24, 0x00	; 0
    1c62:	68 07       	cpc	r22, r24
    1c64:	80 e0       	ldi	r24, 0x00	; 0
    1c66:	78 07       	cpc	r23, r24
    1c68:	11 f0       	breq	.+4      	; 0x1c6e <_ZN14HardwareSerial5beginEm+0x2e>
    1c6a:	dd 24       	eor	r13, r13
    1c6c:	d3 94       	inc	r13
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    1c6e:	91 e0       	ldi	r25, 0x01	; 1
    1c70:	a9 2e       	mov	r10, r25
    1c72:	b1 2c       	mov	r11, r1
    1c74:	ec 89       	ldd	r30, Y+20	; 0x14
    1c76:	fd 89       	ldd	r31, Y+21	; 0x15
  }
#endif

try_again:
  
  if (use_u2x) {
    1c78:	dd 20       	and	r13, r13
    1c7a:	69 f0       	breq	.+26     	; 0x1c96 <_ZN14HardwareSerial5beginEm+0x56>
    *_ucsra = 1 << _u2x;
    1c7c:	c5 01       	movw	r24, r10
    1c7e:	08 a0       	ldd	r0, Y+32	; 0x20
    1c80:	02 c0       	rjmp	.+4      	; 0x1c86 <_ZN14HardwareSerial5beginEm+0x46>
    1c82:	88 0f       	add	r24, r24
    1c84:	99 1f       	adc	r25, r25
    1c86:	0a 94       	dec	r0
    1c88:	e2 f7       	brpl	.-8      	; 0x1c82 <_ZN14HardwareSerial5beginEm+0x42>
    1c8a:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1c8c:	60 e0       	ldi	r22, 0x00	; 0
    1c8e:	79 e0       	ldi	r23, 0x09	; 9
    1c90:	8d e3       	ldi	r24, 0x3D	; 61
    1c92:	90 e0       	ldi	r25, 0x00	; 0
    1c94:	05 c0       	rjmp	.+10     	; 0x1ca0 <_ZN14HardwareSerial5beginEm+0x60>
  } else {
    *_ucsra = 0;
    1c96:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1c98:	60 e8       	ldi	r22, 0x80	; 128
    1c9a:	74 e8       	ldi	r23, 0x84	; 132
    1c9c:	8e e1       	ldi	r24, 0x1E	; 30
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	a8 01       	movw	r20, r16
    1ca2:	97 01       	movw	r18, r14
    1ca4:	0e 94 bc 12 	call	0x2578	; 0x2578 <__udivmodsi4>
    1ca8:	21 50       	subi	r18, 0x01	; 1
    1caa:	30 40       	sbci	r19, 0x00	; 0
    1cac:	40 40       	sbci	r20, 0x00	; 0
    1cae:	50 40       	sbci	r21, 0x00	; 0
    1cb0:	56 95       	lsr	r21
    1cb2:	47 95       	ror	r20
    1cb4:	37 95       	ror	r19
    1cb6:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
    1cb8:	80 e1       	ldi	r24, 0x10	; 16
    1cba:	20 30       	cpi	r18, 0x00	; 0
    1cbc:	38 07       	cpc	r19, r24
    1cbe:	20 f0       	brcs	.+8      	; 0x1cc8 <_ZN14HardwareSerial5beginEm+0x88>
    1cc0:	dd 20       	and	r13, r13
    1cc2:	11 f0       	breq	.+4      	; 0x1cc8 <_ZN14HardwareSerial5beginEm+0x88>
    1cc4:	dd 24       	eor	r13, r13
    1cc6:	d6 cf       	rjmp	.-84     	; 0x1c74 <_ZN14HardwareSerial5beginEm+0x34>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1cc8:	e8 89       	ldd	r30, Y+16	; 0x10
    1cca:	f9 89       	ldd	r31, Y+17	; 0x11
    1ccc:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    1cce:	ea 89       	ldd	r30, Y+18	; 0x12
    1cd0:	fb 89       	ldd	r31, Y+19	; 0x13
    1cd2:	20 83       	st	Z, r18

  transmitting = false;
    1cd4:	19 a2       	std	Y+33, r1	; 0x21

  sbi(*_ucsrb, _rxen);
    1cd6:	ee 89       	ldd	r30, Y+22	; 0x16
    1cd8:	ff 89       	ldd	r31, Y+23	; 0x17
    1cda:	40 81       	ld	r20, Z
    1cdc:	21 e0       	ldi	r18, 0x01	; 1
    1cde:	30 e0       	ldi	r19, 0x00	; 0
    1ce0:	c9 01       	movw	r24, r18
    1ce2:	0c 8c       	ldd	r0, Y+28	; 0x1c
    1ce4:	02 c0       	rjmp	.+4      	; 0x1cea <_ZN14HardwareSerial5beginEm+0xaa>
    1ce6:	88 0f       	add	r24, r24
    1ce8:	99 1f       	adc	r25, r25
    1cea:	0a 94       	dec	r0
    1cec:	e2 f7       	brpl	.-8      	; 0x1ce6 <_ZN14HardwareSerial5beginEm+0xa6>
    1cee:	48 2b       	or	r20, r24
    1cf0:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
    1cf2:	ee 89       	ldd	r30, Y+22	; 0x16
    1cf4:	ff 89       	ldd	r31, Y+23	; 0x17
    1cf6:	40 81       	ld	r20, Z
    1cf8:	c9 01       	movw	r24, r18
    1cfa:	0d 8c       	ldd	r0, Y+29	; 0x1d
    1cfc:	02 c0       	rjmp	.+4      	; 0x1d02 <_ZN14HardwareSerial5beginEm+0xc2>
    1cfe:	88 0f       	add	r24, r24
    1d00:	99 1f       	adc	r25, r25
    1d02:	0a 94       	dec	r0
    1d04:	e2 f7       	brpl	.-8      	; 0x1cfe <_ZN14HardwareSerial5beginEm+0xbe>
    1d06:	48 2b       	or	r20, r24
    1d08:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
    1d0a:	ee 89       	ldd	r30, Y+22	; 0x16
    1d0c:	ff 89       	ldd	r31, Y+23	; 0x17
    1d0e:	40 81       	ld	r20, Z
    1d10:	c9 01       	movw	r24, r18
    1d12:	0e 8c       	ldd	r0, Y+30	; 0x1e
    1d14:	02 c0       	rjmp	.+4      	; 0x1d1a <_ZN14HardwareSerial5beginEm+0xda>
    1d16:	88 0f       	add	r24, r24
    1d18:	99 1f       	adc	r25, r25
    1d1a:	0a 94       	dec	r0
    1d1c:	e2 f7       	brpl	.-8      	; 0x1d16 <_ZN14HardwareSerial5beginEm+0xd6>
    1d1e:	48 2b       	or	r20, r24
    1d20:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
    1d22:	ee 89       	ldd	r30, Y+22	; 0x16
    1d24:	ff 89       	ldd	r31, Y+23	; 0x17
    1d26:	80 81       	ld	r24, Z
    1d28:	0f 8c       	ldd	r0, Y+31	; 0x1f
    1d2a:	02 c0       	rjmp	.+4      	; 0x1d30 <_ZN14HardwareSerial5beginEm+0xf0>
    1d2c:	22 0f       	add	r18, r18
    1d2e:	33 1f       	adc	r19, r19
    1d30:	0a 94       	dec	r0
    1d32:	e2 f7       	brpl	.-8      	; 0x1d2c <_ZN14HardwareSerial5beginEm+0xec>
    1d34:	20 95       	com	r18
    1d36:	28 23       	and	r18, r24
    1d38:	20 83       	st	Z, r18
}
    1d3a:	df 91       	pop	r29
    1d3c:	cf 91       	pop	r28
    1d3e:	1f 91       	pop	r17
    1d40:	0f 91       	pop	r16
    1d42:	ff 90       	pop	r15
    1d44:	ef 90       	pop	r14
    1d46:	df 90       	pop	r13
    1d48:	bf 90       	pop	r11
    1d4a:	af 90       	pop	r10
    1d4c:	08 95       	ret

00001d4e <_ZN14HardwareSerial9availableEv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    1d4e:	dc 01       	movw	r26, r24
    1d50:	1c 96       	adiw	r26, 0x0c	; 12
    1d52:	ed 91       	ld	r30, X+
    1d54:	fc 91       	ld	r31, X
    1d56:	1d 97       	sbiw	r26, 0x0d	; 13
    1d58:	e0 5c       	subi	r30, 0xC0	; 192
    1d5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d5c:	21 91       	ld	r18, Z+
    1d5e:	31 91       	ld	r19, Z+
    1d60:	80 81       	ld	r24, Z
    1d62:	91 81       	ldd	r25, Z+1	; 0x01
    1d64:	28 1b       	sub	r18, r24
    1d66:	39 0b       	sbc	r19, r25
    1d68:	2f 73       	andi	r18, 0x3F	; 63
    1d6a:	30 70       	andi	r19, 0x00	; 0
}
    1d6c:	c9 01       	movw	r24, r18
    1d6e:	08 95       	ret

00001d70 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    1d70:	dc 01       	movw	r26, r24
    1d72:	1c 96       	adiw	r26, 0x0c	; 12
    1d74:	ed 91       	ld	r30, X+
    1d76:	fc 91       	ld	r31, X
    1d78:	1d 97       	sbiw	r26, 0x0d	; 13
    1d7a:	e0 5c       	subi	r30, 0xC0	; 192
    1d7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d7e:	20 81       	ld	r18, Z
    1d80:	31 81       	ldd	r19, Z+1	; 0x01
    1d82:	e0 54       	subi	r30, 0x40	; 64
    1d84:	f0 40       	sbci	r31, 0x00	; 0
    1d86:	df 01       	movw	r26, r30
    1d88:	ae 5b       	subi	r26, 0xBE	; 190
    1d8a:	bf 4f       	sbci	r27, 0xFF	; 255
    1d8c:	8d 91       	ld	r24, X+
    1d8e:	9c 91       	ld	r25, X
    1d90:	11 97       	sbiw	r26, 0x01	; 1
    1d92:	28 17       	cp	r18, r24
    1d94:	39 07       	cpc	r19, r25
    1d96:	19 f4       	brne	.+6      	; 0x1d9e <_ZN14HardwareSerial4peekEv+0x2e>
    1d98:	2f ef       	ldi	r18, 0xFF	; 255
    1d9a:	3f ef       	ldi	r19, 0xFF	; 255
    1d9c:	07 c0       	rjmp	.+14     	; 0x1dac <_ZN14HardwareSerial4peekEv+0x3c>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
    1d9e:	8d 91       	ld	r24, X+
    1da0:	9c 91       	ld	r25, X
    1da2:	e8 0f       	add	r30, r24
    1da4:	f9 1f       	adc	r31, r25
    1da6:	80 81       	ld	r24, Z
    1da8:	28 2f       	mov	r18, r24
    1daa:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    1dac:	c9 01       	movw	r24, r18
    1dae:	08 95       	ret

00001db0 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    1db0:	dc 01       	movw	r26, r24
    1db2:	1c 96       	adiw	r26, 0x0c	; 12
    1db4:	ed 91       	ld	r30, X+
    1db6:	fc 91       	ld	r31, X
    1db8:	1d 97       	sbiw	r26, 0x0d	; 13
    1dba:	e0 5c       	subi	r30, 0xC0	; 192
    1dbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dbe:	20 81       	ld	r18, Z
    1dc0:	31 81       	ldd	r19, Z+1	; 0x01
    1dc2:	e0 54       	subi	r30, 0x40	; 64
    1dc4:	f0 40       	sbci	r31, 0x00	; 0
    1dc6:	df 01       	movw	r26, r30
    1dc8:	ae 5b       	subi	r26, 0xBE	; 190
    1dca:	bf 4f       	sbci	r27, 0xFF	; 255
    1dcc:	8d 91       	ld	r24, X+
    1dce:	9c 91       	ld	r25, X
    1dd0:	11 97       	sbiw	r26, 0x01	; 1
    1dd2:	28 17       	cp	r18, r24
    1dd4:	39 07       	cpc	r19, r25
    1dd6:	19 f4       	brne	.+6      	; 0x1dde <_ZN14HardwareSerial4readEv+0x2e>
    1dd8:	2f ef       	ldi	r18, 0xFF	; 255
    1dda:	3f ef       	ldi	r19, 0xFF	; 255
    1ddc:	10 c0       	rjmp	.+32     	; 0x1dfe <_ZN14HardwareSerial4readEv+0x4e>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    1dde:	8d 91       	ld	r24, X+
    1de0:	9c 91       	ld	r25, X
    1de2:	11 97       	sbiw	r26, 0x01	; 1
    1de4:	e8 0f       	add	r30, r24
    1de6:	f9 1f       	adc	r31, r25
    1de8:	20 81       	ld	r18, Z
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    1dea:	8d 91       	ld	r24, X+
    1dec:	9c 91       	ld	r25, X
    1dee:	11 97       	sbiw	r26, 0x01	; 1
    1df0:	01 96       	adiw	r24, 0x01	; 1
    1df2:	8f 73       	andi	r24, 0x3F	; 63
    1df4:	90 70       	andi	r25, 0x00	; 0
    1df6:	11 96       	adiw	r26, 0x01	; 1
    1df8:	9c 93       	st	X, r25
    1dfa:	8e 93       	st	-X, r24
    return c;
    1dfc:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    1dfe:	c9 01       	movw	r24, r18
    1e00:	08 95       	ret

00001e02 <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
    1e02:	dc 01       	movw	r26, r24
{
  // UDR is kept full while the buffer is not empty, so TXC triggers when EMPTY && SENT
  while (transmitting && ! (*_ucsra & _BV(TXC0)));
    1e04:	91 96       	adiw	r26, 0x21	; 33
    1e06:	8c 91       	ld	r24, X
    1e08:	91 97       	sbiw	r26, 0x21	; 33
    1e0a:	88 23       	and	r24, r24
    1e0c:	39 f0       	breq	.+14     	; 0x1e1c <_ZN14HardwareSerial5flushEv+0x1a>
    1e0e:	54 96       	adiw	r26, 0x14	; 20
    1e10:	ed 91       	ld	r30, X+
    1e12:	fc 91       	ld	r31, X
    1e14:	55 97       	sbiw	r26, 0x15	; 21
    1e16:	80 81       	ld	r24, Z
    1e18:	86 ff       	sbrs	r24, 6
    1e1a:	f9 cf       	rjmp	.-14     	; 0x1e0e <_ZN14HardwareSerial5flushEv+0xc>
  transmitting = false;
    1e1c:	91 96       	adiw	r26, 0x21	; 33
    1e1e:	1c 92       	st	X, r1
}
    1e20:	08 95       	ret

00001e22 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
    1e22:	cf 93       	push	r28
    1e24:	df 93       	push	r29
    1e26:	ec 01       	movw	r28, r24
{
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
    1e28:	ee 85       	ldd	r30, Y+14	; 0x0e
    1e2a:	ff 85       	ldd	r31, Y+15	; 0x0f
    1e2c:	e0 5c       	subi	r30, 0xC0	; 192
    1e2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e30:	20 81       	ld	r18, Z
    1e32:	31 81       	ldd	r19, Z+1	; 0x01
    1e34:	e0 54       	subi	r30, 0x40	; 64
    1e36:	f0 40       	sbci	r31, 0x00	; 0
    1e38:	2f 5f       	subi	r18, 0xFF	; 255
    1e3a:	3f 4f       	sbci	r19, 0xFF	; 255
    1e3c:	2f 73       	andi	r18, 0x3F	; 63
    1e3e:	30 70       	andi	r19, 0x00	; 0
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
    1e40:	df 01       	movw	r26, r30
    1e42:	ae 5b       	subi	r26, 0xBE	; 190
    1e44:	bf 4f       	sbci	r27, 0xFF	; 255
    1e46:	8d 91       	ld	r24, X+
    1e48:	9c 91       	ld	r25, X
    1e4a:	11 97       	sbiw	r26, 0x01	; 1
    1e4c:	28 17       	cp	r18, r24
    1e4e:	39 07       	cpc	r19, r25
    1e50:	d1 f3       	breq	.-12     	; 0x1e46 <_ZN14HardwareSerial5writeEh+0x24>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
    1e52:	e0 5c       	subi	r30, 0xC0	; 192
    1e54:	ff 4f       	sbci	r31, 0xFF	; 255
    1e56:	80 81       	ld	r24, Z
    1e58:	91 81       	ldd	r25, Z+1	; 0x01
    1e5a:	e0 54       	subi	r30, 0x40	; 64
    1e5c:	f0 40       	sbci	r31, 0x00	; 0
    1e5e:	e8 0f       	add	r30, r24
    1e60:	f9 1f       	adc	r31, r25
    1e62:	60 83       	st	Z, r22
  _tx_buffer->head = i;
    1e64:	ee 85       	ldd	r30, Y+14	; 0x0e
    1e66:	ff 85       	ldd	r31, Y+15	; 0x0f
    1e68:	e0 5c       	subi	r30, 0xC0	; 192
    1e6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6c:	31 83       	std	Z+1, r19	; 0x01
    1e6e:	20 83       	st	Z, r18
	
  sbi(*_ucsrb, _udrie);
    1e70:	ee 89       	ldd	r30, Y+22	; 0x16
    1e72:	ff 89       	ldd	r31, Y+23	; 0x17
    1e74:	20 81       	ld	r18, Z
    1e76:	81 e0       	ldi	r24, 0x01	; 1
    1e78:	90 e0       	ldi	r25, 0x00	; 0
    1e7a:	0f 8c       	ldd	r0, Y+31	; 0x1f
    1e7c:	02 c0       	rjmp	.+4      	; 0x1e82 <_ZN14HardwareSerial5writeEh+0x60>
    1e7e:	88 0f       	add	r24, r24
    1e80:	99 1f       	adc	r25, r25
    1e82:	0a 94       	dec	r0
    1e84:	e2 f7       	brpl	.-8      	; 0x1e7e <_ZN14HardwareSerial5writeEh+0x5c>
    1e86:	28 2b       	or	r18, r24
    1e88:	20 83       	st	Z, r18
  // clear the TXC bit -- "can be cleared by writing a one to its bit location"
  transmitting = true;
    1e8a:	81 e0       	ldi	r24, 0x01	; 1
    1e8c:	89 a3       	std	Y+33, r24	; 0x21
  sbi(*_ucsra, TXC0);
    1e8e:	ec 89       	ldd	r30, Y+20	; 0x14
    1e90:	fd 89       	ldd	r31, Y+21	; 0x15
    1e92:	80 81       	ld	r24, Z
    1e94:	80 64       	ori	r24, 0x40	; 64
    1e96:	80 83       	st	Z, r24
  
  return 1;
}
    1e98:	81 e0       	ldi	r24, 0x01	; 1
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	df 91       	pop	r29
    1e9e:	cf 91       	pop	r28
    1ea0:	08 95       	ret

00001ea2 <_GLOBAL__I_rx_buffer>:
    1ea2:	10 92 49 05 	sts	0x0549, r1
    1ea6:	10 92 48 05 	sts	0x0548, r1
    1eaa:	88 ee       	ldi	r24, 0xE8	; 232
    1eac:	93 e0       	ldi	r25, 0x03	; 3
    1eae:	a0 e0       	ldi	r26, 0x00	; 0
    1eb0:	b0 e0       	ldi	r27, 0x00	; 0
    1eb2:	80 93 4a 05 	sts	0x054A, r24
    1eb6:	90 93 4b 05 	sts	0x054B, r25
    1eba:	a0 93 4c 05 	sts	0x054C, r26
    1ebe:	b0 93 4d 05 	sts	0x054D, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    1ec2:	83 e5       	ldi	r24, 0x53	; 83
    1ec4:	91 e0       	ldi	r25, 0x01	; 1
    1ec6:	90 93 47 05 	sts	0x0547, r25
    1eca:	80 93 46 05 	sts	0x0546, r24
{
  _rx_buffer = rx_buffer;
    1ece:	8e eb       	ldi	r24, 0xBE	; 190
    1ed0:	94 e0       	ldi	r25, 0x04	; 4
    1ed2:	90 93 53 05 	sts	0x0553, r25
    1ed6:	80 93 52 05 	sts	0x0552, r24
  _tx_buffer = tx_buffer;
    1eda:	82 e0       	ldi	r24, 0x02	; 2
    1edc:	95 e0       	ldi	r25, 0x05	; 5
    1ede:	90 93 55 05 	sts	0x0555, r25
    1ee2:	80 93 54 05 	sts	0x0554, r24
  _ubrrh = ubrrh;
    1ee6:	85 ec       	ldi	r24, 0xC5	; 197
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	90 93 57 05 	sts	0x0557, r25
    1eee:	80 93 56 05 	sts	0x0556, r24
  _ubrrl = ubrrl;
    1ef2:	84 ec       	ldi	r24, 0xC4	; 196
    1ef4:	90 e0       	ldi	r25, 0x00	; 0
    1ef6:	90 93 59 05 	sts	0x0559, r25
    1efa:	80 93 58 05 	sts	0x0558, r24
  _ucsra = ucsra;
    1efe:	80 ec       	ldi	r24, 0xC0	; 192
    1f00:	90 e0       	ldi	r25, 0x00	; 0
    1f02:	90 93 5b 05 	sts	0x055B, r25
    1f06:	80 93 5a 05 	sts	0x055A, r24
  _ucsrb = ucsrb;
    1f0a:	81 ec       	ldi	r24, 0xC1	; 193
    1f0c:	90 e0       	ldi	r25, 0x00	; 0
    1f0e:	90 93 5d 05 	sts	0x055D, r25
    1f12:	80 93 5c 05 	sts	0x055C, r24
  _ucsrc = ucsrc;
    1f16:	82 ec       	ldi	r24, 0xC2	; 194
    1f18:	90 e0       	ldi	r25, 0x00	; 0
    1f1a:	90 93 5f 05 	sts	0x055F, r25
    1f1e:	80 93 5e 05 	sts	0x055E, r24
  _udr = udr;
    1f22:	86 ec       	ldi	r24, 0xC6	; 198
    1f24:	90 e0       	ldi	r25, 0x00	; 0
    1f26:	90 93 61 05 	sts	0x0561, r25
    1f2a:	80 93 60 05 	sts	0x0560, r24
  _rxen = rxen;
    1f2e:	84 e0       	ldi	r24, 0x04	; 4
    1f30:	80 93 62 05 	sts	0x0562, r24
  _txen = txen;
    1f34:	83 e0       	ldi	r24, 0x03	; 3
    1f36:	80 93 63 05 	sts	0x0563, r24
  _rxcie = rxcie;
    1f3a:	87 e0       	ldi	r24, 0x07	; 7
    1f3c:	80 93 64 05 	sts	0x0564, r24
  _udrie = udrie;
    1f40:	85 e0       	ldi	r24, 0x05	; 5
    1f42:	80 93 65 05 	sts	0x0565, r24
  _u2x = u2x;
    1f46:	81 e0       	ldi	r24, 0x01	; 1
    1f48:	80 93 66 05 	sts	0x0566, r24
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UCSRC, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UCSR0C, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
    1f4c:	08 95       	ret

00001f4e <main>:
#include <Arduino.h>

int main(void)
    1f4e:	cf 93       	push	r28
    1f50:	df 93       	push	r29
{
	init();
    1f52:	0e 94 c8 0c 	call	0x1990	; 0x1990 <init>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    1f56:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1f5a:	c2 ed       	ldi	r28, 0xD2	; 210
    1f5c:	dd e0       	ldi	r29, 0x0D	; 13
#endif
	
	setup();
    
	for (;;) {
		loop();
    1f5e:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <loop>
		if (serialEventRun) serialEventRun();
    1f62:	20 97       	sbiw	r28, 0x00	; 0
    1f64:	e1 f3       	breq	.-8      	; 0x1f5e <main+0x10>
    1f66:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <_Z14serialEventRunv>
    1f6a:	f9 cf       	rjmp	.-14     	; 0x1f5e <main+0x10>

00001f6c <_ZN5Print5writeEPKhj>:
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
    1f6c:	cf 92       	push	r12
    1f6e:	df 92       	push	r13
    1f70:	ef 92       	push	r14
    1f72:	ff 92       	push	r15
    1f74:	0f 93       	push	r16
    1f76:	1f 93       	push	r17
    1f78:	cf 93       	push	r28
    1f7a:	df 93       	push	r29
    1f7c:	7c 01       	movw	r14, r24
    1f7e:	6b 01       	movw	r12, r22
    1f80:	8a 01       	movw	r16, r20
    1f82:	c0 e0       	ldi	r28, 0x00	; 0
    1f84:	d0 e0       	ldi	r29, 0x00	; 0
    1f86:	0f c0       	rjmp	.+30     	; 0x1fa6 <_ZN5Print5writeEPKhj+0x3a>
{
  size_t n = 0;
  while (size--) {
    n += write(*buffer++);
    1f88:	d6 01       	movw	r26, r12
    1f8a:	6d 91       	ld	r22, X+
    1f8c:	6d 01       	movw	r12, r26
    1f8e:	d7 01       	movw	r26, r14
    1f90:	ed 91       	ld	r30, X+
    1f92:	fc 91       	ld	r31, X
    1f94:	01 90       	ld	r0, Z+
    1f96:	f0 81       	ld	r31, Z
    1f98:	e0 2d       	mov	r30, r0
    1f9a:	c7 01       	movw	r24, r14
    1f9c:	09 95       	icall
    1f9e:	c8 0f       	add	r28, r24
    1fa0:	d9 1f       	adc	r29, r25
    1fa2:	01 50       	subi	r16, 0x01	; 1
    1fa4:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    1fa6:	01 15       	cp	r16, r1
    1fa8:	11 05       	cpc	r17, r1
    1faa:	71 f7       	brne	.-36     	; 0x1f88 <_ZN5Print5writeEPKhj+0x1c>
    n += write(*buffer++);
  }
  return n;
}
    1fac:	ce 01       	movw	r24, r28
    1fae:	df 91       	pop	r29
    1fb0:	cf 91       	pop	r28
    1fb2:	1f 91       	pop	r17
    1fb4:	0f 91       	pop	r16
    1fb6:	ff 90       	pop	r15
    1fb8:	ef 90       	pop	r14
    1fba:	df 90       	pop	r13
    1fbc:	cf 90       	pop	r12
    1fbe:	08 95       	ret

00001fc0 <_ZN6String12changeBufferEj>:
		return 1;
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
    1fc0:	0f 93       	push	r16
    1fc2:	1f 93       	push	r17
    1fc4:	cf 93       	push	r28
    1fc6:	df 93       	push	r29
    1fc8:	ec 01       	movw	r28, r24
    1fca:	8b 01       	movw	r16, r22
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    1fcc:	6f 5f       	subi	r22, 0xFF	; 255
    1fce:	7f 4f       	sbci	r23, 0xFF	; 255
    1fd0:	88 81       	ld	r24, Y
    1fd2:	99 81       	ldd	r25, Y+1	; 0x01
    1fd4:	0e 94 db 11 	call	0x23b6	; 0x23b6 <realloc>
	if (newbuffer) {
    1fd8:	00 97       	sbiw	r24, 0x00	; 0
    1fda:	11 f4       	brne	.+4      	; 0x1fe0 <_ZN6String12changeBufferEj+0x20>
    1fdc:	80 e0       	ldi	r24, 0x00	; 0
    1fde:	05 c0       	rjmp	.+10     	; 0x1fea <_ZN6String12changeBufferEj+0x2a>
		buffer = newbuffer;
    1fe0:	99 83       	std	Y+1, r25	; 0x01
    1fe2:	88 83       	st	Y, r24
		capacity = maxStrLen;
    1fe4:	1b 83       	std	Y+3, r17	; 0x03
    1fe6:	0a 83       	std	Y+2, r16	; 0x02
    1fe8:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
	}
	return 0;
}
    1fea:	df 91       	pop	r29
    1fec:	cf 91       	pop	r28
    1fee:	1f 91       	pop	r17
    1ff0:	0f 91       	pop	r16
    1ff2:	08 95       	ret

00001ff4 <_ZN6String7reserveEj>:
	if (buffer) free(buffer);
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
    1ff4:	cf 93       	push	r28
    1ff6:	df 93       	push	r29
    1ff8:	ec 01       	movw	r28, r24
{
	if (buffer && capacity >= size) return 1;
    1ffa:	88 81       	ld	r24, Y
    1ffc:	99 81       	ldd	r25, Y+1	; 0x01
    1ffe:	89 2b       	or	r24, r25
    2000:	29 f0       	breq	.+10     	; 0x200c <_ZN6String7reserveEj+0x18>
    2002:	8a 81       	ldd	r24, Y+2	; 0x02
    2004:	9b 81       	ldd	r25, Y+3	; 0x03
    2006:	86 17       	cp	r24, r22
    2008:	97 07       	cpc	r25, r23
    200a:	60 f4       	brcc	.+24     	; 0x2024 <_ZN6String7reserveEj+0x30>
	if (changeBuffer(size)) {
    200c:	ce 01       	movw	r24, r28
    200e:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <_ZN6String12changeBufferEj>
    2012:	88 23       	and	r24, r24
    2014:	41 f0       	breq	.+16     	; 0x2026 <_ZN6String7reserveEj+0x32>
		if (len == 0) buffer[0] = 0;
    2016:	8c 81       	ldd	r24, Y+4	; 0x04
    2018:	9d 81       	ldd	r25, Y+5	; 0x05
    201a:	89 2b       	or	r24, r25
    201c:	19 f4       	brne	.+6      	; 0x2024 <_ZN6String7reserveEj+0x30>
    201e:	e8 81       	ld	r30, Y
    2020:	f9 81       	ldd	r31, Y+1	; 0x01
    2022:	10 82       	st	Z, r1
    2024:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
	}
	return 0;
}
    2026:	df 91       	pop	r29
    2028:	cf 91       	pop	r28
    202a:	08 95       	ret

0000202c <_ZN6String6concatEPKcj>:
unsigned char String::concat(const String &s)
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
    202c:	ef 92       	push	r14
    202e:	ff 92       	push	r15
    2030:	0f 93       	push	r16
    2032:	1f 93       	push	r17
    2034:	cf 93       	push	r28
    2036:	df 93       	push	r29
    2038:	ec 01       	movw	r28, r24
    203a:	7b 01       	movw	r14, r22
{
	unsigned int newlen = len + length;
    203c:	6c 81       	ldd	r22, Y+4	; 0x04
    203e:	7d 81       	ldd	r23, Y+5	; 0x05
	if (!cstr) return 0;
    2040:	e1 14       	cp	r14, r1
    2042:	f1 04       	cpc	r15, r1
    2044:	c1 f0       	breq	.+48     	; 0x2076 <_ZN6String6concatEPKcj+0x4a>
	if (length == 0) return 1;
    2046:	41 15       	cp	r20, r1
    2048:	51 05       	cpc	r21, r1
    204a:	99 f0       	breq	.+38     	; 0x2072 <_ZN6String6concatEPKcj+0x46>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
    204c:	8a 01       	movw	r16, r20
    204e:	06 0f       	add	r16, r22
    2050:	17 1f       	adc	r17, r23
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
    2052:	b8 01       	movw	r22, r16
    2054:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <_ZN6String7reserveEj>
    2058:	88 23       	and	r24, r24
    205a:	69 f0       	breq	.+26     	; 0x2076 <_ZN6String6concatEPKcj+0x4a>
	strcpy(buffer + len, cstr);
    205c:	88 81       	ld	r24, Y
    205e:	99 81       	ldd	r25, Y+1	; 0x01
    2060:	2c 81       	ldd	r18, Y+4	; 0x04
    2062:	3d 81       	ldd	r19, Y+5	; 0x05
    2064:	82 0f       	add	r24, r18
    2066:	93 1f       	adc	r25, r19
    2068:	b7 01       	movw	r22, r14
    206a:	0e 94 8b 01 	call	0x316	; 0x316 <strcpy>
	len = newlen;
    206e:	1d 83       	std	Y+5, r17	; 0x05
    2070:	0c 83       	std	Y+4, r16	; 0x04
    2072:	81 e0       	ldi	r24, 0x01	; 1
    2074:	01 c0       	rjmp	.+2      	; 0x2078 <_ZN6String6concatEPKcj+0x4c>
	return 1;
    2076:	80 e0       	ldi	r24, 0x00	; 0
}
    2078:	df 91       	pop	r29
    207a:	cf 91       	pop	r28
    207c:	1f 91       	pop	r17
    207e:	0f 91       	pop	r16
    2080:	ff 90       	pop	r15
    2082:	ef 90       	pop	r14
    2084:	08 95       	ret

00002086 <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
    2086:	61 15       	cp	r22, r1
    2088:	71 05       	cpc	r23, r1
    208a:	11 f4       	brne	.+4      	; 0x2090 <_ZN6String6concatEPKc+0xa>
    208c:	80 e0       	ldi	r24, 0x00	; 0
    208e:	08 95       	ret
	return concat(cstr, strlen(cstr));
    2090:	db 01       	movw	r26, r22
    2092:	0d 90       	ld	r0, X+
    2094:	00 20       	and	r0, r0
    2096:	e9 f7       	brne	.-6      	; 0x2092 <_ZN6String6concatEPKc+0xc>
    2098:	11 97       	sbiw	r26, 0x01	; 1
    209a:	a6 1b       	sub	r26, r22
    209c:	b7 0b       	sbc	r27, r23
    209e:	ad 01       	movw	r20, r26
    20a0:	0e 94 16 10 	call	0x202c	; 0x202c <_ZN6String6concatEPKcj>
}
    20a4:	08 95       	ret

000020a6 <_ZN6String10invalidateEv>:
	capacity = 0;
	len = 0;
	flags = 0;
}

void String::invalidate(void)
    20a6:	cf 93       	push	r28
    20a8:	df 93       	push	r29
    20aa:	ec 01       	movw	r28, r24
{
	if (buffer) free(buffer);
    20ac:	88 81       	ld	r24, Y
    20ae:	99 81       	ldd	r25, Y+1	; 0x01
    20b0:	00 97       	sbiw	r24, 0x00	; 0
    20b2:	11 f0       	breq	.+4      	; 0x20b8 <_ZN6String10invalidateEv+0x12>
    20b4:	0e 94 43 11 	call	0x2286	; 0x2286 <free>
	buffer = NULL;
    20b8:	19 82       	std	Y+1, r1	; 0x01
    20ba:	18 82       	st	Y, r1
	capacity = len = 0;
    20bc:	1d 82       	std	Y+5, r1	; 0x05
    20be:	1c 82       	std	Y+4, r1	; 0x04
    20c0:	1b 82       	std	Y+3, r1	; 0x03
    20c2:	1a 82       	std	Y+2, r1	; 0x02
}
    20c4:	df 91       	pop	r29
    20c6:	cf 91       	pop	r28
    20c8:	08 95       	ret

000020ca <_ZN6String4copyEPKcj>:

/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
    20ca:	ef 92       	push	r14
    20cc:	ff 92       	push	r15
    20ce:	0f 93       	push	r16
    20d0:	1f 93       	push	r17
    20d2:	cf 93       	push	r28
    20d4:	df 93       	push	r29
    20d6:	ec 01       	movw	r28, r24
    20d8:	7b 01       	movw	r14, r22
    20da:	8a 01       	movw	r16, r20
{
	if (!reserve(length)) {
    20dc:	ba 01       	movw	r22, r20
    20de:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <_ZN6String7reserveEj>
    20e2:	88 23       	and	r24, r24
    20e4:	21 f4       	brne	.+8      	; 0x20ee <_ZN6String4copyEPKcj+0x24>
		invalidate();
    20e6:	ce 01       	movw	r24, r28
    20e8:	0e 94 53 10 	call	0x20a6	; 0x20a6 <_ZN6String10invalidateEv>
    20ec:	07 c0       	rjmp	.+14     	; 0x20fc <_ZN6String4copyEPKcj+0x32>
		return *this;
	}
	len = length;
    20ee:	1d 83       	std	Y+5, r17	; 0x05
    20f0:	0c 83       	std	Y+4, r16	; 0x04
	strcpy(buffer, cstr);
    20f2:	88 81       	ld	r24, Y
    20f4:	99 81       	ldd	r25, Y+1	; 0x01
    20f6:	b7 01       	movw	r22, r14
    20f8:	0e 94 8b 01 	call	0x316	; 0x316 <strcpy>
	return *this;
}
    20fc:	ce 01       	movw	r24, r28
    20fe:	df 91       	pop	r29
    2100:	cf 91       	pop	r28
    2102:	1f 91       	pop	r17
    2104:	0f 91       	pop	r16
    2106:	ff 90       	pop	r15
    2108:	ef 90       	pop	r14
    210a:	08 95       	ret

0000210c <_ZN6StringC1EPKc>:

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
    210c:	cf 93       	push	r28
    210e:	df 93       	push	r29
    2110:	ec 01       	movw	r28, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    2112:	19 82       	std	Y+1, r1	; 0x01
    2114:	18 82       	st	Y, r1
	capacity = 0;
    2116:	1b 82       	std	Y+3, r1	; 0x03
    2118:	1a 82       	std	Y+2, r1	; 0x02
	len = 0;
    211a:	1d 82       	std	Y+5, r1	; 0x05
    211c:	1c 82       	std	Y+4, r1	; 0x04
	flags = 0;
    211e:	1e 82       	std	Y+6, r1	; 0x06
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
    2120:	61 15       	cp	r22, r1
    2122:	71 05       	cpc	r23, r1
    2124:	51 f0       	breq	.+20     	; 0x213a <_ZN6StringC1EPKc+0x2e>
    2126:	db 01       	movw	r26, r22
    2128:	0d 90       	ld	r0, X+
    212a:	00 20       	and	r0, r0
    212c:	e9 f7       	brne	.-6      	; 0x2128 <_ZN6StringC1EPKc+0x1c>
    212e:	11 97       	sbiw	r26, 0x01	; 1
    2130:	a6 1b       	sub	r26, r22
    2132:	b7 0b       	sbc	r27, r23
    2134:	ad 01       	movw	r20, r26
    2136:	0e 94 65 10 	call	0x20ca	; 0x20ca <_ZN6String4copyEPKcj>
}
    213a:	df 91       	pop	r29
    213c:	cf 91       	pop	r28
    213e:	08 95       	ret

00002140 <_ZN6StringD1Ev>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
    2140:	fc 01       	movw	r30, r24
{
	free(buffer);
    2142:	80 81       	ld	r24, Z
    2144:	91 81       	ldd	r25, Z+1	; 0x01
    2146:	0e 94 43 11 	call	0x2286	; 0x2286 <free>
}
    214a:	08 95       	ret

0000214c <malloc>:
	 * Our minimum chunk size is the size of a pointer (plus the
	 * size of the "sz" field, but we don't need to account for
	 * this), otherwise we could not possibly fit a freelist entry
	 * into the chunk later.
	 */
	if (len < sizeof(struct __freelist) - sizeof(size_t))
    214c:	0f 93       	push	r16
    214e:	1f 93       	push	r17
    2150:	cf 93       	push	r28
    2152:	df 93       	push	r29
    2154:	bc 01       	movw	r22, r24
    2156:	82 30       	cpi	r24, 0x02	; 2
    2158:	91 05       	cpc	r25, r1
    215a:	10 f4       	brcc	.+4      	; 0x2160 <malloc+0x14>
    215c:	62 e0       	ldi	r22, 0x02	; 2
    215e:	70 e0       	ldi	r23, 0x00	; 0
	 * would match exactly.  If we found one, we are done.  While
	 * walking, note down the smallest chunk we found that would
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
    2160:	e0 91 6a 05 	lds	r30, 0x056A
    2164:	f0 91 6b 05 	lds	r31, 0x056B
    2168:	40 e0       	ldi	r20, 0x00	; 0
    216a:	50 e0       	ldi	r21, 0x00	; 0
    216c:	a0 e0       	ldi	r26, 0x00	; 0
    216e:	b0 e0       	ldi	r27, 0x00	; 0
    2170:	24 c0       	rjmp	.+72     	; 0x21ba <malloc+0x6e>
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1->sz < len)
    2172:	80 81       	ld	r24, Z
    2174:	91 81       	ldd	r25, Z+1	; 0x01
    2176:	86 17       	cp	r24, r22
    2178:	97 07       	cpc	r25, r23
    217a:	d0 f0       	brcs	.+52     	; 0x21b0 <malloc+0x64>
			continue;
		if (fp1->sz == len) {
    217c:	86 17       	cp	r24, r22
    217e:	97 07       	cpc	r25, r23
    2180:	71 f4       	brne	.+28     	; 0x219e <malloc+0x52>
    2182:	82 81       	ldd	r24, Z+2	; 0x02
    2184:	93 81       	ldd	r25, Z+3	; 0x03
			/*
			 * Found it.  Disconnect the chunk from the
			 * freelist, and return it.
			 */
			if (fp2)
    2186:	10 97       	sbiw	r26, 0x00	; 0
    2188:	29 f0       	breq	.+10     	; 0x2194 <malloc+0x48>
				fp2->nx = fp1->nx;
    218a:	13 96       	adiw	r26, 0x03	; 3
    218c:	9c 93       	st	X, r25
    218e:	8e 93       	st	-X, r24
    2190:	12 97       	sbiw	r26, 0x02	; 2
    2192:	2c c0       	rjmp	.+88     	; 0x21ec <malloc+0xa0>
			else
				__flp = fp1->nx;
    2194:	90 93 6b 05 	sts	0x056B, r25
    2198:	80 93 6a 05 	sts	0x056A, r24
    219c:	27 c0       	rjmp	.+78     	; 0x21ec <malloc+0xa0>
			return &(fp1->nx);
		}
		else {
			if (s == 0 || fp1->sz < s) {
    219e:	41 15       	cp	r20, r1
    21a0:	51 05       	cpc	r21, r1
    21a2:	19 f0       	breq	.+6      	; 0x21aa <malloc+0x5e>
    21a4:	84 17       	cp	r24, r20
    21a6:	95 07       	cpc	r25, r21
    21a8:	18 f4       	brcc	.+6      	; 0x21b0 <malloc+0x64>
    21aa:	8d 01       	movw	r16, r26
    21ac:	ac 01       	movw	r20, r24
    21ae:	ef 01       	movw	r28, r30
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
    21b0:	df 01       	movw	r26, r30
    21b2:	82 81       	ldd	r24, Z+2	; 0x02
    21b4:	93 81       	ldd	r25, Z+3	; 0x03
    21b6:	9c 01       	movw	r18, r24
    21b8:	f9 01       	movw	r30, r18
	 * walking, note down the smallest chunk we found that would
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
	     fp1;
    21ba:	30 97       	sbiw	r30, 0x00	; 0
    21bc:	d1 f6       	brne	.-76     	; 0x2172 <malloc+0x26>
	 * difference between the requested size and the size of the
	 * chunk found is large enough for another freelist entry; if
	 * not, just enlarge the request size to what we have found,
	 * and use the entire chunk.
	 */
	if (s) {
    21be:	41 15       	cp	r20, r1
    21c0:	51 05       	cpc	r21, r1
    21c2:	f9 f0       	breq	.+62     	; 0x2202 <malloc+0xb6>
		if (s - len < sizeof(struct __freelist)) {
    21c4:	ca 01       	movw	r24, r20
    21c6:	86 1b       	sub	r24, r22
    21c8:	97 0b       	sbc	r25, r23
    21ca:	84 30       	cpi	r24, 0x04	; 4
    21cc:	91 05       	cpc	r25, r1
    21ce:	80 f4       	brcc	.+32     	; 0x21f0 <malloc+0xa4>
    21d0:	8a 81       	ldd	r24, Y+2	; 0x02
    21d2:	9b 81       	ldd	r25, Y+3	; 0x03
			/* Disconnect it from freelist and return it. */
			if (sfp2)
    21d4:	01 15       	cp	r16, r1
    21d6:	11 05       	cpc	r17, r1
    21d8:	21 f0       	breq	.+8      	; 0x21e2 <malloc+0x96>
				sfp2->nx = sfp1->nx;
    21da:	f8 01       	movw	r30, r16
    21dc:	93 83       	std	Z+3, r25	; 0x03
    21de:	82 83       	std	Z+2, r24	; 0x02
    21e0:	04 c0       	rjmp	.+8      	; 0x21ea <malloc+0x9e>
			else
				__flp = sfp1->nx;
    21e2:	90 93 6b 05 	sts	0x056B, r25
    21e6:	80 93 6a 05 	sts	0x056A, r24
			return &(sfp1->nx);
    21ea:	fe 01       	movw	r30, r28
    21ec:	32 96       	adiw	r30, 0x02	; 2
    21ee:	45 c0       	rjmp	.+138    	; 0x227a <malloc+0x12e>
		 */
		cp = (char *)sfp1;
		s -= len;
		cp += s;
		sfp2 = (struct __freelist *)cp;
		sfp2->sz = len;
    21f0:	fe 01       	movw	r30, r28
    21f2:	e8 0f       	add	r30, r24
    21f4:	f9 1f       	adc	r31, r25
    21f6:	61 93       	st	Z+, r22
    21f8:	71 93       	st	Z+, r23
		sfp1->sz = s - sizeof(size_t);
    21fa:	02 97       	sbiw	r24, 0x02	; 2
    21fc:	99 83       	std	Y+1, r25	; 0x01
    21fe:	88 83       	st	Y, r24
    2200:	3c c0       	rjmp	.+120    	; 0x227a <malloc+0x12e>
	 * Under Unix, the "break value" was the end of the data
	 * segment as dynamically requested from the operating system.
	 * Since we don't have an operating system, just make sure
	 * that we don't collide with the stack.
	 */
	if (__brkval == 0)
    2202:	80 91 68 05 	lds	r24, 0x0568
    2206:	90 91 69 05 	lds	r25, 0x0569
    220a:	89 2b       	or	r24, r25
    220c:	41 f4       	brne	.+16     	; 0x221e <malloc+0xd2>
		__brkval = __malloc_heap_start;
    220e:	80 91 35 01 	lds	r24, 0x0135
    2212:	90 91 36 01 	lds	r25, 0x0136
    2216:	90 93 69 05 	sts	0x0569, r25
    221a:	80 93 68 05 	sts	0x0568, r24
	cp = __malloc_heap_end;
    221e:	40 91 37 01 	lds	r20, 0x0137
    2222:	50 91 38 01 	lds	r21, 0x0138
	if (cp == 0)
    2226:	41 15       	cp	r20, r1
    2228:	51 05       	cpc	r21, r1
    222a:	41 f4       	brne	.+16     	; 0x223c <malloc+0xf0>
		cp = STACK_POINTER() - __malloc_margin;
    222c:	4d b7       	in	r20, 0x3d	; 61
    222e:	5e b7       	in	r21, 0x3e	; 62
    2230:	80 91 33 01 	lds	r24, 0x0133
    2234:	90 91 34 01 	lds	r25, 0x0134
    2238:	48 1b       	sub	r20, r24
    223a:	59 0b       	sbc	r21, r25
	if (cp <= __brkval)
    223c:	20 91 68 05 	lds	r18, 0x0568
    2240:	30 91 69 05 	lds	r19, 0x0569
    2244:	24 17       	cp	r18, r20
    2246:	35 07       	cpc	r19, r21
    2248:	b0 f4       	brcc	.+44     	; 0x2276 <malloc+0x12a>
	  /*
	   * Memory exhausted.
	   */
	  return 0;
	avail = cp - __brkval;
    224a:	ca 01       	movw	r24, r20
    224c:	82 1b       	sub	r24, r18
    224e:	93 0b       	sbc	r25, r19
	/*
	 * Both tests below are needed to catch the case len >= 0xfffe.
	 */
	if (avail >= len && avail >= len + sizeof(size_t)) {
    2250:	86 17       	cp	r24, r22
    2252:	97 07       	cpc	r25, r23
    2254:	80 f0       	brcs	.+32     	; 0x2276 <malloc+0x12a>
    2256:	ab 01       	movw	r20, r22
    2258:	4e 5f       	subi	r20, 0xFE	; 254
    225a:	5f 4f       	sbci	r21, 0xFF	; 255
    225c:	84 17       	cp	r24, r20
    225e:	95 07       	cpc	r25, r21
    2260:	50 f0       	brcs	.+20     	; 0x2276 <malloc+0x12a>
		fp1 = (struct __freelist *)__brkval;
		__brkval += len + sizeof(size_t);
    2262:	42 0f       	add	r20, r18
    2264:	53 1f       	adc	r21, r19
    2266:	50 93 69 05 	sts	0x0569, r21
    226a:	40 93 68 05 	sts	0x0568, r20
		fp1->sz = len;
    226e:	f9 01       	movw	r30, r18
    2270:	61 93       	st	Z+, r22
    2272:	71 93       	st	Z+, r23
    2274:	02 c0       	rjmp	.+4      	; 0x227a <malloc+0x12e>
		return &(fp1->nx);
    2276:	e0 e0       	ldi	r30, 0x00	; 0
    2278:	f0 e0       	ldi	r31, 0x00	; 0
	}
	/*
	 * Step 4: There's no help, just fail. :-/
	 */
	return 0;
}
    227a:	cf 01       	movw	r24, r30
    227c:	df 91       	pop	r29
    227e:	cf 91       	pop	r28
    2280:	1f 91       	pop	r17
    2282:	0f 91       	pop	r16
    2284:	08 95       	ret

00002286 <free>:
{
	struct __freelist *fp1, *fp2, *fpnew;
	char *cp1, *cp2, *cpnew;

	/* ISO C says free(NULL) must be a no-op */
	if (p == 0)
    2286:	cf 93       	push	r28
    2288:	df 93       	push	r29
    228a:	9c 01       	movw	r18, r24
    228c:	00 97       	sbiw	r24, 0x00	; 0
    228e:	09 f4       	brne	.+2      	; 0x2292 <free+0xc>
    2290:	8f c0       	rjmp	.+286    	; 0x23b0 <free+0x12a>
		return;

	cpnew = p;
	cpnew -= sizeof(size_t);
    2292:	ec 01       	movw	r28, r24
    2294:	22 97       	sbiw	r28, 0x02	; 2
	fpnew = (struct __freelist *)cpnew;
	fpnew->nx = 0;
    2296:	1b 82       	std	Y+3, r1	; 0x03
    2298:	1a 82       	std	Y+2, r1	; 0x02
	/*
	 * Trivial case first: if there's no freelist yet, our entry
	 * will be the only one on it.  If this is the last entry, we
	 * can reduce __brkval instead.
	 */
	if (__flp == 0) {
    229a:	60 91 6a 05 	lds	r22, 0x056A
    229e:	70 91 6b 05 	lds	r23, 0x056B
    22a2:	61 15       	cp	r22, r1
    22a4:	71 05       	cpc	r23, r1
    22a6:	81 f4       	brne	.+32     	; 0x22c8 <free+0x42>
		if ((char *)p + fpnew->sz == __brkval)
    22a8:	88 81       	ld	r24, Y
    22aa:	99 81       	ldd	r25, Y+1	; 0x01
    22ac:	82 0f       	add	r24, r18
    22ae:	93 1f       	adc	r25, r19
    22b0:	20 91 68 05 	lds	r18, 0x0568
    22b4:	30 91 69 05 	lds	r19, 0x0569
    22b8:	28 17       	cp	r18, r24
    22ba:	39 07       	cpc	r19, r25
    22bc:	39 f5       	brne	.+78     	; 0x230c <free+0x86>
			__brkval = cpnew;
    22be:	d0 93 69 05 	sts	0x0569, r29
    22c2:	c0 93 68 05 	sts	0x0568, r28
    22c6:	74 c0       	rjmp	.+232    	; 0x23b0 <free+0x12a>
		else
			__flp = fpnew;
    22c8:	db 01       	movw	r26, r22
    22ca:	40 e0       	ldi	r20, 0x00	; 0
    22cc:	50 e0       	ldi	r21, 0x00	; 0
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1 < fpnew)
    22ce:	ac 17       	cp	r26, r28
    22d0:	bd 07       	cpc	r27, r29
    22d2:	08 f1       	brcs	.+66     	; 0x2316 <free+0x90>
			continue;
		cp1 = (char *)fp1;
		fpnew->nx = fp1;
    22d4:	bb 83       	std	Y+3, r27	; 0x03
    22d6:	aa 83       	std	Y+2, r26	; 0x02
		if ((char *)&(fpnew->nx) + fpnew->sz == cp1) {
    22d8:	fe 01       	movw	r30, r28
    22da:	21 91       	ld	r18, Z+
    22dc:	31 91       	ld	r19, Z+
    22de:	e2 0f       	add	r30, r18
    22e0:	f3 1f       	adc	r31, r19
    22e2:	ae 17       	cp	r26, r30
    22e4:	bf 07       	cpc	r27, r31
    22e6:	79 f4       	brne	.+30     	; 0x2306 <free+0x80>
			/* upper chunk adjacent, assimilate it */
			fpnew->sz += fp1->sz + sizeof(size_t);
    22e8:	8d 91       	ld	r24, X+
    22ea:	9c 91       	ld	r25, X
    22ec:	11 97       	sbiw	r26, 0x01	; 1
    22ee:	28 0f       	add	r18, r24
    22f0:	39 1f       	adc	r19, r25
    22f2:	2e 5f       	subi	r18, 0xFE	; 254
    22f4:	3f 4f       	sbci	r19, 0xFF	; 255
    22f6:	39 83       	std	Y+1, r19	; 0x01
    22f8:	28 83       	st	Y, r18
			fpnew->nx = fp1->nx;
    22fa:	12 96       	adiw	r26, 0x02	; 2
    22fc:	8d 91       	ld	r24, X+
    22fe:	9c 91       	ld	r25, X
    2300:	13 97       	sbiw	r26, 0x03	; 3
    2302:	9b 83       	std	Y+3, r25	; 0x03
    2304:	8a 83       	std	Y+2, r24	; 0x02
		}
		if (fp2 == 0) {
    2306:	41 15       	cp	r20, r1
    2308:	51 05       	cpc	r21, r1
    230a:	71 f4       	brne	.+28     	; 0x2328 <free+0xa2>
			/* new head of freelist */
			__flp = fpnew;
    230c:	d0 93 6b 05 	sts	0x056B, r29
    2310:	c0 93 6a 05 	sts	0x056A, r28
    2314:	4d c0       	rjmp	.+154    	; 0x23b0 <free+0x12a>
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
    2316:	12 96       	adiw	r26, 0x02	; 2
    2318:	8d 91       	ld	r24, X+
    231a:	9c 91       	ld	r25, X
    231c:	13 97       	sbiw	r26, 0x03	; 3
    231e:	ad 01       	movw	r20, r26
	 * Now, find the position where our new entry belongs onto the
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
    2320:	00 97       	sbiw	r24, 0x00	; 0
    2322:	11 f0       	breq	.+4      	; 0x2328 <free+0xa2>
    2324:	dc 01       	movw	r26, r24
    2326:	d3 cf       	rjmp	.-90     	; 0x22ce <free+0x48>
	 * Note that we get here either if we hit the "break" above,
	 * or if we fell off the end of the loop.  The latter means
	 * we've got a new topmost chunk.  Either way, try aggregating
	 * with the lower chunk if possible.
	 */
	fp2->nx = fpnew;
    2328:	da 01       	movw	r26, r20
    232a:	13 96       	adiw	r26, 0x03	; 3
    232c:	dc 93       	st	X, r29
    232e:	ce 93       	st	-X, r28
    2330:	12 97       	sbiw	r26, 0x02	; 2
	cp2 = (char *)&(fp2->nx);
	if (cp2 + fp2->sz == cpnew) {
    2332:	fa 01       	movw	r30, r20
    2334:	21 91       	ld	r18, Z+
    2336:	31 91       	ld	r19, Z+
    2338:	e2 0f       	add	r30, r18
    233a:	f3 1f       	adc	r31, r19
    233c:	ce 17       	cp	r28, r30
    233e:	df 07       	cpc	r29, r31
    2340:	69 f4       	brne	.+26     	; 0x235c <free+0xd6>
		/* lower junk adjacent, merge */
		fp2->sz += fpnew->sz + sizeof(size_t);
    2342:	88 81       	ld	r24, Y
    2344:	99 81       	ldd	r25, Y+1	; 0x01
    2346:	28 0f       	add	r18, r24
    2348:	39 1f       	adc	r19, r25
    234a:	2e 5f       	subi	r18, 0xFE	; 254
    234c:	3f 4f       	sbci	r19, 0xFF	; 255
    234e:	fa 01       	movw	r30, r20
    2350:	31 83       	std	Z+1, r19	; 0x01
    2352:	20 83       	st	Z, r18
		fp2->nx = fpnew->nx;
    2354:	8a 81       	ldd	r24, Y+2	; 0x02
    2356:	9b 81       	ldd	r25, Y+3	; 0x03
    2358:	93 83       	std	Z+3, r25	; 0x03
    235a:	82 83       	std	Z+2, r24	; 0x02
    235c:	e0 e0       	ldi	r30, 0x00	; 0
    235e:	f0 e0       	ldi	r31, 0x00	; 0
	}
	/*
	 * If there's a new topmost chunk, lower __brkval instead.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1->nx != 0;
    2360:	db 01       	movw	r26, r22
    2362:	12 96       	adiw	r26, 0x02	; 2
    2364:	8d 91       	ld	r24, X+
    2366:	9c 91       	ld	r25, X
    2368:	13 97       	sbiw	r26, 0x03	; 3
    236a:	00 97       	sbiw	r24, 0x00	; 0
    236c:	19 f0       	breq	.+6      	; 0x2374 <free+0xee>
    236e:	bc 01       	movw	r22, r24
    2370:	fd 01       	movw	r30, r26
    2372:	f6 cf       	rjmp	.-20     	; 0x2360 <free+0xda>
	     fp2 = fp1, fp1 = fp1->nx)
		/* advance to entry just before end of list */;
	cp2 = (char *)&(fp1->nx);
    2374:	ab 01       	movw	r20, r22
    2376:	4e 5f       	subi	r20, 0xFE	; 254
    2378:	5f 4f       	sbci	r21, 0xFF	; 255
	if (cp2 + fp1->sz == __brkval) {
    237a:	db 01       	movw	r26, r22
    237c:	8d 91       	ld	r24, X+
    237e:	9c 91       	ld	r25, X
    2380:	84 0f       	add	r24, r20
    2382:	95 1f       	adc	r25, r21
    2384:	20 91 68 05 	lds	r18, 0x0568
    2388:	30 91 69 05 	lds	r19, 0x0569
    238c:	28 17       	cp	r18, r24
    238e:	39 07       	cpc	r19, r25
    2390:	79 f4       	brne	.+30     	; 0x23b0 <free+0x12a>
		if (fp2 == NULL)
    2392:	30 97       	sbiw	r30, 0x00	; 0
    2394:	29 f4       	brne	.+10     	; 0x23a0 <free+0x11a>
			/* Freelist is empty now. */
			__flp = NULL;
    2396:	10 92 6b 05 	sts	0x056B, r1
    239a:	10 92 6a 05 	sts	0x056A, r1
    239e:	02 c0       	rjmp	.+4      	; 0x23a4 <free+0x11e>
		else
			fp2->nx = NULL;
    23a0:	13 82       	std	Z+3, r1	; 0x03
    23a2:	12 82       	std	Z+2, r1	; 0x02
		__brkval = cp2 - sizeof(size_t);
    23a4:	42 50       	subi	r20, 0x02	; 2
    23a6:	50 40       	sbci	r21, 0x00	; 0
    23a8:	50 93 69 05 	sts	0x0569, r21
    23ac:	40 93 68 05 	sts	0x0568, r20
	}
}
    23b0:	df 91       	pop	r29
    23b2:	cf 91       	pop	r28
    23b4:	08 95       	ret

000023b6 <realloc>:
	char *cp, *cp1;
	void *memp;
	size_t s, incr;

	/* Trivial case, required by C standard. */
	if (ptr == 0)
    23b6:	6f 92       	push	r6
    23b8:	7f 92       	push	r7
    23ba:	8f 92       	push	r8
    23bc:	9f 92       	push	r9
    23be:	af 92       	push	r10
    23c0:	bf 92       	push	r11
    23c2:	cf 92       	push	r12
    23c4:	df 92       	push	r13
    23c6:	ef 92       	push	r14
    23c8:	ff 92       	push	r15
    23ca:	0f 93       	push	r16
    23cc:	1f 93       	push	r17
    23ce:	cf 93       	push	r28
    23d0:	df 93       	push	r29
    23d2:	8c 01       	movw	r16, r24
    23d4:	00 97       	sbiw	r24, 0x00	; 0
    23d6:	29 f4       	brne	.+10     	; 0x23e2 <realloc+0x2c>
		return malloc(len);
    23d8:	cb 01       	movw	r24, r22
    23da:	0e 94 a6 10 	call	0x214c	; 0x214c <malloc>
    23de:	8c 01       	movw	r16, r24
    23e0:	bb c0       	rjmp	.+374    	; 0x2558 <realloc+0x1a2>

	cp1 = (char *)ptr;
	cp1 -= sizeof(size_t);
    23e2:	8e ef       	ldi	r24, 0xFE	; 254
    23e4:	e8 2e       	mov	r14, r24
    23e6:	8f ef       	ldi	r24, 0xFF	; 255
    23e8:	f8 2e       	mov	r15, r24
    23ea:	e0 0e       	add	r14, r16
    23ec:	f1 1e       	adc	r15, r17
	fp1 = (struct __freelist *)cp1;

	cp = (char *)ptr + len; /* new next pointer */
    23ee:	48 01       	movw	r8, r16
    23f0:	86 0e       	add	r8, r22
    23f2:	97 1e       	adc	r9, r23
	if (cp < cp1)
    23f4:	8e 14       	cp	r8, r14
    23f6:	9f 04       	cpc	r9, r15
    23f8:	08 f4       	brcc	.+2      	; 0x23fc <realloc+0x46>
    23fa:	ac c0       	rjmp	.+344    	; 0x2554 <realloc+0x19e>
	 * we split off a chunk for the released portion, and call
	 * free() on it.  Therefore, we can only shrink if the new
	 * size is at least sizeof(struct __freelist) smaller than the
	 * previous size.
	 */
	if (len <= fp1->sz) {
    23fc:	d7 01       	movw	r26, r14
    23fe:	4d 91       	ld	r20, X+
    2400:	5c 91       	ld	r21, X
    2402:	11 97       	sbiw	r26, 0x01	; 1
    2404:	46 17       	cp	r20, r22
    2406:	57 07       	cpc	r21, r23
    2408:	b8 f0       	brcs	.+46     	; 0x2438 <realloc+0x82>
		/* The first test catches a possible unsigned int
		 * rollover condition. */
		if (fp1->sz <= sizeof(struct __freelist) ||
    240a:	45 30       	cpi	r20, 0x05	; 5
    240c:	51 05       	cpc	r21, r1
    240e:	08 f4       	brcc	.+2      	; 0x2412 <realloc+0x5c>
    2410:	a3 c0       	rjmp	.+326    	; 0x2558 <realloc+0x1a2>
    2412:	ca 01       	movw	r24, r20
    2414:	04 97       	sbiw	r24, 0x04	; 4
    2416:	86 17       	cp	r24, r22
    2418:	97 07       	cpc	r25, r23
    241a:	08 f4       	brcc	.+2      	; 0x241e <realloc+0x68>
    241c:	9d c0       	rjmp	.+314    	; 0x2558 <realloc+0x1a2>
		    len > fp1->sz - sizeof(struct __freelist))
			return ptr;
		fp2 = (struct __freelist *)cp;
		fp2->sz = fp1->sz - len - sizeof(size_t);
    241e:	42 50       	subi	r20, 0x02	; 2
    2420:	50 40       	sbci	r21, 0x00	; 0
    2422:	46 1b       	sub	r20, r22
    2424:	57 0b       	sbc	r21, r23
    2426:	f4 01       	movw	r30, r8
    2428:	41 93       	st	Z+, r20
    242a:	51 93       	st	Z+, r21
		fp1->sz = len;
    242c:	6d 93       	st	X+, r22
    242e:	7c 93       	st	X, r23
		free(&(fp2->nx));
    2430:	cf 01       	movw	r24, r30
    2432:	0e 94 43 11 	call	0x2286	; 0x2286 <free>
    2436:	90 c0       	rjmp	.+288    	; 0x2558 <realloc+0x1a2>

	/*
	 * If we get here, we are growing.  First, see whether there
	 * is space in the free list on top of our current chunk.
	 */
	incr = len - fp1->sz;
    2438:	5b 01       	movw	r10, r22
    243a:	a4 1a       	sub	r10, r20
    243c:	b5 0a       	sbc	r11, r21
	cp = (char *)ptr + fp1->sz;
    243e:	38 01       	movw	r6, r16
    2440:	64 0e       	add	r6, r20
    2442:	75 1e       	adc	r7, r21
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
    2444:	a0 91 6a 05 	lds	r26, 0x056A
    2448:	b0 91 6b 05 	lds	r27, 0x056B
    244c:	e0 e0       	ldi	r30, 0x00	; 0
    244e:	f0 e0       	ldi	r31, 0x00	; 0
    2450:	cc 24       	eor	r12, r12
    2452:	dd 24       	eor	r13, r13
    2454:	47 c0       	rjmp	.+142    	; 0x24e4 <realloc+0x12e>
	     fp3;
	     ofp3 = fp3, fp3 = fp3->nx) {
		if (fp3 == fp2 && fp3->sz + sizeof(size_t) >= incr) {
    2456:	a6 15       	cp	r26, r6
    2458:	b7 05       	cpc	r27, r7
    245a:	a9 f5       	brne	.+106    	; 0x24c6 <realloc+0x110>
    245c:	cd 91       	ld	r28, X+
    245e:	dc 91       	ld	r29, X
    2460:	11 97       	sbiw	r26, 0x01	; 1
    2462:	ce 01       	movw	r24, r28
    2464:	02 96       	adiw	r24, 0x02	; 2
    2466:	8a 15       	cp	r24, r10
    2468:	9b 05       	cpc	r25, r11
    246a:	68 f1       	brcs	.+90     	; 0x24c6 <realloc+0x110>
			/* found something that fits */
			if (fp3->sz + sizeof(size_t) - incr > sizeof(struct __freelist)) {
    246c:	ce 01       	movw	r24, r28
    246e:	8a 19       	sub	r24, r10
    2470:	9b 09       	sbc	r25, r11
    2472:	02 96       	adiw	r24, 0x02	; 2
    2474:	12 96       	adiw	r26, 0x02	; 2
    2476:	2c 91       	ld	r18, X
    2478:	12 97       	sbiw	r26, 0x02	; 2
    247a:	13 96       	adiw	r26, 0x03	; 3
    247c:	3c 91       	ld	r19, X
    247e:	05 97       	sbiw	r24, 0x05	; 5
    2480:	58 f0       	brcs	.+22     	; 0x2498 <realloc+0xe2>
				/* split off a new freelist entry */
				cp = (char *)ptr + len;
				fp2 = (struct __freelist *)cp;
    2482:	f4 01       	movw	r30, r8
				fp2->nx = fp3->nx;
    2484:	22 83       	std	Z+2, r18	; 0x02
    2486:	33 83       	std	Z+3, r19	; 0x03
				fp2->sz = fp3->sz - incr;
    2488:	ca 19       	sub	r28, r10
    248a:	db 09       	sbc	r29, r11
    248c:	d1 83       	std	Z+1, r29	; 0x01
    248e:	c0 83       	st	Z, r28
				fp1->sz = len;
    2490:	d7 01       	movw	r26, r14
    2492:	6d 93       	st	X+, r22
    2494:	7c 93       	st	X, r23
    2496:	09 c0       	rjmp	.+18     	; 0x24aa <realloc+0xf4>
			} else {
				/* it just fits, so use it entirely */
				fp1->sz += fp3->sz + sizeof(size_t);
    2498:	4e 5f       	subi	r20, 0xFE	; 254
    249a:	5f 4f       	sbci	r21, 0xFF	; 255
    249c:	4c 0f       	add	r20, r28
    249e:	5d 1f       	adc	r21, r29
    24a0:	f7 01       	movw	r30, r14
    24a2:	51 83       	std	Z+1, r21	; 0x01
    24a4:	40 83       	st	Z, r20
				fp2 = fp3->nx;
    24a6:	c9 01       	movw	r24, r18
    24a8:	fc 01       	movw	r30, r24
			}
			if (ofp3)
    24aa:	c1 14       	cp	r12, r1
    24ac:	d1 04       	cpc	r13, r1
    24ae:	31 f0       	breq	.+12     	; 0x24bc <realloc+0x106>
				ofp3->nx = fp2;
    24b0:	d6 01       	movw	r26, r12
    24b2:	13 96       	adiw	r26, 0x03	; 3
    24b4:	fc 93       	st	X, r31
    24b6:	ee 93       	st	-X, r30
    24b8:	12 97       	sbiw	r26, 0x02	; 2
    24ba:	4e c0       	rjmp	.+156    	; 0x2558 <realloc+0x1a2>
			else
				__flp = fp2;
    24bc:	f0 93 6b 05 	sts	0x056B, r31
    24c0:	e0 93 6a 05 	sts	0x056A, r30
    24c4:	49 c0       	rjmp	.+146    	; 0x2558 <realloc+0x1a2>
    24c6:	8d 91       	ld	r24, X+
    24c8:	9c 91       	ld	r25, X
    24ca:	11 97       	sbiw	r26, 0x01	; 1
    24cc:	e8 17       	cp	r30, r24
    24ce:	f9 07       	cpc	r31, r25
    24d0:	08 f4       	brcc	.+2      	; 0x24d4 <realloc+0x11e>
    24d2:	fc 01       	movw	r30, r24
	incr = len - fp1->sz;
	cp = (char *)ptr + fp1->sz;
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
	     fp3;
	     ofp3 = fp3, fp3 = fp3->nx) {
    24d4:	6d 01       	movw	r12, r26
    24d6:	12 96       	adiw	r26, 0x02	; 2
    24d8:	8c 91       	ld	r24, X
    24da:	12 97       	sbiw	r26, 0x02	; 2
    24dc:	13 96       	adiw	r26, 0x03	; 3
    24de:	9c 91       	ld	r25, X
    24e0:	9c 01       	movw	r18, r24
    24e2:	d9 01       	movw	r26, r18
	 */
	incr = len - fp1->sz;
	cp = (char *)ptr + fp1->sz;
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
	     fp3;
    24e4:	10 97       	sbiw	r26, 0x00	; 0
    24e6:	09 f0       	breq	.+2      	; 0x24ea <realloc+0x134>
    24e8:	b6 cf       	rjmp	.-148    	; 0x2456 <realloc+0xa0>
	 * large enough chunk on the freelist that could be re-used
	 * (by a call to malloc() below), quickly extend the
	 * allocation area if possible, without need to copy the old
	 * data.
	 */
	if (__brkval == (char *)ptr + fp1->sz && len > s) {
    24ea:	80 91 68 05 	lds	r24, 0x0568
    24ee:	90 91 69 05 	lds	r25, 0x0569
    24f2:	86 15       	cp	r24, r6
    24f4:	97 05       	cpc	r25, r7
    24f6:	e9 f4       	brne	.+58     	; 0x2532 <realloc+0x17c>
    24f8:	e6 17       	cp	r30, r22
    24fa:	f7 07       	cpc	r31, r23
    24fc:	d0 f4       	brcc	.+52     	; 0x2532 <realloc+0x17c>
		cp1 = __malloc_heap_end;
    24fe:	20 91 37 01 	lds	r18, 0x0137
    2502:	30 91 38 01 	lds	r19, 0x0138
		cp = (char *)ptr + len;
		if (cp1 == 0)
    2506:	21 15       	cp	r18, r1
    2508:	31 05       	cpc	r19, r1
    250a:	41 f4       	brne	.+16     	; 0x251c <realloc+0x166>
			cp1 = STACK_POINTER() - __malloc_margin;
    250c:	2d b7       	in	r18, 0x3d	; 61
    250e:	3e b7       	in	r19, 0x3e	; 62
    2510:	80 91 33 01 	lds	r24, 0x0133
    2514:	90 91 34 01 	lds	r25, 0x0134
    2518:	28 1b       	sub	r18, r24
    251a:	39 0b       	sbc	r19, r25
		if (cp < cp1) {
    251c:	82 16       	cp	r8, r18
    251e:	93 06       	cpc	r9, r19
    2520:	c8 f4       	brcc	.+50     	; 0x2554 <realloc+0x19e>
			__brkval = cp;
    2522:	90 92 69 05 	sts	0x0569, r9
    2526:	80 92 68 05 	sts	0x0568, r8
			fp1->sz = len;
    252a:	f7 01       	movw	r30, r14
    252c:	71 83       	std	Z+1, r23	; 0x01
    252e:	60 83       	st	Z, r22
    2530:	13 c0       	rjmp	.+38     	; 0x2558 <realloc+0x1a2>

	/*
	 * Call malloc() for a new chunk, then copy over the data, and
	 * release the old region.
	 */
	if ((memp = malloc(len)) == 0)
    2532:	cb 01       	movw	r24, r22
    2534:	0e 94 a6 10 	call	0x214c	; 0x214c <malloc>
    2538:	ec 01       	movw	r28, r24
    253a:	00 97       	sbiw	r24, 0x00	; 0
    253c:	59 f0       	breq	.+22     	; 0x2554 <realloc+0x19e>
		return 0;
	memcpy(memp, ptr, fp1->sz);
    253e:	d7 01       	movw	r26, r14
    2540:	4d 91       	ld	r20, X+
    2542:	5c 91       	ld	r21, X
    2544:	b8 01       	movw	r22, r16
    2546:	0e 94 79 01 	call	0x2f2	; 0x2f2 <memcpy>
	free(ptr);
    254a:	c8 01       	movw	r24, r16
    254c:	0e 94 43 11 	call	0x2286	; 0x2286 <free>
    2550:	8e 01       	movw	r16, r28
    2552:	02 c0       	rjmp	.+4      	; 0x2558 <realloc+0x1a2>
	return memp;
    2554:	00 e0       	ldi	r16, 0x00	; 0
    2556:	10 e0       	ldi	r17, 0x00	; 0
}
    2558:	c8 01       	movw	r24, r16
    255a:	df 91       	pop	r29
    255c:	cf 91       	pop	r28
    255e:	1f 91       	pop	r17
    2560:	0f 91       	pop	r16
    2562:	ff 90       	pop	r15
    2564:	ef 90       	pop	r14
    2566:	df 90       	pop	r13
    2568:	cf 90       	pop	r12
    256a:	bf 90       	pop	r11
    256c:	af 90       	pop	r10
    256e:	9f 90       	pop	r9
    2570:	8f 90       	pop	r8
    2572:	7f 90       	pop	r7
    2574:	6f 90       	pop	r6
    2576:	08 95       	ret

00002578 <__udivmodsi4>:
    2578:	a1 e2       	ldi	r26, 0x21	; 33
    257a:	1a 2e       	mov	r1, r26
    257c:	aa 1b       	sub	r26, r26
    257e:	bb 1b       	sub	r27, r27
    2580:	fd 01       	movw	r30, r26
    2582:	0d c0       	rjmp	.+26     	; 0x259e <__udivmodsi4_ep>

00002584 <__udivmodsi4_loop>:
    2584:	aa 1f       	adc	r26, r26
    2586:	bb 1f       	adc	r27, r27
    2588:	ee 1f       	adc	r30, r30
    258a:	ff 1f       	adc	r31, r31
    258c:	a2 17       	cp	r26, r18
    258e:	b3 07       	cpc	r27, r19
    2590:	e4 07       	cpc	r30, r20
    2592:	f5 07       	cpc	r31, r21
    2594:	20 f0       	brcs	.+8      	; 0x259e <__udivmodsi4_ep>
    2596:	a2 1b       	sub	r26, r18
    2598:	b3 0b       	sbc	r27, r19
    259a:	e4 0b       	sbc	r30, r20
    259c:	f5 0b       	sbc	r31, r21

0000259e <__udivmodsi4_ep>:
    259e:	66 1f       	adc	r22, r22
    25a0:	77 1f       	adc	r23, r23
    25a2:	88 1f       	adc	r24, r24
    25a4:	99 1f       	adc	r25, r25
    25a6:	1a 94       	dec	r1
    25a8:	69 f7       	brne	.-38     	; 0x2584 <__udivmodsi4_loop>
    25aa:	60 95       	com	r22
    25ac:	70 95       	com	r23
    25ae:	80 95       	com	r24
    25b0:	90 95       	com	r25
    25b2:	9b 01       	movw	r18, r22
    25b4:	ac 01       	movw	r20, r24
    25b6:	bd 01       	movw	r22, r26
    25b8:	cf 01       	movw	r24, r30
    25ba:	08 95       	ret

000025bc <__tablejump2__>:
    25bc:	ee 0f       	add	r30, r30
    25be:	ff 1f       	adc	r31, r31

000025c0 <__tablejump__>:
    25c0:	05 90       	lpm	r0, Z+
    25c2:	f4 91       	lpm	r31, Z+
    25c4:	e0 2d       	mov	r30, r0
    25c6:	09 94       	ijmp

000025c8 <__prologue_saves__>:
    25c8:	2f 92       	push	r2
    25ca:	3f 92       	push	r3
    25cc:	4f 92       	push	r4
    25ce:	5f 92       	push	r5
    25d0:	6f 92       	push	r6
    25d2:	7f 92       	push	r7
    25d4:	8f 92       	push	r8
    25d6:	9f 92       	push	r9
    25d8:	af 92       	push	r10
    25da:	bf 92       	push	r11
    25dc:	cf 92       	push	r12
    25de:	df 92       	push	r13
    25e0:	ef 92       	push	r14
    25e2:	ff 92       	push	r15
    25e4:	0f 93       	push	r16
    25e6:	1f 93       	push	r17
    25e8:	cf 93       	push	r28
    25ea:	df 93       	push	r29
    25ec:	cd b7       	in	r28, 0x3d	; 61
    25ee:	de b7       	in	r29, 0x3e	; 62
    25f0:	ca 1b       	sub	r28, r26
    25f2:	db 0b       	sbc	r29, r27
    25f4:	0f b6       	in	r0, 0x3f	; 63
    25f6:	f8 94       	cli
    25f8:	de bf       	out	0x3e, r29	; 62
    25fa:	0f be       	out	0x3f, r0	; 63
    25fc:	cd bf       	out	0x3d, r28	; 61
    25fe:	09 94       	ijmp

00002600 <__epilogue_restores__>:
    2600:	2a 88       	ldd	r2, Y+18	; 0x12
    2602:	39 88       	ldd	r3, Y+17	; 0x11
    2604:	48 88       	ldd	r4, Y+16	; 0x10
    2606:	5f 84       	ldd	r5, Y+15	; 0x0f
    2608:	6e 84       	ldd	r6, Y+14	; 0x0e
    260a:	7d 84       	ldd	r7, Y+13	; 0x0d
    260c:	8c 84       	ldd	r8, Y+12	; 0x0c
    260e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2610:	aa 84       	ldd	r10, Y+10	; 0x0a
    2612:	b9 84       	ldd	r11, Y+9	; 0x09
    2614:	c8 84       	ldd	r12, Y+8	; 0x08
    2616:	df 80       	ldd	r13, Y+7	; 0x07
    2618:	ee 80       	ldd	r14, Y+6	; 0x06
    261a:	fd 80       	ldd	r15, Y+5	; 0x05
    261c:	0c 81       	ldd	r16, Y+4	; 0x04
    261e:	1b 81       	ldd	r17, Y+3	; 0x03
    2620:	aa 81       	ldd	r26, Y+2	; 0x02
    2622:	b9 81       	ldd	r27, Y+1	; 0x01
    2624:	ce 0f       	add	r28, r30
    2626:	d1 1d       	adc	r29, r1
    2628:	0f b6       	in	r0, 0x3f	; 63
    262a:	f8 94       	cli
    262c:	de bf       	out	0x3e, r29	; 62
    262e:	0f be       	out	0x3f, r0	; 63
    2630:	cd bf       	out	0x3d, r28	; 61
    2632:	ed 01       	movw	r28, r26
    2634:	08 95       	ret

00002636 <_exit>:
    2636:	f8 94       	cli

00002638 <__stop_program>:
    2638:	ff cf       	rjmp	.-2      	; 0x2638 <__stop_program>