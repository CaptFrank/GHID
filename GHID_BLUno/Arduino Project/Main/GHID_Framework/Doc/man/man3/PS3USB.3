.TH "PS3USB" 3 "Sun Mar 30 2014" "Version version 2.0" "GHID Framework" \" -*- nroff -*-
.ad l
.nh
.SH NAME
PS3USB \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <PS3USB\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBPS3USB\fP (USB *\fBpUsb\fP, uint8_t btadr5=0, uint8_t btadr4=0, uint8_t btadr3=0, uint8_t btadr2=0, uint8_t btadr1=0, uint8_t btadr0=0)"
.br
.ti -1c
.RI "void \fBsetBdaddr\fP (uint8_t *bdaddr)"
.br
.ti -1c
.RI "void \fBgetBdaddr\fP (uint8_t *bdaddr)"
.br
.ti -1c
.RI "void \fBsetMoveBdaddr\fP (uint8_t *bdaddr)"
.br
.ti -1c
.RI "void \fBgetMoveBdaddr\fP (uint8_t *bdaddr)"
.br
.ti -1c
.RI "void \fBgetMoveCalibration\fP (uint8_t *\fBdata\fP)"
.br
.in -1c
.PP
.RI "\fBUSBDeviceConfig implementation\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "virtual uint8_t \fBInit\fP (uint8_t parent, uint8_t port, bool lowspeed)"
.br
.ti -1c
.RI "virtual uint8_t \fBRelease\fP ()"
.br
.ti -1c
.RI "virtual uint8_t \fBPoll\fP ()"
.br
.ti -1c
.RI "virtual uint8_t \fBGetAddress\fP ()"
.br
.ti -1c
.RI "virtual bool \fBisReady\fP ()"
.br
.ti -1c
.RI "virtual boolean \fBVIDPIDOK\fP (uint16_t vid, uint16_t pid)"
.br
.in -1c
.in -1c
.PP
.RI "\fBPS3 Controller functions\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "bool \fBgetButtonPress\fP (\fBButtonEnum\fP \fBb\fP)"
.br
.ti -1c
.RI "bool \fBgetButtonClick\fP (\fBButtonEnum\fP \fBb\fP)"
.br
.ti -1c
.RI "uint8_t \fBgetAnalogButton\fP (\fBButtonEnum\fP a)"
.br
.ti -1c
.RI "uint8_t \fBgetAnalogHat\fP (\fBAnalogHatEnum\fP a)"
.br
.ti -1c
.RI "uint16_t \fBgetSensor\fP (\fBSensorEnum\fP a)"
.br
.ti -1c
.RI "double \fBgetAngle\fP (\fBAngleEnum\fP a)"
.br
.ti -1c
.RI "bool \fBgetStatus\fP (\fBStatusEnum\fP c)"
.br
.ti -1c
.RI "void \fBprintStatusString\fP ()"
.br
.ti -1c
.RI "void \fBsetAllOff\fP ()"
.br
.ti -1c
.RI "void \fBsetRumbleOff\fP ()"
.br
.ti -1c
.RI "void \fBsetRumbleOn\fP (\fBRumbleEnum\fP mode)"
.br
.ti -1c
.RI "void \fBsetRumbleOn\fP (uint8_t rightDuration, uint8_t rightPower, uint8_t leftDuration, uint8_t leftPower)"
.br
.ti -1c
.RI "void \fBsetLedRaw\fP (uint8_t value)"
.br
.ti -1c
.RI "void \fBsetLedOff\fP ()"
.br
.ti -1c
.RI "void \fBsetLedOff\fP (\fBLEDEnum\fP a)"
.br
.ti -1c
.RI "void \fBsetLedOn\fP (\fBLEDEnum\fP a)"
.br
.ti -1c
.RI "void \fBsetLedToggle\fP (\fBLEDEnum\fP a)"
.br
.ti -1c
.RI "void \fBmoveSetBulb\fP (uint8_t \fBr\fP, uint8_t \fBg\fP, uint8_t \fBb\fP)"
.br
.ti -1c
.RI "void \fBmoveSetBulb\fP (\fBColorsEnum\fP color)"
.br
.ti -1c
.RI "void \fBmoveSetRumble\fP (uint8_t rumble)"
.br
.ti -1c
.RI "void \fBattachOnInit\fP (void(*funcOnInit)(void))"
.br
.in -1c
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "bool \fBPS3Connected\fP"
.br
.ti -1c
.RI "bool \fBPS3MoveConnected\fP"
.br
.ti -1c
.RI "bool \fBPS3NavigationConnected\fP"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "USB * \fBpUsb\fP"
.br
.ti -1c
.RI "uint8_t \fBbAddress\fP"
.br
.ti -1c
.RI "EpInfo \fBepInfo\fP [\fBPS3_MAX_ENDPOINTS\fP]"
.br
.in -1c
.SH "Detailed Description"
.PP 
This class implements support for all the official PS3 Controllers: Dualshock 3, Navigation or a Motion controller via USB\&.
.PP
One can only set the color of the bulb, set the rumble, set and get the bluetooth address and calibrate the magnetometer via USB on the Move controller\&.
.PP
Information about the protocol can be found at the wiki: https://github.com/felis/USB_Host_Shield_2.0/wiki/PS3-Information\&. 
.PP
Definition at line 58 of file PS3USB\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "\fBPS3USB::PS3USB\fP (USB *pUsb, uint8_tbtadr5 = \fC0\fP, uint8_tbtadr4 = \fC0\fP, uint8_tbtadr3 = \fC0\fP, uint8_tbtadr2 = \fC0\fP, uint8_tbtadr1 = \fC0\fP, uint8_tbtadr0 = \fC0\fP)"Constructor for the \fBPS3USB\fP class\&. 
.PP
\fBParameters:\fP
.RS 4
\fIpUsb\fP Pointer to USB class instance\&. 
.br
\fIbtadr5,btadr4,btadr3,btadr2,btadr1,btadr0\fP Pass your dongles Bluetooth address into the constructor, so you are able to pair the controller with a Bluetooth dongle\&. 
.RE
.PP

.PP
Definition at line 23 of file PS3USB\&.cpp\&.
.SH "Member Function Documentation"
.PP 
.SS "void \fBPS3USB::attachOnInit\fP (void(*)(void)funcOnInit)\fC [inline]\fP"Used to call your own function when the controller is successfully initialized\&. 
.PP
\fBParameters:\fP
.RS 4
\fIfuncOnInit\fP Function to call\&. 
.RE
.PP

.PP
Definition at line 263 of file PS3USB\&.h\&.
.SS "virtual uint8_t \fBPS3USB::GetAddress\fP ()\fC [inline, virtual]\fP"Get the device address\&. 
.PP
\fBReturns:\fP
.RS 4
The device address\&. 
.RE
.PP

.PP
Definition at line 93 of file PS3USB\&.h\&.
.SS "uint8_t \fBPS3USB::getAnalogButton\fP (\fBButtonEnum\fPa)"Used to get the analog value from button presses\&. 
.PP
\fBParameters:\fP
.RS 4
\fIa\fP The \fBButtonEnum\fP to read\&. The supported buttons are: \fBUP\fP, \fBRIGHT\fP, \fBDOWN\fP, \fBLEFT\fP, \fBL1\fP, \fBL2\fP, \fBR1\fP, \fBR2\fP, \fBTRIANGLE\fP, \fBCIRCLE\fP, \fBCROSS\fP, \fBSQUARE\fP, and \fBT\fP\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Analog value in the range of 0-255\&. 
.RE
.PP

.PP
Definition at line 326 of file PS3USB\&.cpp\&.
.SS "uint8_t \fBPS3USB::getAnalogHat\fP (\fBAnalogHatEnum\fPa)"Used to read the analog joystick\&. 
.PP
\fBParameters:\fP
.RS 4
\fIa\fP \fBLeftHatX\fP, \fBLeftHatY\fP, \fBRightHatX\fP, and \fBRightHatY\fP\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Return the analog value in the range of 0-255\&. 
.RE
.PP

.PP
Definition at line 330 of file PS3USB\&.cpp\&.
.SS "double \fBPS3USB::getAngle\fP (\fBAngleEnum\fPa)"Use this to get \fBPitch\fP and \fBRoll\fP calculated using the accelerometer\&. 
.PP
\fBParameters:\fP
.RS 4
\fIa\fP Either \fBPitch\fP or \fBRoll\fP\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Return the angle in the range of 0-360\&. 
.RE
.PP

.PP
Definition at line 338 of file PS3USB\&.cpp\&.
.SS "void \fBPS3USB::getBdaddr\fP (uint8_t *bdaddr)"Used to get the Bluetooth address inside the Dualshock 3 and Navigation controller\&. Will return LSB first\&. 
.PP
\fBParameters:\fP
.RS 4
\fIbdaddr\fP Your dongles Bluetooth address\&. 
.RE
.PP

.PP
Definition at line 476 of file PS3USB\&.cpp\&.
.SS "bool \fBPS3USB::getButtonClick\fP (\fBButtonEnum\fPb)"
.PP
Definition at line 319 of file PS3USB\&.cpp\&.
.SS "bool \fBPS3USB::getButtonPress\fP (\fBButtonEnum\fPb)"\fBgetButtonPress(ButtonEnum b)\fP will return true as long as the button is held down\&.
.PP
While \fBgetButtonClick(ButtonEnum b)\fP will only return it once\&.
.PP
So you instance if you need to increase a variable once you would use \fBgetButtonClick(ButtonEnum b)\fP, but if you need to drive a robot forward you would use \fBgetButtonPress(ButtonEnum b)\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIb\fP \fBButtonEnum\fP to read\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBgetButtonPress(ButtonEnum b)\fP will return a true as long as a button is held down, while \fBgetButtonClick(ButtonEnum b)\fP will return true once for each button press\&. 
.RE
.PP

.PP
Definition at line 315 of file PS3USB\&.cpp\&.
.SS "void \fBPS3USB::getMoveBdaddr\fP (uint8_t *bdaddr)"Used to get the Bluetooth address inside the Move controller\&. Will return LSB first\&. 
.PP
\fBParameters:\fP
.RS 4
\fIbdaddr\fP Your dongles Bluetooth address\&. 
.RE
.PP

.PP
Definition at line 541 of file PS3USB\&.cpp\&.
.SS "void \fBPS3USB::getMoveCalibration\fP (uint8_t *data)"Used to get the calibration data inside the Move controller\&. 
.PP
\fBParameters:\fP
.RS 4
\fIdata\fP Buffer to store data in\&. Must be at least 147 bytes 
.RE
.PP

.PP
Definition at line 551 of file PS3USB\&.cpp\&.
.SS "uint16_t \fBPS3USB::getSensor\fP (\fBSensorEnum\fPa)"Used to read the sensors inside the Dualshock 3 controller\&. 
.PP
\fBParameters:\fP
.RS 4
\fIa\fP The Dualshock 3 has a 3-axis accelerometer and a 1-axis gyro inside\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Return the raw sensor value\&. 
.RE
.PP

.PP
Definition at line 334 of file PS3USB\&.cpp\&.
.SS "bool \fBPS3USB::getStatus\fP (\fBStatusEnum\fPc)"Get the \fBStatusEnum\fP from the controller\&. 
.PP
\fBParameters:\fP
.RS 4
\fIc\fP The \fBStatusEnum\fP you want to read\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
True if correct and false if not\&. 
.RE
.PP

.PP
Definition at line 361 of file PS3USB\&.cpp\&.
.SS "uint8_t \fBPS3USB::Init\fP (uint8_tparent, uint8_tport, boollowspeed)\fC [virtual]\fP"Initialize the PS3 Controller\&. 
.PP
\fBParameters:\fP
.RS 4
\fIparent\fP Hub number\&. 
.br
\fIport\fP Port number on the hub\&. 
.br
\fIlowspeed\fP Speed of the device\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success\&. 
.RE
.PP

.PP
Definition at line 46 of file PS3USB\&.cpp\&.
.SS "virtual bool \fBPS3USB::isReady\fP ()\fC [inline, virtual]\fP"Used to check if the controller has been initialized\&. 
.PP
\fBReturns:\fP
.RS 4
True if it's ready\&. 
.RE
.PP

.PP
Definition at line 101 of file PS3USB\&.h\&.
.SS "void \fBPS3USB::moveSetBulb\fP (uint8_tr, uint8_tg, uint8_tb)"Use this to set the Color using RGB values\&. 
.PP
\fBParameters:\fP
.RS 4
\fIr,g,b\fP RGB value\&. 
.RE
.PP

.PP
Definition at line 502 of file PS3USB\&.cpp\&.
.SS "void \fBPS3USB::moveSetBulb\fP (\fBColorsEnum\fPcolor)"Use this to set the color using the predefined colors in \fBColorsEnum\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcolor\fP The desired color\&. 
.RE
.PP

.PP
Definition at line 511 of file PS3USB\&.cpp\&.
.SS "void \fBPS3USB::moveSetRumble\fP (uint8_trumble)"Set the rumble value inside the Move controller\&. 
.PP
\fBParameters:\fP
.RS 4
\fIrumble\fP The desired value in the range from 64-255\&. 
.RE
.PP

.PP
Definition at line 515 of file PS3USB\&.cpp\&.
.SS "uint8_t \fBPS3USB::Poll\fP ()\fC [virtual]\fP"Poll the USB Input endpoins and run the state machines\&. 
.PP
\fBReturns:\fP
.RS 4
0 on success\&. 
.RE
.PP

.PP
Definition at line 271 of file PS3USB\&.cpp\&.
.SS "void \fBPS3USB::printStatusString\fP ()"Read all the available statuses from the controller and prints it as a nice formated string\&. 
.PP
Definition at line 365 of file PS3USB\&.cpp\&.
.SS "uint8_t \fBPS3USB::Release\fP ()\fC [virtual]\fP"Release the USB device\&. 
.PP
\fBReturns:\fP
.RS 4
0 on success\&. 
.RE
.PP

.PP
Definition at line 261 of file PS3USB\&.cpp\&.
.SS "void \fBPS3USB::setAllOff\fP ()"Used to set all LEDs and rumble off\&. 
.PP
Definition at line 404 of file PS3USB\&.cpp\&.
.SS "void \fBPS3USB::setBdaddr\fP (uint8_t *bdaddr)"Used to set the Bluetooth address inside the Dualshock 3 and Navigation controller\&. Set using LSB first\&. 
.PP
\fBParameters:\fP
.RS 4
\fIbdaddr\fP Your dongles Bluetooth address\&. 
.RE
.PP

.PP
Definition at line 463 of file PS3USB\&.cpp\&.
.SS "void \fBPS3USB::setLedOff\fP ()\fC [inline]\fP"Turn all LEDs off\&. 
.PP
Definition at line 224 of file PS3USB\&.h\&.
.SS "void \fBPS3USB::setLedOff\fP (\fBLEDEnum\fPa)"Turn the specific \fBLEDEnum\fP off\&. 
.PP
\fBParameters:\fP
.RS 4
\fIa\fP The \fBLEDEnum\fP to turn off\&. 
.RE
.PP

.PP
Definition at line 444 of file PS3USB\&.cpp\&.
.SS "void \fBPS3USB::setLedOn\fP (\fBLEDEnum\fPa)"Turn the specific \fBLEDEnum\fP on\&. 
.PP
\fBParameters:\fP
.RS 4
\fIa\fP The \fBLEDEnum\fP to turn on\&. 
.RE
.PP

.PP
Definition at line 449 of file PS3USB\&.cpp\&.
.SS "void \fBPS3USB::setLedRaw\fP (uint8_tvalue)"Set LED value without using the \fBLEDEnum\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIvalue\fP See: \fBLEDEnum\fP\&. 
.RE
.PP

.PP
Definition at line 439 of file PS3USB\&.cpp\&.
.SS "void \fBPS3USB::setLedToggle\fP (\fBLEDEnum\fPa)"Toggle the specific \fBLEDEnum\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIa\fP The \fBLEDEnum\fP to toggle\&. 
.RE
.PP

.PP
Definition at line 458 of file PS3USB\&.cpp\&.
.SS "void \fBPS3USB::setMoveBdaddr\fP (uint8_t *bdaddr)"Used to set the Bluetooth address inside the Move controller\&. Set using LSB first\&. 
.PP
\fBParameters:\fP
.RS 4
\fIbdaddr\fP Your dongles Bluetooth address\&. 
.RE
.PP

.PP
Definition at line 525 of file PS3USB\&.cpp\&.
.SS "void \fBPS3USB::setRumbleOff\fP ()"Turn off rumble\&. 
.PP
Definition at line 411 of file PS3USB\&.cpp\&.
.SS "void \fBPS3USB::setRumbleOn\fP (\fBRumbleEnum\fPmode)"Turn on rumble\&. 
.PP
\fBParameters:\fP
.RS 4
\fImode\fP Either \fBRumbleHigh\fP or \fBRumbleLow\fP\&. 
.RE
.PP

.PP
Definition at line 420 of file PS3USB\&.cpp\&.
.SS "void \fBPS3USB::setRumbleOn\fP (uint8_trightDuration, uint8_trightPower, uint8_tleftDuration, uint8_tleftPower)"Turn on rumble using custom duration and power\&. 
.PP
\fBParameters:\fP
.RS 4
\fIrightDuration\fP The duration of the right/low rumble effect\&. 
.br
\fIrightPower\fP The intensity of the right/low rumble effect\&. 
.br
\fIleftDuration\fP The duration of the left/high rumble effect\&. 
.br
\fIleftPower\fP The intensity of the left/high rumble effect\&. 
.RE
.PP

.PP
Definition at line 431 of file PS3USB\&.cpp\&.
.SS "virtual boolean \fBPS3USB::VIDPIDOK\fP (uint16_tvid, uint16_tpid)\fC [inline, virtual]\fP"Used by the USB core to check what this driver support\&. 
.PP
\fBParameters:\fP
.RS 4
\fIvid\fP The device's VID\&. 
.br
\fIpid\fP The device's PID\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Returns true if the device's VID and PID matches this driver\&. 
.RE
.PP

.PP
Definition at line 111 of file PS3USB\&.h\&.
.SH "Member Data Documentation"
.PP 
.SS "uint8_t \fBPS3USB::bAddress\fP\fC [protected]\fP"Device address\&. 
.PP
Definition at line 279 of file PS3USB\&.h\&.
.SS "EpInfo \fBPS3USB::epInfo\fP[\fBPS3_MAX_ENDPOINTS\fP]\fC [protected]\fP"Endpoint info structure\&. 
.PP
Definition at line 281 of file PS3USB\&.h\&.
.SS "bool \fBPS3USB::PS3Connected\fP"Variable used to indicate if the normal playstation controller is successfully connected\&. 
.PP
Definition at line 265 of file PS3USB\&.h\&.
.SS "bool \fBPS3USB::PS3MoveConnected\fP"Variable used to indicate if the move controller is successfully connected\&. 
.PP
Definition at line 271 of file PS3USB\&.h\&.
.SS "bool \fBPS3USB::PS3NavigationConnected\fP"Variable used to indicate if the navigation controller is successfully connected\&. 
.PP
Definition at line 273 of file PS3USB\&.h\&.
.SS "USB* \fBPS3USB::pUsb\fP\fC [protected]\fP"Pointer to USB class instance\&. 
.PP
Definition at line 277 of file PS3USB\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for GHID Framework from the source code\&.
